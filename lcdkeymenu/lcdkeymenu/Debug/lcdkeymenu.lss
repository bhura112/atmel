
lcdkeymenu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000033c  00800100  00001b98  00001c2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000de  0080043c  0080043c  00001f68  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001f68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001fc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00002000  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000334c  00000000  00000000  00002210  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001356  00000000  00000000  0000555c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013df  00000000  00000000  000068b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000680  00000000  00000000  00007c94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cb0  00000000  00000000  00008314  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001769  00000000  00000000  00008fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  0000a72d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f1 c7       	rjmp	.+4066   	; 0x1024 <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 46 08 	jmp	0x108c	; 0x108c <__vector_18>
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	14 e0       	ldi	r17, 0x04	; 4
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 e9       	ldi	r30, 0x98	; 152
      a0:	fb e1       	ldi	r31, 0x1B	; 27
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 33       	cpi	r26, 0x3C	; 60
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	25 e0       	ldi	r18, 0x05	; 5
      b4:	ac e3       	ldi	r26, 0x3C	; 60
      b6:	b4 e0       	ldi	r27, 0x04	; 4
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	aa 31       	cpi	r26, 0x1A	; 26
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	c4 d3       	rcall	.+1928   	; 0x84c <main>
      c4:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <Gpio_PinWrite>:

    Gpio_PinWrite(io, state);

}

void Gpio_PinWrite(gpio_t *io, gpio_state_t state) {
      ca:	dc 01       	movw	r26, r24
      cc:	96 2f       	mov	r25, r22

    uint8_t pval = *iomap[io->_port][1];
      ce:	2c 91       	ld	r18, X
      d0:	30 e0       	ldi	r19, 0x00	; 0
      d2:	f9 01       	movw	r30, r18
      d4:	ee 0f       	add	r30, r30
      d6:	ff 1f       	adc	r31, r31
      d8:	e2 0f       	add	r30, r18
      da:	f3 1f       	adc	r31, r19
      dc:	ee 0f       	add	r30, r30
      de:	ff 1f       	adc	r31, r31
      e0:	ef 58       	subi	r30, 0x8F	; 143
      e2:	fd 4f       	sbci	r31, 0xFD	; 253
      e4:	02 80       	ldd	r0, Z+2	; 0x02
      e6:	f3 81       	ldd	r31, Z+3	; 0x03
      e8:	e0 2d       	mov	r30, r0
      ea:	60 81       	ld	r22, Z

    pval &= ~(1 << io->_pin);
      ec:	11 96       	adiw	r26, 0x01	; 1
      ee:	8c 91       	ld	r24, X
      f0:	21 e0       	ldi	r18, 0x01	; 1
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	08 2e       	mov	r0, r24
      f6:	02 c0       	rjmp	.+4      	; 0xfc <Gpio_PinWrite+0x32>
      f8:	22 0f       	add	r18, r18
      fa:	33 1f       	adc	r19, r19
      fc:	0a 94       	dec	r0
      fe:	e2 f7       	brpl	.-8      	; 0xf8 <Gpio_PinWrite+0x2e>
     100:	20 95       	com	r18
     102:	26 23       	and	r18, r22
    pval |= (state << io->_pin);
     104:	69 2f       	mov	r22, r25
     106:	70 e0       	ldi	r23, 0x00	; 0
     108:	02 c0       	rjmp	.+4      	; 0x10e <Gpio_PinWrite+0x44>
     10a:	66 0f       	add	r22, r22
     10c:	77 1f       	adc	r23, r23
     10e:	8a 95       	dec	r24
     110:	e2 f7       	brpl	.-8      	; 0x10a <Gpio_PinWrite+0x40>
     112:	62 2b       	or	r22, r18

    *iomap[io->_port][1] = pval;
     114:	60 83       	st	Z, r22
     116:	08 95       	ret

00000118 <Gpio_PinConfig>:
    {&DDRE, &PORTC, &PINE},
};

void Gpio_PinConfig(gpio_t *io, gpio_dir_t dir, gpio_state_t state) {

    *iomap[io->_port][0] |= (dir << io->_pin);
     118:	dc 01       	movw	r26, r24
     11a:	2c 91       	ld	r18, X
     11c:	30 e0       	ldi	r19, 0x00	; 0
     11e:	f9 01       	movw	r30, r18
     120:	ee 0f       	add	r30, r30
     122:	ff 1f       	adc	r31, r31
     124:	e2 0f       	add	r30, r18
     126:	f3 1f       	adc	r31, r19
     128:	ee 0f       	add	r30, r30
     12a:	ff 1f       	adc	r31, r31
     12c:	ef 58       	subi	r30, 0x8F	; 143
     12e:	fd 4f       	sbci	r31, 0xFD	; 253
     130:	01 90       	ld	r0, Z+
     132:	f0 81       	ld	r31, Z
     134:	e0 2d       	mov	r30, r0
     136:	50 81       	ld	r21, Z
     138:	26 2f       	mov	r18, r22
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	11 96       	adiw	r26, 0x01	; 1
     13e:	0c 90       	ld	r0, X
     140:	02 c0       	rjmp	.+4      	; 0x146 <Gpio_PinConfig+0x2e>
     142:	22 0f       	add	r18, r18
     144:	33 1f       	adc	r19, r19
     146:	0a 94       	dec	r0
     148:	e2 f7       	brpl	.-8      	; 0x142 <Gpio_PinConfig+0x2a>
     14a:	25 2b       	or	r18, r21
     14c:	20 83       	st	Z, r18

    Gpio_PinWrite(io, state);
     14e:	64 2f       	mov	r22, r20
     150:	bc cf       	rjmp	.-136    	; 0xca <Gpio_PinWrite>
     152:	08 95       	ret

00000154 <Gpio_PinRead>:
    pval |= (state << io->_pin);

    *iomap[io->_port][1] = pval;
}

uint8_t Gpio_PinRead(gpio_t *io) {
     154:	dc 01       	movw	r26, r24
    return (*iomap[io->_port][2] & (1 << io->_pin));
     156:	2c 91       	ld	r18, X
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	f9 01       	movw	r30, r18
     15c:	ee 0f       	add	r30, r30
     15e:	ff 1f       	adc	r31, r31
     160:	e2 0f       	add	r30, r18
     162:	f3 1f       	adc	r31, r19
     164:	ee 0f       	add	r30, r30
     166:	ff 1f       	adc	r31, r31
     168:	ef 58       	subi	r30, 0x8F	; 143
     16a:	fd 4f       	sbci	r31, 0xFD	; 253
     16c:	04 80       	ldd	r0, Z+4	; 0x04
     16e:	f5 81       	ldd	r31, Z+5	; 0x05
     170:	e0 2d       	mov	r30, r0
     172:	40 81       	ld	r20, Z
     174:	21 e0       	ldi	r18, 0x01	; 1
     176:	30 e0       	ldi	r19, 0x00	; 0
     178:	c9 01       	movw	r24, r18
     17a:	11 96       	adiw	r26, 0x01	; 1
     17c:	0c 90       	ld	r0, X
     17e:	02 c0       	rjmp	.+4      	; 0x184 <Gpio_PinRead+0x30>
     180:	88 0f       	add	r24, r24
     182:	99 1f       	adc	r25, r25
     184:	0a 94       	dec	r0
     186:	e2 f7       	brpl	.-8      	; 0x180 <Gpio_PinRead+0x2c>
}
     188:	84 23       	and	r24, r20
     18a:	08 95       	ret

0000018c <Gpio_PinToggle>:

void Gpio_PinToggle(gpio_t *io) {
     18c:	cf 93       	push	r28
     18e:	df 93       	push	r29
     190:	ec 01       	movw	r28, r24
    Gpio_PinWrite(io, !Gpio_PinRead(io));
     192:	e0 df       	rcall	.-64     	; 0x154 <Gpio_PinRead>
     194:	61 e0       	ldi	r22, 0x01	; 1
     196:	81 11       	cpse	r24, r1
     198:	60 e0       	ldi	r22, 0x00	; 0
     19a:	ce 01       	movw	r24, r28
     19c:	96 df       	rcall	.-212    	; 0xca <Gpio_PinWrite>
     19e:	df 91       	pop	r29
     1a0:	cf 91       	pop	r28
     1a2:	08 95       	ret

000001a4 <Lcd_Update>:
        return Lcd_WriteCmdd(lcd, 0x0C);
}

void Lcd_SetCursor(lcd_t *lcd, uint8_t pos) {

    lcd->cur_pos = pos;
     1a4:	0f 93       	push	r16
     1a6:	1f 93       	push	r17
     1a8:	cf 93       	push	r28
     1aa:	df 93       	push	r29
     1ac:	ec 01       	movw	r28, r24
     1ae:	8c 01       	movw	r16, r24
     1b0:	02 57       	subi	r16, 0x72	; 114
     1b2:	1f 4f       	sbci	r17, 0xFF	; 255
     1b4:	f8 01       	movw	r30, r16
     1b6:	60 81       	ld	r22, Z
     1b8:	61 70       	andi	r22, 0x01	; 1
     1ba:	06 96       	adiw	r24, 0x06	; 6
     1bc:	86 df       	rcall	.-244    	; 0xca <Gpio_PinWrite>
     1be:	f8 01       	movw	r30, r16
     1c0:	60 81       	ld	r22, Z
     1c2:	66 95       	lsr	r22
     1c4:	61 70       	andi	r22, 0x01	; 1
     1c6:	ce 01       	movw	r24, r28
     1c8:	08 96       	adiw	r24, 0x08	; 8
     1ca:	7f df       	rcall	.-258    	; 0xca <Gpio_PinWrite>
     1cc:	f8 01       	movw	r30, r16
     1ce:	60 81       	ld	r22, Z
     1d0:	62 fb       	bst	r22, 2
     1d2:	66 27       	eor	r22, r22
     1d4:	60 f9       	bld	r22, 0
     1d6:	ce 01       	movw	r24, r28
     1d8:	0a 96       	adiw	r24, 0x0a	; 10
     1da:	77 df       	rcall	.-274    	; 0xca <Gpio_PinWrite>
     1dc:	f8 01       	movw	r30, r16
     1de:	60 81       	ld	r22, Z
     1e0:	63 fb       	bst	r22, 3
     1e2:	66 27       	eor	r22, r22
     1e4:	60 f9       	bld	r22, 0
     1e6:	ce 01       	movw	r24, r28
     1e8:	0c 96       	adiw	r24, 0x0c	; 12
     1ea:	6f df       	rcall	.-290    	; 0xca <Gpio_PinWrite>
     1ec:	24 96       	adiw	r28, 0x04	; 4
     1ee:	61 e0       	ldi	r22, 0x01	; 1
     1f0:	ce 01       	movw	r24, r28
     1f2:	6b df       	rcall	.-298    	; 0xca <Gpio_PinWrite>
     1f4:	60 e0       	ldi	r22, 0x00	; 0
     1f6:	ce 01       	movw	r24, r28
     1f8:	68 df       	rcall	.-304    	; 0xca <Gpio_PinWrite>
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	1f 91       	pop	r17
     200:	0f 91       	pop	r16
     202:	08 95       	ret

00000204 <Lcd_Busy>:
     204:	ef 92       	push	r14
     206:	ff 92       	push	r15
     208:	0f 93       	push	r16
     20a:	1f 93       	push	r17
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	7c 01       	movw	r14, r24
     212:	8c 01       	movw	r16, r24
     214:	04 5f       	subi	r16, 0xF4	; 244
     216:	1f 4f       	sbci	r17, 0xFF	; 255
     218:	40 e0       	ldi	r20, 0x00	; 0
     21a:	60 e0       	ldi	r22, 0x00	; 0
     21c:	c8 01       	movw	r24, r16
     21e:	7c df       	rcall	.-264    	; 0x118 <Gpio_PinConfig>
     220:	61 e0       	ldi	r22, 0x01	; 1
     222:	c7 01       	movw	r24, r14
     224:	02 96       	adiw	r24, 0x02	; 2
     226:	51 df       	rcall	.-350    	; 0xca <Gpio_PinWrite>
     228:	09 c0       	rjmp	.+18     	; 0x23c <Lcd_Busy+0x38>
     22a:	61 e0       	ldi	r22, 0x01	; 1
     22c:	e7 01       	movw	r28, r14
     22e:	24 96       	adiw	r28, 0x04	; 4
     230:	ce 01       	movw	r24, r28
     232:	4b df       	rcall	.-362    	; 0xca <Gpio_PinWrite>
     234:	00 00       	nop
     236:	60 e0       	ldi	r22, 0x00	; 0
     238:	ce 01       	movw	r24, r28
     23a:	47 df       	rcall	.-370    	; 0xca <Gpio_PinWrite>
     23c:	c8 01       	movw	r24, r16
     23e:	8a df       	rcall	.-236    	; 0x154 <Gpio_PinRead>
     240:	81 11       	cpse	r24, r1
     242:	f3 cf       	rjmp	.-26     	; 0x22a <Lcd_Busy+0x26>
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	61 e0       	ldi	r22, 0x01	; 1
     248:	c8 01       	movw	r24, r16
     24a:	66 df       	rcall	.-308    	; 0x118 <Gpio_PinConfig>
     24c:	df 91       	pop	r29
     24e:	cf 91       	pop	r28
     250:	1f 91       	pop	r17
     252:	0f 91       	pop	r16
     254:	ff 90       	pop	r15
     256:	ef 90       	pop	r14
     258:	08 95       	ret

0000025a <Lcd_WriteChar>:
     25a:	ef 92       	push	r14
     25c:	ff 92       	push	r15
     25e:	1f 93       	push	r17
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	ec 01       	movw	r28, r24
     266:	16 2f       	mov	r17, r22
     268:	61 e0       	ldi	r22, 0x01	; 1
     26a:	2f df       	rcall	.-418    	; 0xca <Gpio_PinWrite>
     26c:	60 e0       	ldi	r22, 0x00	; 0
     26e:	ce 01       	movw	r24, r28
     270:	02 96       	adiw	r24, 0x02	; 2
     272:	2b df       	rcall	.-426    	; 0xca <Gpio_PinWrite>
     274:	7e 01       	movw	r14, r28
     276:	8e e8       	ldi	r24, 0x8E	; 142
     278:	e8 0e       	add	r14, r24
     27a:	f1 1c       	adc	r15, r1
     27c:	81 2f       	mov	r24, r17
     27e:	82 95       	swap	r24
     280:	8f 70       	andi	r24, 0x0F	; 15
     282:	f7 01       	movw	r30, r14
     284:	80 83       	st	Z, r24
     286:	ce 01       	movw	r24, r28
     288:	8d df       	rcall	.-230    	; 0x1a4 <Lcd_Update>
     28a:	1f 70       	andi	r17, 0x0F	; 15
     28c:	f7 01       	movw	r30, r14
     28e:	10 83       	st	Z, r17
     290:	ce 01       	movw	r24, r28
     292:	88 df       	rcall	.-240    	; 0x1a4 <Lcd_Update>
     294:	00 00       	nop
     296:	ce 01       	movw	r24, r28
     298:	b5 df       	rcall	.-150    	; 0x204 <Lcd_Busy>
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	1f 91       	pop	r17
     2a0:	ff 90       	pop	r15
     2a2:	ef 90       	pop	r14
     2a4:	08 95       	ret

000002a6 <Lcd_WriteCmdd>:
     2a6:	ef 92       	push	r14
     2a8:	ff 92       	push	r15
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	ec 01       	movw	r28, r24
     2b2:	16 2f       	mov	r17, r22
     2b4:	60 e0       	ldi	r22, 0x00	; 0
     2b6:	09 df       	rcall	.-494    	; 0xca <Gpio_PinWrite>
     2b8:	60 e0       	ldi	r22, 0x00	; 0
     2ba:	ce 01       	movw	r24, r28
     2bc:	02 96       	adiw	r24, 0x02	; 2
     2be:	05 df       	rcall	.-502    	; 0xca <Gpio_PinWrite>
     2c0:	7e 01       	movw	r14, r28
     2c2:	8e e8       	ldi	r24, 0x8E	; 142
     2c4:	e8 0e       	add	r14, r24
     2c6:	f1 1c       	adc	r15, r1
     2c8:	81 2f       	mov	r24, r17
     2ca:	82 95       	swap	r24
     2cc:	8f 70       	andi	r24, 0x0F	; 15
     2ce:	f7 01       	movw	r30, r14
     2d0:	80 83       	st	Z, r24
     2d2:	ce 01       	movw	r24, r28
     2d4:	67 df       	rcall	.-306    	; 0x1a4 <Lcd_Update>
     2d6:	1f 70       	andi	r17, 0x0F	; 15
     2d8:	f7 01       	movw	r30, r14
     2da:	10 83       	st	Z, r17
     2dc:	ce 01       	movw	r24, r28
     2de:	62 df       	rcall	.-316    	; 0x1a4 <Lcd_Update>
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	1f 91       	pop	r17
     2e6:	ff 90       	pop	r15
     2e8:	ef 90       	pop	r14
     2ea:	08 95       	ret

000002ec <Lcd_Clear>:
}

void Lcd_Clear(lcd_t *lcd) {

    memset(lcd->lines.buffer, 0, sizeof (lcd->lines.buffer));
     2ec:	0e 96       	adiw	r24, 0x0e	; 14
     2ee:	20 e4       	ldi	r18, 0x40	; 64
     2f0:	fc 01       	movw	r30, r24
     2f2:	11 92       	st	Z+, r1
     2f4:	2a 95       	dec	r18
     2f6:	e9 f7       	brne	.-6      	; 0x2f2 <Lcd_Clear+0x6>
     2f8:	08 95       	ret

000002fa <Lcd_Printf>:
}

void Lcd_Printf(lcd_t *lcd, uint8_t x, uint8_t y, const char *fmt, ...) {
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
     2fe:	cd b7       	in	r28, 0x3d	; 61
     300:	de b7       	in	r29, 0x3e	; 62

    va_list ap;

    va_start(ap, fmt);

    vsprintf((char *) &lcd->lines.data.line[y][x], fmt, ap);
     302:	88 85       	ldd	r24, Y+8	; 0x08
     304:	20 e1       	ldi	r18, 0x10	; 16
     306:	82 9f       	mul	r24, r18
     308:	c0 01       	movw	r24, r0
     30a:	11 24       	eor	r1, r1
     30c:	2f 81       	ldd	r18, Y+7	; 0x07
     30e:	82 0f       	add	r24, r18
     310:	91 1d       	adc	r25, r1
     312:	0e 96       	adiw	r24, 0x0e	; 14
     314:	ae 01       	movw	r20, r28
     316:	45 5f       	subi	r20, 0xF5	; 245
     318:	5f 4f       	sbci	r21, 0xFF	; 255
     31a:	69 85       	ldd	r22, Y+9	; 0x09
     31c:	7a 85       	ldd	r23, Y+10	; 0x0a
     31e:	2d 81       	ldd	r18, Y+5	; 0x05
     320:	3e 81       	ldd	r19, Y+6	; 0x06
     322:	82 0f       	add	r24, r18
     324:	93 1f       	adc	r25, r19
     326:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <vsprintf>

    va_end(ap);
}
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	08 95       	ret

00000330 <Lcd_Initialize>:

void Lcd_Initialize(lcd_t *lcd) {
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	8c 01       	movw	r16, r24

    Gpio_PinConfig(&lcd->rs, GPIO_OUT, GPIO_LOW);
     33a:	40 e0       	ldi	r20, 0x00	; 0
     33c:	61 e0       	ldi	r22, 0x01	; 1
     33e:	ec de       	rcall	.-552    	; 0x118 <Gpio_PinConfig>
    Gpio_PinConfig(&lcd->rw, GPIO_OUT, GPIO_LOW);
     340:	40 e0       	ldi	r20, 0x00	; 0
     342:	61 e0       	ldi	r22, 0x01	; 1
     344:	c8 01       	movw	r24, r16
     346:	02 96       	adiw	r24, 0x02	; 2
     348:	e7 de       	rcall	.-562    	; 0x118 <Gpio_PinConfig>
    Gpio_PinConfig(&lcd->en, GPIO_OUT, GPIO_LOW);
     34a:	40 e0       	ldi	r20, 0x00	; 0
     34c:	61 e0       	ldi	r22, 0x01	; 1
     34e:	c8 01       	movw	r24, r16
     350:	04 96       	adiw	r24, 0x04	; 4
     352:	e2 de       	rcall	.-572    	; 0x118 <Gpio_PinConfig>

    Gpio_PinConfig(&lcd->db4, GPIO_OUT, GPIO_LOW);
     354:	40 e0       	ldi	r20, 0x00	; 0
     356:	61 e0       	ldi	r22, 0x01	; 1
     358:	c8 01       	movw	r24, r16
     35a:	06 96       	adiw	r24, 0x06	; 6
     35c:	dd de       	rcall	.-582    	; 0x118 <Gpio_PinConfig>
    Gpio_PinConfig(&lcd->db5, GPIO_OUT, GPIO_LOW);
     35e:	40 e0       	ldi	r20, 0x00	; 0
     360:	61 e0       	ldi	r22, 0x01	; 1
     362:	c8 01       	movw	r24, r16
     364:	08 96       	adiw	r24, 0x08	; 8
     366:	d8 de       	rcall	.-592    	; 0x118 <Gpio_PinConfig>
    Gpio_PinConfig(&lcd->db6, GPIO_OUT, GPIO_LOW);
     368:	40 e0       	ldi	r20, 0x00	; 0
     36a:	61 e0       	ldi	r22, 0x01	; 1
     36c:	c8 01       	movw	r24, r16
     36e:	0a 96       	adiw	r24, 0x0a	; 10
     370:	d3 de       	rcall	.-602    	; 0x118 <Gpio_PinConfig>
    Gpio_PinConfig(&lcd->db7, GPIO_OUT, GPIO_LOW);
     372:	40 e0       	ldi	r20, 0x00	; 0
     374:	61 e0       	ldi	r22, 0x01	; 1
     376:	c8 01       	movw	r24, r16
     378:	0c 96       	adiw	r24, 0x0c	; 12
     37a:	ce de       	rcall	.-612    	; 0x118 <Gpio_PinConfig>
     37c:	c0 e0       	ldi	r28, 0x00	; 0

        int i = 0;

    for (i = 0; i < 5; i++) {
     37e:	d0 e0       	ldi	r29, 0x00	; 0
     380:	07 c0       	rjmp	.+14     	; 0x390 <Lcd_Initialize+0x60>

    Lcd_WriteCmdd(lcd, bit4ModeCmd[i]);
     382:	fe 01       	movw	r30, r28
     384:	ea 5f       	subi	r30, 0xFA	; 250
     386:	fe 4f       	sbci	r31, 0xFE	; 254
     388:	60 81       	ld	r22, Z
     38a:	c8 01       	movw	r24, r16
     38c:	8c df       	rcall	.-232    	; 0x2a6 <Lcd_WriteCmdd>
     38e:	21 96       	adiw	r28, 0x01	; 1
    Gpio_PinConfig(&lcd->db6, GPIO_OUT, GPIO_LOW);
    Gpio_PinConfig(&lcd->db7, GPIO_OUT, GPIO_LOW);

        int i = 0;

    for (i = 0; i < 5; i++) {
     390:	c5 30       	cpi	r28, 0x05	; 5
     392:	d1 05       	cpc	r29, r1
     394:	b4 f3       	brlt	.-20     	; 0x382 <Lcd_Initialize+0x52>
     396:	f8 01       	movw	r30, r16

    Lcd_WriteCmdd(lcd, bit4ModeCmd[i]);

    }

    memset(lcd->lines.buffer, 0, sizeof ( lcd->lines.buffer));
     398:	3e 96       	adiw	r30, 0x0e	; 14
     39a:	80 e4       	ldi	r24, 0x40	; 64
     39c:	df 01       	movw	r26, r30
     39e:	1d 92       	st	X+, r1
     3a0:	8a 95       	dec	r24
     3a2:	e9 f7       	brne	.-6      	; 0x39e <Lcd_Initialize+0x6e>
     3a4:	d8 01       	movw	r26, r16

    lcd->prev_lines = lcd->lines;
     3a6:	a2 5b       	subi	r26, 0xB2	; 178
     3a8:	bf 4f       	sbci	r27, 0xFF	; 255
     3aa:	80 e4       	ldi	r24, 0x40	; 64
     3ac:	01 90       	ld	r0, Z+
     3ae:	0d 92       	st	X+, r0
     3b0:	8a 95       	dec	r24
     3b2:	e1 f7       	brne	.-8      	; 0x3ac <Lcd_Initialize+0x7c>
     3b4:	8f e4       	ldi	r24, 0x4F	; 79
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3b6:	93 ec       	ldi	r25, 0xC3	; 195
     3b8:	01 97       	sbiw	r24, 0x01	; 1
     3ba:	f1 f7       	brne	.-4      	; 0x3b8 <Lcd_Initialize+0x88>
     3bc:	00 c0       	rjmp	.+0      	; 0x3be <Lcd_Initialize+0x8e>
     3be:	00 00       	nop
     3c0:	df 91       	pop	r29

    _delay_ms(200);
}
     3c2:	cf 91       	pop	r28
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	08 95       	ret

000003ca <Lcd_Task>:
     3ca:	ef 92       	push	r14

void Lcd_Task(lcd_t *lcd) {
     3cc:	ff 92       	push	r15
     3ce:	0f 93       	push	r16
     3d0:	1f 93       	push	r17
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	8c 01       	movw	r16, r24

    if (memcmp(lcd->prev_lines.buffer, lcd->lines.buffer, sizeof (lcd->prev_lines.buffer)) || lcd->cur_pos != lcd->prev_cur_pos) {
     3d8:	bc 01       	movw	r22, r24
     3da:	62 5f       	subi	r22, 0xF2	; 242
     3dc:	7f 4f       	sbci	r23, 0xFF	; 255
     3de:	40 e4       	ldi	r20, 0x40	; 64
     3e0:	50 e0       	ldi	r21, 0x00	; 0
     3e2:	82 5b       	subi	r24, 0xB2	; 178
     3e4:	9f 4f       	sbci	r25, 0xFF	; 255
     3e6:	0e 94 83 0a 	call	0x1506	; 0x1506 <memcmp>
     3ea:	89 2b       	or	r24, r25
     3ec:	a1 f5       	brne	.+104    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     3ee:	f8 01       	movw	r30, r16
     3f0:	e1 57       	subi	r30, 0x71	; 113
     3f2:	ff 4f       	sbci	r31, 0xFF	; 255
     3f4:	80 81       	ld	r24, Z
     3f6:	98 2f       	mov	r25, r24
     3f8:	9f 70       	andi	r25, 0x0F	; 15
     3fa:	82 95       	swap	r24
     3fc:	8f 70       	andi	r24, 0x0F	; 15
     3fe:	98 13       	cpse	r25, r24
     400:	2c c0       	rjmp	.+88     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     402:	42 c0       	rjmp	.+132    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>

        uint8_t rows = 0, cols = 0;

        for (rows = 0; rows < LCD_MAX_ROWS; rows++) {

            Lcd_WriteCmdd(lcd, row_offset[rows]);
     404:	ed 2e       	mov	r14, r29
     406:	f1 2c       	mov	r15, r1
     408:	f7 01       	movw	r30, r14
     40a:	e5 5f       	subi	r30, 0xF5	; 245
     40c:	fe 4f       	sbci	r31, 0xFE	; 254
     40e:	60 81       	ld	r22, Z
     410:	c8 01       	movw	r24, r16
     412:	49 df       	rcall	.-366    	; 0x2a6 <Lcd_WriteCmdd>

            for (cols = 0; cols < LCD_MAX_COLS; cols++) {
     414:	c0 e0       	ldi	r28, 0x00	; 0
     416:	0f c0       	rjmp	.+30     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>

                Lcd_WriteChar(lcd, lcd->lines.data.line[rows][cols]);
     418:	f7 01       	movw	r30, r14
     41a:	e2 95       	swap	r30
     41c:	f2 95       	swap	r31
     41e:	f0 7f       	andi	r31, 0xF0	; 240
     420:	fe 27       	eor	r31, r30
     422:	e0 7f       	andi	r30, 0xF0	; 240
     424:	fe 27       	eor	r31, r30
     426:	e0 0f       	add	r30, r16
     428:	f1 1f       	adc	r31, r17
     42a:	ec 0f       	add	r30, r28
     42c:	f1 1d       	adc	r31, r1
     42e:	66 85       	ldd	r22, Z+14	; 0x0e
     430:	c8 01       	movw	r24, r16
     432:	13 df       	rcall	.-474    	; 0x25a <Lcd_WriteChar>

        for (rows = 0; rows < LCD_MAX_ROWS; rows++) {

            Lcd_WriteCmdd(lcd, row_offset[rows]);

            for (cols = 0; cols < LCD_MAX_COLS; cols++) {
     434:	cf 5f       	subi	r28, 0xFF	; 255
     436:	c0 31       	cpi	r28, 0x10	; 16
     438:	78 f3       	brcs	.-34     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>

                Lcd_WriteChar(lcd, lcd->lines.data.line[rows][cols]);
            }

            Lcd_WriteCmdd(lcd, row_offset[rows] + lcd->cur_pos);
     43a:	f7 01       	movw	r30, r14
     43c:	e5 5f       	subi	r30, 0xF5	; 245
     43e:	fe 4f       	sbci	r31, 0xFE	; 254
     440:	80 81       	ld	r24, Z
     442:	f8 01       	movw	r30, r16
     444:	e1 57       	subi	r30, 0x71	; 113
     446:	ff 4f       	sbci	r31, 0xFF	; 255
     448:	60 81       	ld	r22, Z
     44a:	6f 70       	andi	r22, 0x0F	; 15
     44c:	68 0f       	add	r22, r24
     44e:	c8 01       	movw	r24, r16
     450:	2a df       	rcall	.-428    	; 0x2a6 <Lcd_WriteCmdd>

    if (memcmp(lcd->prev_lines.buffer, lcd->lines.buffer, sizeof (lcd->prev_lines.buffer)) || lcd->cur_pos != lcd->prev_cur_pos) {

        uint8_t rows = 0, cols = 0;

        for (rows = 0; rows < LCD_MAX_ROWS; rows++) {
     452:	df 5f       	subi	r29, 0xFF	; 255
     454:	03 c0       	rjmp	.+6      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     456:	d0 e0       	ldi	r29, 0x00	; 0
     458:	01 c0       	rjmp	.+2      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     45a:	d0 e0       	ldi	r29, 0x00	; 0
     45c:	d4 30       	cpi	r29, 0x04	; 4
     45e:	90 f2       	brcs	.-92     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
            Lcd_WriteCmdd(lcd, row_offset[rows] + lcd->cur_pos);
        }



        lcd->prev_cur_pos = lcd->cur_pos;
     460:	f8 01       	movw	r30, r16
     462:	e1 57       	subi	r30, 0x71	; 113
     464:	ff 4f       	sbci	r31, 0xFF	; 255
     466:	80 81       	ld	r24, Z
     468:	8f 70       	andi	r24, 0x0F	; 15
     46a:	98 2f       	mov	r25, r24
     46c:	92 95       	swap	r25
     46e:	90 7f       	andi	r25, 0xF0	; 240
     470:	89 2b       	or	r24, r25
     472:	80 83       	st	Z, r24

        lcd->prev_lines = lcd->lines;
     474:	d8 01       	movw	r26, r16
     476:	a2 5b       	subi	r26, 0xB2	; 178
     478:	bf 4f       	sbci	r27, 0xFF	; 255
     47a:	80 e4       	ldi	r24, 0x40	; 64
     47c:	e1 58       	subi	r30, 0x81	; 129
     47e:	f1 09       	sbc	r31, r1
     480:	01 90       	ld	r0, Z+
     482:	0d 92       	st	X+, r0
     484:	8a 95       	dec	r24
     486:	e1 f7       	brne	.-8      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>

     }
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	ff 90       	pop	r15
     492:	ef 90       	pop	r14
     494:	08 95       	ret

00000496 <disp_version>:

unsigned char disp_version(void *ptr) {

    menu_t *muPtr = (menu_t *) ptr;

    memcpy(muPtr->out, "SOFT VERSION\nV1.02\nLCD VERSION\nV0.02\n", strlen("SOFT VERSION\nV1.02\nLCD VERSION\nV0.02\n"));
     496:	dc 01       	movw	r26, r24
     498:	16 96       	adiw	r26, 0x06	; 6
     49a:	25 e2       	ldi	r18, 0x25	; 37
     49c:	ef e8       	ldi	r30, 0x8F	; 143
     49e:	f2 e0       	ldi	r31, 0x02	; 2
     4a0:	01 90       	ld	r0, Z+
     4a2:	0d 92       	st	X+, r0
     4a4:	2a 95       	dec	r18
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <disp_version+0xa>

    if (muPtr->key == 'C')
     4a8:	fc 01       	movw	r30, r24
     4aa:	e8 57       	subi	r30, 0x78	; 120
     4ac:	ff 4f       	sbci	r31, 0xFF	; 255
     4ae:	80 81       	ld	r24, Z
     4b0:	83 34       	cpi	r24, 0x43	; 67
     4b2:	11 f4       	brne	.+4      	; 0x4b8 <disp_version+0x22>
        return 1;
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	08 95       	ret

    return 0;
     4b8:	80 e0       	ldi	r24, 0x00	; 0
}
     4ba:	08 95       	ret

000004bc <test_buttons>:
    Lcd_Printf(lcd, 0, 1, "PRESS ENTER");
}

unsigned char test_buttons(void *ptr) {

    sprintf((char *) muObj.out, "TEST BUTTON\nFUNCTION EXEC\n");
     4bc:	8b e1       	ldi	r24, 0x1B	; 27
     4be:	e5 eb       	ldi	r30, 0xB5	; 181
     4c0:	f2 e0       	ldi	r31, 0x02	; 2
     4c2:	a0 e5       	ldi	r26, 0x50	; 80
     4c4:	b4 e0       	ldi	r27, 0x04	; 4
     4c6:	01 90       	ld	r0, Z+
     4c8:	0d 92       	st	X+, r0
     4ca:	8a 95       	dec	r24
     4cc:	e1 f7       	brne	.-8      	; 0x4c6 <test_buttons+0xa>

    if (muObj.key == 'C') {
     4ce:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <muObj+0x88>
     4d2:	83 34       	cpi	r24, 0x43	; 67
     4d4:	11 f4       	brne	.+4      	; 0x4da <test_buttons+0x1e>
        return 1;
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	08 95       	ret
    }
    return 0;
     4da:	80 e0       	ldi	r24, 0x00	; 0
}
     4dc:	08 95       	ret

000004de <test_lcd>:

unsigned char test_lcd(void *ptr) {

    sprintf((char *) muObj.out, "TEST LCD\nFUNCTION EXEC\n");
     4de:	88 e1       	ldi	r24, 0x18	; 24
     4e0:	e0 ed       	ldi	r30, 0xD0	; 208
     4e2:	f2 e0       	ldi	r31, 0x02	; 2
     4e4:	a0 e5       	ldi	r26, 0x50	; 80
     4e6:	b4 e0       	ldi	r27, 0x04	; 4
     4e8:	01 90       	ld	r0, Z+
     4ea:	0d 92       	st	X+, r0
     4ec:	8a 95       	dec	r24
     4ee:	e1 f7       	brne	.-8      	; 0x4e8 <test_lcd+0xa>

    if (muObj.key == 'C') {
     4f0:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <muObj+0x88>
     4f4:	83 34       	cpi	r24, 0x43	; 67
     4f6:	11 f4       	brne	.+4      	; 0x4fc <test_lcd+0x1e>
        return 1;
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	08 95       	ret
    }
    return 0;
     4fc:	80 e0       	ldi	r24, 0x00	; 0
}
     4fe:	08 95       	ret

00000500 <test_led>:

unsigned char test_led(void *ptr) {

    sprintf((char *) muObj.out, "TEST LED\nFUNCTION EXEC\n");
     500:	88 e1       	ldi	r24, 0x18	; 24
     502:	e8 ee       	ldi	r30, 0xE8	; 232
     504:	f2 e0       	ldi	r31, 0x02	; 2
     506:	a0 e5       	ldi	r26, 0x50	; 80
     508:	b4 e0       	ldi	r27, 0x04	; 4
     50a:	01 90       	ld	r0, Z+
     50c:	0d 92       	st	X+, r0
     50e:	8a 95       	dec	r24
     510:	e1 f7       	brne	.-8      	; 0x50a <test_led+0xa>

    if (muObj.key == 'C') {
     512:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <muObj+0x88>
     516:	83 34       	cpi	r24, 0x43	; 67
     518:	11 f4       	brne	.+4      	; 0x51e <test_led+0x1e>
        return 1;
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	08 95       	ret
    }
    return 0;
     51e:	80 e0       	ldi	r24, 0x00	; 0
}
     520:	08 95       	ret

00000522 <set_pwm>:
    return 0;
}

unsigned char set_pwm(void *ptr) {

    sprintf((char *) muObj.out, "SET PWM\nFUNCTION EXEC\n");
     522:	87 e1       	ldi	r24, 0x17	; 23
     524:	e0 e0       	ldi	r30, 0x00	; 0
     526:	f3 e0       	ldi	r31, 0x03	; 3
     528:	a0 e5       	ldi	r26, 0x50	; 80
     52a:	b4 e0       	ldi	r27, 0x04	; 4
     52c:	01 90       	ld	r0, Z+
     52e:	0d 92       	st	X+, r0
     530:	8a 95       	dec	r24
     532:	e1 f7       	brne	.-8      	; 0x52c <set_pwm+0xa>

    if (muObj.key == 'C') {
     534:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <muObj+0x88>
     538:	83 34       	cpi	r24, 0x43	; 67
     53a:	11 f4       	brne	.+4      	; 0x540 <set_pwm+0x1e>
        return 1;
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	08 95       	ret
    }
    return 0;
     540:	80 e0       	ldi	r24, 0x00	; 0
}
     542:	08 95       	ret

00000544 <fact_reset>:
};
/********************************************************************************************/

unsigned char fact_reset(void *ptr) {

    sprintf((char *) muObj.out, "FACTORY RESET\nFUNCTION EXEC\n");
     544:	8d e1       	ldi	r24, 0x1D	; 29
     546:	e7 e1       	ldi	r30, 0x17	; 23
     548:	f3 e0       	ldi	r31, 0x03	; 3
     54a:	a0 e5       	ldi	r26, 0x50	; 80
     54c:	b4 e0       	ldi	r27, 0x04	; 4
     54e:	01 90       	ld	r0, Z+
     550:	0d 92       	st	X+, r0
     552:	8a 95       	dec	r24
     554:	e1 f7       	brne	.-8      	; 0x54e <fact_reset+0xa>

    if (muObj.key == 'C') {
     556:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <muObj+0x88>
     55a:	83 34       	cpi	r24, 0x43	; 67
     55c:	11 f4       	brne	.+4      	; 0x562 <fact_reset+0x1e>
        return 1;
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	08 95       	ret
    }
    return 0;
     562:	80 e0       	ldi	r24, 0x00	; 0
}
     564:	08 95       	ret

00000566 <fact_restore>:

unsigned char fact_restore(void *ptr) {

    sprintf((char *) muObj.out, "FACTORY RESTOR\nFUNCTRION EXEC");
     566:	8e e1       	ldi	r24, 0x1E	; 30
     568:	e4 e3       	ldi	r30, 0x34	; 52
     56a:	f3 e0       	ldi	r31, 0x03	; 3
     56c:	a0 e5       	ldi	r26, 0x50	; 80
     56e:	b4 e0       	ldi	r27, 0x04	; 4
     570:	01 90       	ld	r0, Z+
     572:	0d 92       	st	X+, r0
     574:	8a 95       	dec	r24
     576:	e1 f7       	brne	.-8      	; 0x570 <fact_restore+0xa>

    if (muObj.key == 'C') {
     578:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <muObj+0x88>
     57c:	83 34       	cpi	r24, 0x43	; 67
     57e:	11 f4       	brne	.+4      	; 0x584 <fact_restore+0x1e>
        return 1;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	08 95       	ret
    }
    return 0;
     584:	80 e0       	ldi	r24, 0x00	; 0
}
     586:	08 95       	ret

00000588 <set_speed>:

/************************************************************************/
uint8_t fun_case = 0;
unsigned char set_speed(void *ptr) {

    switch (fun_case) {
     588:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <fun_case>
     58c:	81 30       	cpi	r24, 0x01	; 1
     58e:	91 f0       	breq	.+36     	; 0x5b4 <set_speed+0x2c>
     590:	20 f0       	brcs	.+8      	; 0x59a <set_speed+0x12>
     592:	82 30       	cpi	r24, 0x02	; 2
     594:	09 f4       	brne	.+2      	; 0x598 <set_speed+0x10>
     596:	50 c0       	rjmp	.+160    	; 0x638 <set_speed+0xb0>
     598:	7e c0       	rjmp	.+252    	; 0x696 <set_speed+0x10e>
        case 0:
            Timer_Stop(&led1_timer);
     59a:	8e e3       	ldi	r24, 0x3E	; 62
     59c:	94 e0       	ldi	r25, 0x04	; 4
     59e:	fd d4       	rcall	.+2554   	; 0xf9a <Timer_Stop>
            Gpio_PinWrite(&led1, GPIO_LOW);
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	87 ed       	ldi	r24, 0xD7	; 215
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	91 dd       	rcall	.-1246   	; 0xca <Gpio_PinWrite>
            fun_case++;
     5a8:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <fun_case>
     5ac:	8f 5f       	subi	r24, 0xFF	; 255
     5ae:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <fun_case>
            break;
     5b2:	71 c0       	rjmp	.+226    	; 0x696 <set_speed+0x10e>
        case 1:
            if (muObj.key == 'U') {
     5b4:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <muObj+0x88>
     5b8:	95 35       	cpi	r25, 0x55	; 85
     5ba:	51 f4       	brne	.+20     	; 0x5d0 <set_speed+0x48>
                led_blink_speed++;
     5bc:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <led_blink_speed>
     5c0:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <led_blink_speed+0x1>
     5c4:	01 96       	adiw	r24, 0x01	; 1
     5c6:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <led_blink_speed+0x1>
     5ca:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <led_blink_speed>
     5ce:	13 c0       	rjmp	.+38     	; 0x5f6 <set_speed+0x6e>
            } else if (muObj.key == 'D') {
     5d0:	94 34       	cpi	r25, 0x44	; 68
     5d2:	61 f4       	brne	.+24     	; 0x5ec <set_speed+0x64>
                if (led_blink_speed)
     5d4:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <led_blink_speed>
     5d8:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <led_blink_speed+0x1>
     5dc:	00 97       	sbiw	r24, 0x00	; 0
     5de:	59 f0       	breq	.+22     	; 0x5f6 <set_speed+0x6e>
                    led_blink_speed--;
     5e0:	01 97       	sbiw	r24, 0x01	; 1
     5e2:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <led_blink_speed+0x1>
     5e6:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <led_blink_speed>
     5ea:	05 c0       	rjmp	.+10     	; 0x5f6 <set_speed+0x6e>
            } else if (muObj.key == 'E') {
     5ec:	95 34       	cpi	r25, 0x45	; 69
     5ee:	19 f4       	brne	.+6      	; 0x5f6 <set_speed+0x6e>
                fun_case++;
     5f0:	8f 5f       	subi	r24, 0xFF	; 255
     5f2:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <fun_case>
            }
            if (led_blink_speed > 1000)
     5f6:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <led_blink_speed>
     5fa:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <led_blink_speed+0x1>
     5fe:	89 3e       	cpi	r24, 0xE9	; 233
     600:	93 40       	sbci	r25, 0x03	; 3
     602:	20 f0       	brcs	.+8      	; 0x60c <set_speed+0x84>
                led_blink_speed = 0;
     604:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <led_blink_speed+0x1>
     608:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <led_blink_speed>
            sprintf((char *) muObj.out, "SET SPEED : \n%dms\n", led_blink_speed);
     60c:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <led_blink_speed+0x1>
     610:	8f 93       	push	r24
     612:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <led_blink_speed>
     616:	8f 93       	push	r24
     618:	82 e5       	ldi	r24, 0x52	; 82
     61a:	93 e0       	ldi	r25, 0x03	; 3
     61c:	9f 93       	push	r25
     61e:	8f 93       	push	r24
     620:	80 e5       	ldi	r24, 0x50	; 80
     622:	94 e0       	ldi	r25, 0x04	; 4
     624:	9f 93       	push	r25
     626:	8f 93       	push	r24
     628:	b2 d7       	rcall	.+3940   	; 0x158e <sprintf>
            break;
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	0f 90       	pop	r0
     632:	0f 90       	pop	r0
     634:	0f 90       	pop	r0
     636:	2f c0       	rjmp	.+94     	; 0x696 <set_speed+0x10e>
        case 2:
            sprintf((char *) muObj.out, "CURR SPEED : \n%dms\n", led_blink_speed);
     638:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <led_blink_speed+0x1>
     63c:	8f 93       	push	r24
     63e:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <led_blink_speed>
     642:	8f 93       	push	r24
     644:	85 e6       	ldi	r24, 0x65	; 101
     646:	93 e0       	ldi	r25, 0x03	; 3
     648:	9f 93       	push	r25
     64a:	8f 93       	push	r24
     64c:	80 e5       	ldi	r24, 0x50	; 80
     64e:	94 e0       	ldi	r25, 0x04	; 4
     650:	9f 93       	push	r25
     652:	8f 93       	push	r24
     654:	9c d7       	rcall	.+3896   	; 0x158e <sprintf>
            Timer_Start(&led1_timer, led_blink_speed, TIMER_RESTART_AFTER_COMPLETED);
     656:	60 91 d5 01 	lds	r22, 0x01D5	; 0x8001d5 <led_blink_speed>
     65a:	70 91 d6 01 	lds	r23, 0x01D6	; 0x8001d6 <led_blink_speed+0x1>
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	b6 d5       	rcall	.+2924   	; 0x11d0 <__floatunsisf>
     664:	ab 01       	movw	r20, r22
     666:	bc 01       	movw	r22, r24
     668:	21 e0       	ldi	r18, 0x01	; 1
     66a:	8e e3       	ldi	r24, 0x3E	; 62
     66c:	94 e0       	ldi	r25, 0x04	; 4
     66e:	39 d4       	rcall	.+2162   	; 0xee2 <Timer_Start>
     670:	8f e3       	ldi	r24, 0x3F	; 63
     672:	9d e0       	ldi	r25, 0x0D	; 13
     674:	23 e0       	ldi	r18, 0x03	; 3
     676:	81 50       	subi	r24, 0x01	; 1
     678:	90 40       	sbci	r25, 0x00	; 0
     67a:	20 40       	sbci	r18, 0x00	; 0
     67c:	e1 f7       	brne	.-8      	; 0x676 <set_speed+0xee>
     67e:	00 c0       	rjmp	.+0      	; 0x680 <set_speed+0xf8>
     680:	00 00       	nop
            _delay_ms(1000);
            fun_case = 0;
     682:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <fun_case>
            return 1;
     686:	0f 90       	pop	r0
     688:	0f 90       	pop	r0
     68a:	0f 90       	pop	r0
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	08 95       	ret
    }


    if (muObj.key == 'C') {
     696:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <muObj+0x88>
     69a:	83 34       	cpi	r24, 0x43	; 67
     69c:	21 f4       	brne	.+8      	; 0x6a6 <set_speed+0x11e>
        fun_case = 0;
     69e:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <fun_case>
        return 1;
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	08 95       	ret
    }
    return 0;
     6a6:	80 e0       	ldi	r24, 0x00	; 0
}
     6a8:	08 95       	ret

000006aa <getKey>:


timer_t getKeyTimer = {0};
timer_t led1_timer = {0};

unsigned char getKey() {
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29

    static uint8_t state = 0;

    uint8_t key = 0;

    if (((Gpio_PinRead(&buttonEnter) ? 'E' : 0))) {
     6ae:	89 ed       	ldi	r24, 0xD9	; 217
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	50 dd       	rcall	.-1376   	; 0x154 <Gpio_PinRead>
     6b4:	81 11       	cpse	r24, r1
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <getKey+0x12>

unsigned char getKey() {

    static uint8_t state = 0;

    uint8_t key = 0;
     6b8:	d0 e0       	ldi	r29, 0x00	; 0
     6ba:	01 c0       	rjmp	.+2      	; 0x6be <getKey+0x14>

    if (((Gpio_PinRead(&buttonEnter) ? 'E' : 0))) {
        key = 'E';
     6bc:	d5 e4       	ldi	r29, 0x45	; 69
    }

    if (((Gpio_PinRead(&buttonUp) ? 'U' : 0))) {
     6be:	8b ed       	ldi	r24, 0xDB	; 219
     6c0:	91 e0       	ldi	r25, 0x01	; 1
     6c2:	48 dd       	rcall	.-1392   	; 0x154 <Gpio_PinRead>
     6c4:	81 11       	cpse	r24, r1
        key = 'U';
     6c6:	d5 e5       	ldi	r29, 0x55	; 85
    }

    if (((Gpio_PinRead(&buttonDown) ? 'D' : 0))) {
     6c8:	8d ed       	ldi	r24, 0xDD	; 221
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	43 dd       	rcall	.-1402   	; 0x154 <Gpio_PinRead>
     6ce:	81 11       	cpse	r24, r1
        key = 'D';
    }

    if (((Gpio_PinRead(&buttonBack) ? 'C' : 0))) {
     6d0:	d4 e4       	ldi	r29, 0x44	; 68
     6d2:	8f ed       	ldi	r24, 0xDF	; 223
     6d4:	91 e0       	ldi	r25, 0x01	; 1
     6d6:	3e dd       	rcall	.-1412   	; 0x154 <Gpio_PinRead>
     6d8:	81 11       	cpse	r24, r1
        key = 'C';
     6da:	d3 e4       	ldi	r29, 0x43	; 67
    }
    switch (state) {
     6dc:	c0 91 3c 04 	lds	r28, 0x043C	; 0x80043c <__data_end>
     6e0:	c1 30       	cpi	r28, 0x01	; 1
     6e2:	99 f0       	breq	.+38     	; 0x70a <getKey+0x60>
     6e4:	18 f0       	brcs	.+6      	; 0x6ec <getKey+0x42>
     6e6:	c2 30       	cpi	r28, 0x02	; 2
     6e8:	19 f1       	breq	.+70     	; 0x730 <getKey+0x86>
     6ea:	26 c0       	rjmp	.+76     	; 0x738 <getKey+0x8e>
        case 0:
            if (key) {
     6ec:	dd 23       	and	r29, r29
     6ee:	29 f1       	breq	.+74     	; 0x73a <getKey+0x90>
                state++;
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	8c 0f       	add	r24, r28
     6f4:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <__data_end>
                Timer_Start(&getKeyTimer, 100, TIMER_STOP_AFTER_COMPLETED);
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	40 e0       	ldi	r20, 0x00	; 0
     6fc:	50 e0       	ldi	r21, 0x00	; 0
     6fe:	68 ec       	ldi	r22, 0xC8	; 200
     700:	72 e4       	ldi	r23, 0x42	; 66
     702:	83 e4       	ldi	r24, 0x43	; 67
     704:	94 e0       	ldi	r25, 0x04	; 4
     706:	ed d3       	rcall	.+2010   	; 0xee2 <Timer_Start>

            }
            break;
        case 1:
            if (Timer_IsCompleted(&getKeyTimer)) {
     708:	18 c0       	rjmp	.+48     	; 0x73a <getKey+0x90>
     70a:	83 e4       	ldi	r24, 0x43	; 67
     70c:	94 e0       	ldi	r25, 0x04	; 4
     70e:	4b d4       	rcall	.+2198   	; 0xfa6 <Timer_IsCompleted>
     710:	c8 2f       	mov	r28, r24
     712:	88 23       	and	r24, r24
     714:	91 f0       	breq	.+36     	; 0x73a <getKey+0x90>
                if (key)
     716:	dd 23       	and	r29, r29
     718:	39 f0       	breq	.+14     	; 0x728 <getKey+0x7e>
                    state++;
     71a:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <__data_end>
     71e:	8f 5f       	subi	r24, 0xFF	; 255
     720:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <__data_end>
        case 2:

            state = 0;
            return key;
    }
    return 0;
     724:	c0 e0       	ldi	r28, 0x00	; 0
     726:	09 c0       	rjmp	.+18     	; 0x73a <getKey+0x90>
        case 1:
            if (Timer_IsCompleted(&getKeyTimer)) {
                if (key)
                    state++;
                else
                    state = 0;
     728:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <__data_end>
        case 2:

            state = 0;
            return key;
    }
    return 0;
     72c:	c0 e0       	ldi	r28, 0x00	; 0
     72e:	05 c0       	rjmp	.+10     	; 0x73a <getKey+0x90>
                    state = 0;
            }
            break;
        case 2:

            state = 0;
     730:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <__data_end>
            return key;
     734:	cd 2f       	mov	r28, r29
     736:	01 c0       	rjmp	.+2      	; 0x73a <getKey+0x90>
    }
    return 0;
     738:	c0 e0       	ldi	r28, 0x00	; 0
}
     73a:	8c 2f       	mov	r24, r28
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	08 95       	ret

00000742 <Lcd_MenuScreen>:

void Lcd_MenuScreen(lcd_t *lcd, const char *buffer) {
     742:	af 92       	push	r10
     744:	bf 92       	push	r11
     746:	cf 92       	push	r12
     748:	df 92       	push	r13
     74a:	ff 92       	push	r15
     74c:	0f 93       	push	r16
     74e:	1f 93       	push	r17
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	cd b7       	in	r28, 0x3d	; 61
     756:	de b7       	in	r29, 0x3e	; 62
     758:	c2 50       	subi	r28, 0x02	; 2
     75a:	d1 40       	sbci	r29, 0x01	; 1
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	f8 94       	cli
     760:	de bf       	out	0x3e, r29	; 62
     762:	0f be       	out	0x3f, r0	; 63
     764:	cd bf       	out	0x3d, r28	; 61
     766:	f8 2e       	mov	r15, r24
     768:	09 2f       	mov	r16, r25
     76a:	5b 01       	movw	r10, r22

    char *token, *rest;
    uint8_t line_count = 0;
    char localBuffer[256] = {0};
     76c:	6e 01       	movw	r12, r28
     76e:	23 e0       	ldi	r18, 0x03	; 3
     770:	c2 0e       	add	r12, r18
     772:	d1 1c       	adc	r13, r1
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	91 e0       	ldi	r25, 0x01	; 1
     778:	f6 01       	movw	r30, r12
     77a:	9c 01       	movw	r18, r24
     77c:	11 92       	st	Z+, r1
     77e:	21 50       	subi	r18, 0x01	; 1
     780:	30 40       	sbci	r19, 0x00	; 0
     782:	e1 f7       	brne	.-8      	; 0x77c <Lcd_MenuScreen+0x3a>

    Lcd_Clear(lcd);
     784:	8f 2d       	mov	r24, r15
     786:	90 2f       	mov	r25, r16
     788:	b1 dd       	rcall	.-1182   	; 0x2ec <Lcd_Clear>
    memcpy(localBuffer, buffer, strlen(buffer));
     78a:	f5 01       	movw	r30, r10
     78c:	01 90       	ld	r0, Z+
     78e:	00 20       	and	r0, r0
     790:	e9 f7       	brne	.-6      	; 0x78c <Lcd_MenuScreen+0x4a>
     792:	31 97       	sbiw	r30, 0x01	; 1
     794:	af 01       	movw	r20, r30
     796:	4a 19       	sub	r20, r10
     798:	5b 09       	sbc	r21, r11
     79a:	b5 01       	movw	r22, r10
     79c:	c6 01       	movw	r24, r12
     79e:	c0 d6       	rcall	.+3456   	; 0x1520 <memcpy>
    token = strtok_r(localBuffer, "\n", &rest);
     7a0:	ae 01       	movw	r20, r28
     7a2:	4f 5f       	subi	r20, 0xFF	; 255
     7a4:	5f 4f       	sbci	r21, 0xFF	; 255
     7a6:	63 eb       	ldi	r22, 0xB3	; 179
     7a8:	72 e0       	ldi	r23, 0x02	; 2
     7aa:	c6 01       	movw	r24, r12
     7ac:	c9 d6       	rcall	.+3474   	; 0x1540 <strtok_r>
}

void Lcd_MenuScreen(lcd_t *lcd, const char *buffer) {

    char *token, *rest;
    uint8_t line_count = 0;
     7ae:	20 e0       	ldi	r18, 0x00	; 0
    Lcd_Clear(lcd);
    memcpy(localBuffer, buffer, strlen(buffer));
    token = strtok_r(localBuffer, "\n", &rest);

    do {
        Lcd_Printf(lcd, 0, line_count++, token);
     7b0:	11 e0       	ldi	r17, 0x01	; 1
     7b2:	12 0f       	add	r17, r18
     7b4:	9f 93       	push	r25
     7b6:	8f 93       	push	r24
     7b8:	2f 93       	push	r18
     7ba:	1f 92       	push	r1
     7bc:	0f 93       	push	r16
     7be:	ff 92       	push	r15
     7c0:	9c dd       	rcall	.-1224   	; 0x2fa <Lcd_Printf>
        token = strtok_r(0, "\n", &rest);
     7c2:	ae 01       	movw	r20, r28
     7c4:	4f 5f       	subi	r20, 0xFF	; 255
     7c6:	5f 4f       	sbci	r21, 0xFF	; 255
     7c8:	63 eb       	ldi	r22, 0xB3	; 179
     7ca:	72 e0       	ldi	r23, 0x02	; 2
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	b7 d6       	rcall	.+3438   	; 0x1540 <strtok_r>
    Lcd_Clear(lcd);
    memcpy(localBuffer, buffer, strlen(buffer));
    token = strtok_r(localBuffer, "\n", &rest);

    do {
        Lcd_Printf(lcd, 0, line_count++, token);
     7d2:	21 2f       	mov	r18, r17
        token = strtok_r(0, "\n", &rest);
    } while (token);
     7d4:	0f 90       	pop	r0
     7d6:	0f 90       	pop	r0
     7d8:	0f 90       	pop	r0
     7da:	0f 90       	pop	r0
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
     7e0:	00 97       	sbiw	r24, 0x00	; 0
     7e2:	31 f7       	brne	.-52     	; 0x7b0 <Lcd_MenuScreen+0x6e>

}
     7e4:	ce 5f       	subi	r28, 0xFE	; 254
     7e6:	de 4f       	sbci	r29, 0xFE	; 254
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	f8 94       	cli
     7ec:	de bf       	out	0x3e, r29	; 62
     7ee:	0f be       	out	0x3f, r0	; 63
     7f0:	cd bf       	out	0x3d, r28	; 61
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	1f 91       	pop	r17
     7f8:	0f 91       	pop	r16
     7fa:	ff 90       	pop	r15
     7fc:	df 90       	pop	r13
     7fe:	cf 90       	pop	r12
     800:	bf 90       	pop	r11
     802:	af 90       	pop	r10
     804:	08 95       	ret

00000806 <Lcd_DefaultScreen>:

void Lcd_DefaultScreen(lcd_t *lcd) {
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	c8 2f       	mov	r28, r24
     80c:	d9 2f       	mov	r29, r25

    Lcd_Clear(lcd);
     80e:	6e dd       	rcall	.-1316   	; 0x2ec <Lcd_Clear>
    Lcd_Printf(lcd, 0, 0, "LCD 16X2");
     810:	89 e7       	ldi	r24, 0x79	; 121
     812:	93 e0       	ldi	r25, 0x03	; 3
     814:	9f 93       	push	r25
     816:	8f 93       	push	r24
     818:	1f 92       	push	r1
     81a:	1f 92       	push	r1
     81c:	df 93       	push	r29
     81e:	cf 93       	push	r28
     820:	6c dd       	rcall	.-1320   	; 0x2fa <Lcd_Printf>
    Lcd_Printf(lcd, 0, 1, "PRESS ENTER");
     822:	82 e8       	ldi	r24, 0x82	; 130
     824:	93 e0       	ldi	r25, 0x03	; 3
     826:	9f 93       	push	r25
     828:	8f 93       	push	r24
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	8f 93       	push	r24
     82e:	1f 92       	push	r1
     830:	df 93       	push	r29
     832:	cf 93       	push	r28
     834:	62 dd       	rcall	.-1340   	; 0x2fa <Lcd_Printf>
}
     836:	8d b7       	in	r24, 0x3d	; 61
     838:	9e b7       	in	r25, 0x3e	; 62
     83a:	0c 96       	adiw	r24, 0x0c	; 12
     83c:	0f b6       	in	r0, 0x3f	; 63
     83e:	f8 94       	cli
     840:	9e bf       	out	0x3e, r25	; 62
     842:	0f be       	out	0x3f, r0	; 63
     844:	8d bf       	out	0x3d, r24	; 61
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	08 95       	ret

0000084c <main>:
    { {0}}, 0
};

int main() {

    uTmr_Init();
     84c:	17 d4       	rcall	.+2094   	; 0x107c <uTmr_Init>

    Lcd_Initialize(&lcdObj);
     84e:	81 ee       	ldi	r24, 0xE1	; 225
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	6e dd       	rcall	.-1316   	; 0x330 <Lcd_Initialize>

    Gpio_PinConfig(&buttonBack, GPIO_IN, GPIO_LOW);
     854:	40 e0       	ldi	r20, 0x00	; 0
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	8f ed       	ldi	r24, 0xDF	; 223
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	5d dc       	rcall	.-1862   	; 0x118 <Gpio_PinConfig>
    Gpio_PinConfig(&buttonDown, GPIO_IN, GPIO_LOW);
     85e:	40 e0       	ldi	r20, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	8d ed       	ldi	r24, 0xDD	; 221
     864:	91 e0       	ldi	r25, 0x01	; 1
     866:	58 dc       	rcall	.-1872   	; 0x118 <Gpio_PinConfig>
    Gpio_PinConfig(&buttonUp, GPIO_IN, GPIO_LOW);
     868:	40 e0       	ldi	r20, 0x00	; 0
     86a:	60 e0       	ldi	r22, 0x00	; 0
     86c:	8b ed       	ldi	r24, 0xDB	; 219
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	53 dc       	rcall	.-1882   	; 0x118 <Gpio_PinConfig>
    Gpio_PinConfig(&buttonEnter, GPIO_IN, GPIO_LOW);
     872:	40 e0       	ldi	r20, 0x00	; 0
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	89 ed       	ldi	r24, 0xD9	; 217
     878:	91 e0       	ldi	r25, 0x01	; 1
     87a:	4e dc       	rcall	.-1892   	; 0x118 <Gpio_PinConfig>
    Gpio_PinConfig(&led1, GPIO_OUT, GPIO_LOW);
     87c:	40 e0       	ldi	r20, 0x00	; 0
     87e:	61 e0       	ldi	r22, 0x01	; 1
     880:	87 ed       	ldi	r24, 0xD7	; 215
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	49 dc       	rcall	.-1902   	; 0x118 <Gpio_PinConfig>
	
    Timer_Start(&led1_timer, led_blink_speed, TIMER_RESTART_AFTER_COMPLETED);
     886:	60 91 d5 01 	lds	r22, 0x01D5	; 0x8001d5 <led_blink_speed>
     88a:	70 91 d6 01 	lds	r23, 0x01D6	; 0x8001d6 <led_blink_speed+0x1>
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	9e d4       	rcall	.+2364   	; 0x11d0 <__floatunsisf>
     894:	ab 01       	movw	r20, r22
     896:	bc 01       	movw	r22, r24
     898:	21 e0       	ldi	r18, 0x01	; 1
     89a:	8e e3       	ldi	r24, 0x3E	; 62
     89c:	94 e0       	ldi	r25, 0x04	; 4
     89e:	21 d3       	rcall	.+1602   	; 0xee2 <Timer_Start>
    Menu_Initialize(&muObj);
     8a0:	8a e4       	ldi	r24, 0x4A	; 74
     8a2:	94 e0       	ldi	r25, 0x04	; 4
     8a4:	3d d0       	rcall	.+122    	; 0x920 <Menu_Initialize>

    muObj.window = &mainwindow;
     8a6:	8f e0       	ldi	r24, 0x0F	; 15
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	90 93 4b 04 	sts	0x044B, r25	; 0x80044b <muObj+0x1>
     8ae:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <muObj>

    Uart_Initialize(9600);
     8b2:	80 e8       	ldi	r24, 0x80	; 128
     8b4:	95 e2       	ldi	r25, 0x25	; 37
     8b6:	28 d4       	rcall	.+2128   	; 0x1108 <Uart_Initialize>

    while (1) {

        uint8_t key = Uart_GetKey() | getKey();
     8b8:	22 d4       	rcall	.+2116   	; 0x10fe <Uart_GetKey>
     8ba:	c8 2f       	mov	r28, r24
     8bc:	f6 de       	rcall	.-532    	; 0x6aa <getKey>
     8be:	c8 2b       	or	r28, r24

        if (Timer_IsCompleted(&led1_timer)) {
     8c0:	8e e3       	ldi	r24, 0x3E	; 62
     8c2:	94 e0       	ldi	r25, 0x04	; 4
     8c4:	70 d3       	rcall	.+1760   	; 0xfa6 <Timer_IsCompleted>
     8c6:	88 23       	and	r24, r24
     8c8:	19 f0       	breq	.+6      	; 0x8d0 <main+0x84>
            Gpio_PinToggle(&led1);
     8ca:	87 ed       	ldi	r24, 0xD7	; 215
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	5e dc       	rcall	.-1860   	; 0x18c <Gpio_PinToggle>
     8d0:	6c 2f       	mov	r22, r28
        }

        if (!Menu_Task(&muObj, key)) {
     8d2:	8a e4       	ldi	r24, 0x4A	; 74
     8d4:	94 e0       	ldi	r25, 0x04	; 4
     8d6:	62 d1       	rcall	.+708    	; 0xb9c <Menu_Task>
     8d8:	81 11       	cpse	r24, r1
     8da:	04 c0       	rjmp	.+8      	; 0x8e4 <main+0x98>
     8dc:	81 ee       	ldi	r24, 0xE1	; 225

            Lcd_DefaultScreen(&lcdObj);
     8de:	91 e0       	ldi	r25, 0x01	; 1
     8e0:	92 df       	rcall	.-220    	; 0x806 <Lcd_DefaultScreen>
     8e2:	1a c0       	rjmp	.+52     	; 0x918 <main+0xcc>
     8e4:	40 e4       	ldi	r20, 0x40	; 64
     8e6:	50 e0       	ldi	r21, 0x00	; 0

        } else {

            if (memcmp(muObj.out, muObj.prev_out, sizeof (muObj.prev_out))) {
     8e8:	60 e9       	ldi	r22, 0x90	; 144
     8ea:	74 e0       	ldi	r23, 0x04	; 4
     8ec:	80 e5       	ldi	r24, 0x50	; 80
     8ee:	94 e0       	ldi	r25, 0x04	; 4
     8f0:	0a d6       	rcall	.+3092   	; 0x1506 <memcmp>
     8f2:	89 2b       	or	r24, r25
     8f4:	89 f0       	breq	.+34     	; 0x918 <main+0xcc>
     8f6:	80 e5       	ldi	r24, 0x50	; 80
     8f8:	94 e0       	ldi	r25, 0x04	; 4
                                Uart_WriteStr((const char *) muObj.out);
     8fa:	34 d4       	rcall	.+2152   	; 0x1164 <Uart_WriteStr>
     8fc:	80 e4       	ldi	r24, 0x40	; 64
     8fe:	e0 e5       	ldi	r30, 0x50	; 80
                memcpy(muObj.prev_out, muObj.out, sizeof (muObj.prev_out));
     900:	f4 e0       	ldi	r31, 0x04	; 4
     902:	a0 e9       	ldi	r26, 0x90	; 144
     904:	b4 e0       	ldi	r27, 0x04	; 4
     906:	01 90       	ld	r0, Z+
     908:	0d 92       	st	X+, r0
     90a:	8a 95       	dec	r24
     90c:	e1 f7       	brne	.-8      	; 0x906 <main+0xba>
     90e:	60 e5       	ldi	r22, 0x50	; 80
     910:	74 e0       	ldi	r23, 0x04	; 4
                Lcd_MenuScreen(&lcdObj, (char *) muObj.out);
     912:	81 ee       	ldi	r24, 0xE1	; 225
     914:	91 e0       	ldi	r25, 0x01	; 1
     916:	15 df       	rcall	.-470    	; 0x742 <Lcd_MenuScreen>
     918:	81 ee       	ldi	r24, 0xE1	; 225
     91a:	91 e0       	ldi	r25, 0x01	; 1
     91c:	56 dd       	rcall	.-1364   	; 0x3ca <Lcd_Task>
            }

        }
        Lcd_Task(&lcdObj);
     91e:	cc cf       	rjmp	.-104    	; 0x8b8 <main+0x6c>

00000920 <Menu_Initialize>:
     920:	fc 01       	movw	r30, r24
     922:	36 96       	adiw	r30, 0x06	; 6
     924:	20 e4       	ldi	r18, 0x40	; 64
    }
     926:	df 01       	movw	r26, r30
            break;
        case 3:
            break;
    }
    return 0;
}
     928:	32 2f       	mov	r19, r18
     92a:	1d 92       	st	X+, r1
     92c:	3a 95       	dec	r19
     92e:	e9 f7       	brne	.-6      	; 0x92a <Menu_Initialize+0xa>
     930:	e0 5c       	subi	r30, 0xC0	; 192
     932:	ff 4f       	sbci	r31, 0xFF	; 255
     934:	df 01       	movw	r26, r30
     936:	1d 92       	st	X+, r1
     938:	2a 95       	dec	r18
     93a:	e9 f7       	brne	.-6      	; 0x936 <Menu_Initialize+0x16>
     93c:	08 95       	ret

0000093e <Menu_GetPassword>:
            //            return Menu_GetString(menu, key, password);
            break;
      }

    return 0;
}
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	08 95       	ret

00000942 <Menu_SelectOpt>:

unsigned char Menu_SelectOpt(menu_t *menu) {
     942:	af 92       	push	r10
     944:	bf 92       	push	r11
     946:	cf 92       	push	r12
     948:	df 92       	push	r13
     94a:	ef 92       	push	r14
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29

    unsigned char temp_line_num = 0;

    menu_window_t *curr_window = menu->window;
     956:	dc 01       	movw	r26, r24
     958:	cd 91       	ld	r28, X+
     95a:	dc 91       	ld	r29, X

    switch (curr_window->opt_state) {
     95c:	0d 89       	ldd	r16, Y+21	; 0x15
     95e:	00 23       	and	r16, r16
     960:	21 f0       	breq	.+8      	; 0x96a <Menu_SelectOpt+0x28>
     962:	01 30       	cpi	r16, 0x01	; 1
     964:	09 f4       	brne	.+2      	; 0x968 <Menu_SelectOpt+0x26>
     966:	b3 c0       	rjmp	.+358    	; 0xace <Menu_SelectOpt+0x18c>
     968:	00 c1       	rjmp	.+512    	; 0xb6a <Menu_SelectOpt+0x228>
     96a:	6c 01       	movw	r12, r24
        case 0:
            memset(menu->out, 0, sizeof (menu->out));
     96c:	5c 01       	movw	r10, r24
     96e:	b6 e0       	ldi	r27, 0x06	; 6
     970:	ab 0e       	add	r10, r27
     972:	b1 1c       	adc	r11, r1
     974:	80 e4       	ldi	r24, 0x40	; 64
     976:	f5 01       	movw	r30, r10
     978:	11 92       	st	Z+, r1
     97a:	8a 95       	dec	r24
     97c:	e9 f7       	brne	.-6      	; 0x978 <Menu_SelectOpt+0x36>

            menu->out_size = sprintf((char *) menu->out, "%s\n", curr_window->heading_ptr);
     97e:	8d 81       	ldd	r24, Y+5	; 0x05
     980:	8f 93       	push	r24
     982:	8c 81       	ldd	r24, Y+4	; 0x04
     984:	8f 93       	push	r24
     986:	8d e1       	ldi	r24, 0x1D	; 29
     988:	94 e0       	ldi	r25, 0x04	; 4
     98a:	9f 93       	push	r25
     98c:	8f 93       	push	r24
     98e:	bf 92       	push	r11
     990:	af 92       	push	r10
     992:	fd d5       	rcall	.+3066   	; 0x158e <sprintf>
     994:	f6 01       	movw	r30, r12
     996:	ea 57       	subi	r30, 0x7A	; 122
     998:	ff 4f       	sbci	r31, 0xFF	; 255
     99a:	91 83       	std	Z+1, r25	; 0x01
     99c:	80 83       	st	Z, r24

            for (temp_line_num = 0; temp_line_num < curr_window->total_size; temp_line_num++) {
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	10 e0       	ldi	r17, 0x00	; 0
     9ac:	7a c0       	rjmp	.+244    	; 0xaa2 <Menu_SelectOpt+0x160>

                if (curr_window->hlight_line_num == temp_line_num) {
     9ae:	88 85       	ldd	r24, Y+8	; 0x08
     9b0:	18 13       	cpse	r17, r24
     9b2:	3c c0       	rjmp	.+120    	; 0xa2c <Menu_SelectOpt+0xea>
                    menu->out_size += sprintf((char *) (menu->out + menu->out_size), ">%d. %s\n",
                        curr_window->window_st_num + temp_line_num,
                        curr_window->opt[curr_window->window_st_num + temp_line_num].opt_heading_ptr
     9b4:	48 81       	ld	r20, Y
     9b6:	59 81       	ldd	r21, Y+1	; 0x01
     9b8:	2e 81       	ldd	r18, Y+6	; 0x06
     9ba:	81 2f       	mov	r24, r17
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	82 0f       	add	r24, r18
     9c0:	91 1d       	adc	r25, r1
     9c2:	fc 01       	movw	r30, r24
     9c4:	ee 0f       	add	r30, r30
     9c6:	ff 1f       	adc	r31, r31
     9c8:	9c 01       	movw	r18, r24
     9ca:	22 0f       	add	r18, r18
     9cc:	33 1f       	adc	r19, r19
     9ce:	22 0f       	add	r18, r18
     9d0:	33 1f       	adc	r19, r19
     9d2:	22 0f       	add	r18, r18
     9d4:	33 1f       	adc	r19, r19
     9d6:	e2 0f       	add	r30, r18
     9d8:	f3 1f       	adc	r31, r19
     9da:	e4 0f       	add	r30, r20
     9dc:	f5 1f       	adc	r31, r21
            menu->out_size = sprintf((char *) menu->out, "%s\n", curr_window->heading_ptr);

            for (temp_line_num = 0; temp_line_num < curr_window->total_size; temp_line_num++) {

                if (curr_window->hlight_line_num == temp_line_num) {
                    menu->out_size += sprintf((char *) (menu->out + menu->out_size), ">%d. %s\n",
     9de:	76 01       	movw	r14, r12
     9e0:	26 e8       	ldi	r18, 0x86	; 134
     9e2:	e2 0e       	add	r14, r18
     9e4:	f1 1c       	adc	r15, r1
     9e6:	d7 01       	movw	r26, r14
     9e8:	2d 91       	ld	r18, X+
     9ea:	3c 91       	ld	r19, X
     9ec:	41 81       	ldd	r20, Z+1	; 0x01
     9ee:	4f 93       	push	r20
     9f0:	40 81       	ld	r20, Z
     9f2:	4f 93       	push	r20
     9f4:	9f 93       	push	r25
     9f6:	8f 93       	push	r24
     9f8:	88 e1       	ldi	r24, 0x18	; 24
     9fa:	94 e0       	ldi	r25, 0x04	; 4
     9fc:	9f 93       	push	r25
     9fe:	8f 93       	push	r24
     a00:	c5 01       	movw	r24, r10
     a02:	82 0f       	add	r24, r18
     a04:	93 1f       	adc	r25, r19
     a06:	9f 93       	push	r25
     a08:	8f 93       	push	r24
     a0a:	c1 d5       	rcall	.+2946   	; 0x158e <sprintf>
     a0c:	f7 01       	movw	r30, r14
     a0e:	20 81       	ld	r18, Z
     a10:	31 81       	ldd	r19, Z+1	; 0x01
     a12:	82 0f       	add	r24, r18
     a14:	93 1f       	adc	r25, r19
     a16:	91 83       	std	Z+1, r25	; 0x01
     a18:	80 83       	st	Z, r24
     a1a:	8d b7       	in	r24, 0x3d	; 61
     a1c:	9e b7       	in	r25, 0x3e	; 62
     a1e:	08 96       	adiw	r24, 0x08	; 8
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	f8 94       	cli
     a24:	9e bf       	out	0x3e, r25	; 62
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	8d bf       	out	0x3d, r24	; 61
     a2a:	3a c0       	rjmp	.+116    	; 0xaa0 <Menu_SelectOpt+0x15e>
                            );
                }
                else
                    menu->out_size += sprintf((char *) (menu->out + menu->out_size), "%d. %s\n",
                        curr_window->window_st_num + temp_line_num,
                        curr_window->opt[curr_window->window_st_num + temp_line_num].opt_heading_ptr
     a2c:	48 81       	ld	r20, Y
     a2e:	59 81       	ldd	r21, Y+1	; 0x01
     a30:	8e 81       	ldd	r24, Y+6	; 0x06
     a32:	21 2f       	mov	r18, r17
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	28 0f       	add	r18, r24
     a38:	31 1d       	adc	r19, r1
     a3a:	f9 01       	movw	r30, r18
     a3c:	ee 0f       	add	r30, r30
     a3e:	ff 1f       	adc	r31, r31
     a40:	c9 01       	movw	r24, r18
     a42:	88 0f       	add	r24, r24
     a44:	99 1f       	adc	r25, r25
     a46:	88 0f       	add	r24, r24
     a48:	99 1f       	adc	r25, r25
     a4a:	88 0f       	add	r24, r24
     a4c:	99 1f       	adc	r25, r25
     a4e:	e8 0f       	add	r30, r24
     a50:	f9 1f       	adc	r31, r25
     a52:	e4 0f       	add	r30, r20
     a54:	f5 1f       	adc	r31, r21
                        curr_window->window_st_num + temp_line_num,
                        curr_window->opt[curr_window->window_st_num + temp_line_num].opt_heading_ptr
                            );
                }
                else
                    menu->out_size += sprintf((char *) (menu->out + menu->out_size), "%d. %s\n",
     a56:	76 01       	movw	r14, r12
     a58:	96 e8       	ldi	r25, 0x86	; 134
     a5a:	e9 0e       	add	r14, r25
     a5c:	f1 1c       	adc	r15, r1
     a5e:	d7 01       	movw	r26, r14
     a60:	8d 91       	ld	r24, X+
     a62:	9c 91       	ld	r25, X
     a64:	41 81       	ldd	r20, Z+1	; 0x01
     a66:	4f 93       	push	r20
     a68:	40 81       	ld	r20, Z
     a6a:	4f 93       	push	r20
     a6c:	3f 93       	push	r19
     a6e:	2f 93       	push	r18
     a70:	29 e1       	ldi	r18, 0x19	; 25
     a72:	34 e0       	ldi	r19, 0x04	; 4
     a74:	3f 93       	push	r19
     a76:	2f 93       	push	r18
     a78:	8a 0d       	add	r24, r10
     a7a:	9b 1d       	adc	r25, r11
     a7c:	9f 93       	push	r25
     a7e:	8f 93       	push	r24
     a80:	86 d5       	rcall	.+2828   	; 0x158e <sprintf>
     a82:	f7 01       	movw	r30, r14
     a84:	20 81       	ld	r18, Z
     a86:	31 81       	ldd	r19, Z+1	; 0x01
     a88:	82 0f       	add	r24, r18
     a8a:	93 1f       	adc	r25, r19
     a8c:	91 83       	std	Z+1, r25	; 0x01
     a8e:	80 83       	st	Z, r24
     a90:	8d b7       	in	r24, 0x3d	; 61
     a92:	9e b7       	in	r25, 0x3e	; 62
     a94:	08 96       	adiw	r24, 0x08	; 8
     a96:	0f b6       	in	r0, 0x3f	; 63
     a98:	f8 94       	cli
     a9a:	9e bf       	out	0x3e, r25	; 62
     a9c:	0f be       	out	0x3f, r0	; 63
     a9e:	8d bf       	out	0x3d, r24	; 61
        case 0:
            memset(menu->out, 0, sizeof (menu->out));

            menu->out_size = sprintf((char *) menu->out, "%s\n", curr_window->heading_ptr);

            for (temp_line_num = 0; temp_line_num < curr_window->total_size; temp_line_num++) {
     aa0:	1f 5f       	subi	r17, 0xFF	; 255
     aa2:	89 85       	ldd	r24, Y+9	; 0x09
     aa4:	18 17       	cp	r17, r24
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <Menu_SelectOpt+0x168>
     aa8:	82 cf       	rjmp	.-252    	; 0x9ae <Menu_SelectOpt+0x6c>
                        curr_window->opt[curr_window->window_st_num + temp_line_num].opt_heading_ptr
                        );

            }

            memset(menu->out + menu->out_size, 0, sizeof (menu->out) - menu->out_size);
     aaa:	f6 01       	movw	r30, r12
     aac:	ea 57       	subi	r30, 0x7A	; 122
     aae:	ff 4f       	sbci	r31, 0xFF	; 255
     ab0:	80 81       	ld	r24, Z
     ab2:	91 81       	ldd	r25, Z+1	; 0x01
     ab4:	40 e4       	ldi	r20, 0x40	; 64
     ab6:	50 e0       	ldi	r21, 0x00	; 0
     ab8:	48 1b       	sub	r20, r24
     aba:	59 0b       	sbc	r21, r25
     abc:	60 e0       	ldi	r22, 0x00	; 0
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	8a 0d       	add	r24, r10
     ac2:	9b 1d       	adc	r25, r11
     ac4:	36 d5       	rcall	.+2668   	; 0x1532 <memset>

             curr_window->opt_state++;
     ac6:	8d 89       	ldd	r24, Y+21	; 0x15
     ac8:	8f 5f       	subi	r24, 0xFF	; 255
     aca:	8d 8b       	std	Y+21, r24	; 0x15
            break;
     acc:	51 c0       	rjmp	.+162    	; 0xb70 <Menu_SelectOpt+0x22e>
        case 1:
            if (menu->key == 'D') {
     ace:	fc 01       	movw	r30, r24
     ad0:	e8 57       	subi	r30, 0x78	; 120
     ad2:	ff 4f       	sbci	r31, 0xFF	; 255
     ad4:	80 81       	ld	r24, Z
     ad6:	84 34       	cpi	r24, 0x44	; 68
     ad8:	e9 f4       	brne	.+58     	; 0xb14 <Menu_SelectOpt+0x1d2>

                curr_window->hlight_line_num++;
     ada:	88 85       	ldd	r24, Y+8	; 0x08
     adc:	8f 5f       	subi	r24, 0xFF	; 255
     ade:	88 87       	std	Y+8, r24	; 0x08
                if (curr_window->hlight_line_num >= curr_window->total_size)
     ae0:	99 85       	ldd	r25, Y+9	; 0x09
     ae2:	89 17       	cp	r24, r25
     ae4:	08 f0       	brcs	.+2      	; 0xae8 <Menu_SelectOpt+0x1a6>
                    curr_window->hlight_line_num = 0;
     ae6:	18 86       	std	Y+8, r1	; 0x08

                if (curr_window->hlight_line_num == curr_window->window_size) {
     ae8:	88 85       	ldd	r24, Y+8	; 0x08
     aea:	4f 81       	ldd	r20, Y+7	; 0x07
     aec:	84 13       	cpse	r24, r20
     aee:	0f c0       	rjmp	.+30     	; 0xb0e <Menu_SelectOpt+0x1cc>
                    curr_window->window_st_num++;
     af0:	2e 81       	ldd	r18, Y+6	; 0x06
     af2:	2f 5f       	subi	r18, 0xFF	; 255
     af4:	2e 83       	std	Y+6, r18	; 0x06
                    curr_window->hlight_line_num--;
     af6:	81 50       	subi	r24, 0x01	; 1
     af8:	88 87       	std	Y+8, r24	; 0x08
                    if (curr_window->window_st_num > (curr_window->total_size - curr_window->window_size)) {
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	89 2f       	mov	r24, r25
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	84 1b       	sub	r24, r20
     b02:	91 09       	sbc	r25, r1
     b04:	82 17       	cp	r24, r18
     b06:	93 07       	cpc	r25, r19
     b08:	14 f4       	brge	.+4      	; 0xb0e <Menu_SelectOpt+0x1cc>
                        curr_window->window_st_num = 0;
     b0a:	1e 82       	std	Y+6, r1	; 0x06
                        curr_window->hlight_line_num = 0;
     b0c:	18 86       	std	Y+8, r1	; 0x08
                    }
                }
                curr_window->opt_state = 0;
     b0e:	1d 8a       	std	Y+21, r1	; 0x15
                return 1;
            }
            break;
    }

    return 0;
     b10:	00 e0       	ldi	r16, 0x00	; 0
     b12:	2e c0       	rjmp	.+92     	; 0xb70 <Menu_SelectOpt+0x22e>
                        curr_window->window_st_num = 0;
                        curr_window->hlight_line_num = 0;
                    }
                }
                curr_window->opt_state = 0;
            } else if (menu->key == 'U') {
     b14:	85 35       	cpi	r24, 0x55	; 85
     b16:	d1 f4       	brne	.+52     	; 0xb4c <Menu_SelectOpt+0x20a>
                if (curr_window->hlight_line_num == 0) {
     b18:	88 85       	ldd	r24, Y+8	; 0x08
     b1a:	81 11       	cpse	r24, r1
     b1c:	12 c0       	rjmp	.+36     	; 0xb42 <Menu_SelectOpt+0x200>

                    if (curr_window->window_st_num) {
     b1e:	8e 81       	ldd	r24, Y+6	; 0x06
     b20:	88 23       	and	r24, r24
     b22:	21 f0       	breq	.+8      	; 0xb2c <Menu_SelectOpt+0x1ea>
                        curr_window->window_st_num--;
     b24:	81 50       	subi	r24, 0x01	; 1
     b26:	8e 83       	std	Y+6, r24	; 0x06
                        curr_window->hlight_line_num = 0;
     b28:	18 86       	std	Y+8, r1	; 0x08
     b2a:	0d c0       	rjmp	.+26     	; 0xb46 <Menu_SelectOpt+0x204>
                    } else {
                        int8_t st_num = curr_window->total_size - curr_window->window_size;
     b2c:	89 85       	ldd	r24, Y+9	; 0x09
     b2e:	9f 81       	ldd	r25, Y+7	; 0x07
     b30:	a8 2f       	mov	r26, r24
     b32:	a9 1b       	sub	r26, r25
     b34:	9a 2f       	mov	r25, r26
                        if (st_num < 0)
     b36:	0a f4       	brpl	.+2      	; 0xb3a <Menu_SelectOpt+0x1f8>
                            st_num = 0;
     b38:	90 e0       	ldi	r25, 0x00	; 0
                        curr_window->window_st_num = st_num;
     b3a:	9e 83       	std	Y+6, r25	; 0x06
                        curr_window->hlight_line_num = curr_window->total_size - 1;
     b3c:	81 50       	subi	r24, 0x01	; 1
     b3e:	88 87       	std	Y+8, r24	; 0x08
     b40:	02 c0       	rjmp	.+4      	; 0xb46 <Menu_SelectOpt+0x204>
                    }
                } else {
                    curr_window->hlight_line_num--;
     b42:	81 50       	subi	r24, 0x01	; 1
     b44:	88 87       	std	Y+8, r24	; 0x08
                }
                curr_window->opt_state = 0;
     b46:	1d 8a       	std	Y+21, r1	; 0x15
                return 1;
            }
            break;
    }

    return 0;
     b48:	00 e0       	ldi	r16, 0x00	; 0
     b4a:	12 c0       	rjmp	.+36     	; 0xb70 <Menu_SelectOpt+0x22e>
                } else {
                    curr_window->hlight_line_num--;
                }
                curr_window->opt_state = 0;

            } else if (menu->key == 'E') {
     b4c:	85 34       	cpi	r24, 0x45	; 69
     b4e:	31 f4       	brne	.+12     	; 0xb5c <Menu_SelectOpt+0x21a>

                curr_window->curr_list_sel = curr_window->hlight_line_num + curr_window->window_st_num;
     b50:	98 85       	ldd	r25, Y+8	; 0x08
     b52:	8e 81       	ldd	r24, Y+6	; 0x06
     b54:	89 0f       	add	r24, r25
     b56:	8c 87       	std	Y+12, r24	; 0x0c
                curr_window->opt_state = 0;
     b58:	1d 8a       	std	Y+21, r1	; 0x15
                return 1;
     b5a:	0a c0       	rjmp	.+20     	; 0xb70 <Menu_SelectOpt+0x22e>

            } else if (menu->key == 'C') {
     b5c:	83 34       	cpi	r24, 0x43	; 67
     b5e:	39 f4       	brne	.+14     	; 0xb6e <Menu_SelectOpt+0x22c>

                curr_window->flags.bits.cancelled = 1;
     b60:	8c 89       	ldd	r24, Y+20	; 0x14
     b62:	81 60       	ori	r24, 0x01	; 1
     b64:	8c 8b       	std	Y+20, r24	; 0x14
                curr_window->opt_state = 0;
     b66:	1d 8a       	std	Y+21, r1	; 0x15
                return 1;
     b68:	03 c0       	rjmp	.+6      	; 0xb70 <Menu_SelectOpt+0x22e>
            }
            break;
    }

    return 0;
     b6a:	00 e0       	ldi	r16, 0x00	; 0
     b6c:	01 c0       	rjmp	.+2      	; 0xb70 <Menu_SelectOpt+0x22e>
     b6e:	00 e0       	ldi	r16, 0x00	; 0
}
     b70:	80 2f       	mov	r24, r16
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	ff 90       	pop	r15
     b7c:	ef 90       	pop	r14
     b7e:	df 90       	pop	r13
     b80:	cf 90       	pop	r12
     b82:	bf 90       	pop	r11
     b84:	af 90       	pop	r10
     b86:	08 95       	ret

00000b88 <Menu_Flush>:

void Menu_Flush(menu_window_t *window) {
     b88:	fc 01       	movw	r30, r24
    window->curr_list_sel = 0;
     b8a:	14 86       	std	Z+12, r1	; 0x0c
    window->hlight_line_num = 0;
     b8c:	10 86       	std	Z+8, r1	; 0x08
    window->window_st_num = 0;
     b8e:	16 82       	std	Z+6, r1	; 0x06
    window->flags.bits.cancelled = 0;
     b90:	84 89       	ldd	r24, Z+20	; 0x14
     b92:	8e 7f       	andi	r24, 0xFE	; 254
     b94:	84 8b       	std	Z+20, r24	; 0x14
    window->state = 0;
     b96:	15 86       	std	Z+13, r1	; 0x0d
    window->opt_state = 0;
     b98:	15 8a       	std	Z+21, r1	; 0x15
     b9a:	08 95       	ret

00000b9c <Menu_Task>:
}
uint8_t Menu_Task(menu_t *menu, uint8_t key) {
     b9c:	cf 92       	push	r12
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	00 d0       	rcall	.+0      	; 0xbae <Menu_Task+0x12>
     bae:	00 d0       	rcall	.+0      	; 0xbb0 <Menu_Task+0x14>
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62

    menu->key = key;
     bb4:	fc 01       	movw	r30, r24
     bb6:	e8 57       	subi	r30, 0x78	; 120
     bb8:	ff 4f       	sbci	r31, 0xFF	; 255
     bba:	60 83       	st	Z, r22

    menu_window_t *c_window = menu->window;
     bbc:	dc 01       	movw	r26, r24
     bbe:	0d 91       	ld	r16, X+
     bc0:	1c 91       	ld	r17, X
     bc2:	11 97       	sbiw	r26, 0x01	; 1

    if (c_window)
     bc4:	01 15       	cp	r16, r1
     bc6:	11 05       	cpc	r17, r1
     bc8:	21 f0       	breq	.+8      	; 0xbd2 <Menu_Task+0x36>
        menu->constwindow = c_window;
     bca:	13 96       	adiw	r26, 0x03	; 3
     bcc:	1c 93       	st	X, r17
     bce:	0e 93       	st	-X, r16
     bd0:	12 97       	sbiw	r26, 0x02	; 2

    switch (c_window->state) {
     bd2:	f8 01       	movw	r30, r16
     bd4:	f5 84       	ldd	r15, Z+13	; 0x0d
     bd6:	f2 e0       	ldi	r31, 0x02	; 2
     bd8:	ff 16       	cp	r15, r31
     bda:	09 f4       	brne	.+2      	; 0xbde <Menu_Task+0x42>
     bdc:	4d c0       	rjmp	.+154    	; 0xc78 <Menu_Task+0xdc>
     bde:	6c 01       	movw	r12, r24
     be0:	ff 15       	cp	r31, r15
     be2:	30 f0       	brcs	.+12     	; 0xbf0 <Menu_Task+0x54>
     be4:	ff 20       	and	r15, r15
     be6:	69 f0       	breq	.+26     	; 0xc02 <Menu_Task+0x66>
     be8:	21 e0       	ldi	r18, 0x01	; 1
     bea:	f2 16       	cp	r15, r18
     bec:	89 f0       	breq	.+34     	; 0xc10 <Menu_Task+0x74>
     bee:	fa c0       	rjmp	.+500    	; 0xde4 <Menu_Task+0x248>
     bf0:	83 e0       	ldi	r24, 0x03	; 3
     bf2:	f8 16       	cp	r15, r24
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <Menu_Task+0x5c>
     bf6:	44 c0       	rjmp	.+136    	; 0xc80 <Menu_Task+0xe4>
     bf8:	a4 e0       	ldi	r26, 0x04	; 4
     bfa:	fa 16       	cp	r15, r26
     bfc:	09 f4       	brne	.+2      	; 0xc00 <Menu_Task+0x64>
     bfe:	83 c0       	rjmp	.+262    	; 0xd06 <Menu_Task+0x16a>
     c00:	f1 c0       	rjmp	.+482    	; 0xde4 <Menu_Task+0x248>

        case MENU_IDLE:
            if (menu->key == 'E') {
     c02:	65 34       	cpi	r22, 0x45	; 69
     c04:	09 f0       	breq	.+2      	; 0xc08 <Menu_Task+0x6c>
     c06:	ee c0       	rjmp	.+476    	; 0xde4 <Menu_Task+0x248>
                c_window->state++;
     c08:	f3 94       	inc	r15
     c0a:	f8 01       	movw	r30, r16
     c0c:	f5 86       	std	Z+13, r15	; 0x0d
     c0e:	ea c0       	rjmp	.+468    	; 0xde4 <Menu_Task+0x248>
            }
            break;

        case MENU_PROTECTION:

            if (c_window) {
     c10:	01 15       	cp	r16, r1
     c12:	11 05       	cpc	r17, r1
     c14:	69 f1       	breq	.+90     	; 0xc70 <Menu_Task+0xd4>

                if (c_window->password[0] != 0) {
     c16:	d8 01       	movw	r26, r16
     c18:	1f 96       	adiw	r26, 0x0f	; 15
     c1a:	8c 91       	ld	r24, X
     c1c:	88 23       	and	r24, r24
     c1e:	19 f1       	breq	.+70     	; 0xc66 <Menu_Task+0xca>
                    uint8_t usrpassword[4];
                    uint8_t ret = Menu_GetPassword(menu, key, usrpassword);
     c20:	ae 01       	movw	r20, r28
     c22:	4f 5f       	subi	r20, 0xFF	; 255
     c24:	5f 4f       	sbci	r21, 0xFF	; 255
     c26:	c6 01       	movw	r24, r12
     c28:	8a de       	rcall	.-748    	; 0x93e <Menu_GetPassword>

                    if (ret) {
     c2a:	88 23       	and	r24, r24
     c2c:	c1 f0       	breq	.+48     	; 0xc5e <Menu_Task+0xc2>
                        if (!memcmp(usrpassword, c_window->password, 4))
     c2e:	44 e0       	ldi	r20, 0x04	; 4
     c30:	50 e0       	ldi	r21, 0x00	; 0
     c32:	b8 01       	movw	r22, r16
     c34:	61 5f       	subi	r22, 0xF1	; 241
     c36:	7f 4f       	sbci	r23, 0xFF	; 255
     c38:	ce 01       	movw	r24, r28
     c3a:	01 96       	adiw	r24, 0x01	; 1
     c3c:	64 d4       	rcall	.+2248   	; 0x1506 <memcmp>
     c3e:	89 2b       	or	r24, r25
     c40:	21 f4       	brne	.+8      	; 0xc4a <Menu_Task+0xae>
                            c_window->state++;
     c42:	f3 94       	inc	r15
     c44:	f8 01       	movw	r30, r16
     c46:	f5 86       	std	Z+13, r15	; 0x0d
     c48:	0e c0       	rjmp	.+28     	; 0xc66 <Menu_Task+0xca>
                        else
                            memcpy(menu->out, invalid_pass, sizeof (invalid_pass));
     c4a:	8b e1       	ldi	r24, 0x1B	; 27
     c4c:	e1 e2       	ldi	r30, 0x21	; 33
     c4e:	f4 e0       	ldi	r31, 0x04	; 4
     c50:	d6 01       	movw	r26, r12
     c52:	16 96       	adiw	r26, 0x06	; 6
     c54:	01 90       	ld	r0, Z+
     c56:	0d 92       	st	X+, r0
     c58:	8a 95       	dec	r24
     c5a:	e1 f7       	brne	.-8      	; 0xc54 <Menu_Task+0xb8>
     c5c:	04 c0       	rjmp	.+8      	; 0xc66 <Menu_Task+0xca>
                    } else
                        c_window->state++;
     c5e:	f3 94       	inc	r15
     c60:	d8 01       	movw	r26, r16
     c62:	1d 96       	adiw	r26, 0x0d	; 13
     c64:	fc 92       	st	X, r15
                }

                // Timer_Start(&menu->timeout, 5000, TIMER_STOP_AFTER_COMPLETED);
                c_window->state++;
     c66:	f8 01       	movw	r30, r16
     c68:	85 85       	ldd	r24, Z+13	; 0x0d
     c6a:	8f 5f       	subi	r24, 0xFF	; 255
     c6c:	85 87       	std	Z+13, r24	; 0x0d
     c6e:	ba c0       	rjmp	.+372    	; 0xde4 <Menu_Task+0x248>

            } else {
                //memcpy(menu->out, "INVALID MENU\r\n", strlen("INVALID MENU\r\n"));
                //if (Timer_IsCompleted(&menu->timeout))
                   c_window->state = 0;
     c70:	d8 01       	movw	r26, r16
     c72:	1d 96       	adiw	r26, 0x0d	; 13
     c74:	1c 92       	st	X, r1
     c76:	b6 c0       	rjmp	.+364    	; 0xde4 <Menu_Task+0x248>
            }
            break;
        case MENU_OPEN:
            c_window->state++;
     c78:	f3 94       	inc	r15
     c7a:	f8 01       	movw	r30, r16
     c7c:	f5 86       	std	Z+13, r15	; 0x0d
            break;

        case MENU_SELECT_OPT:

            if (Menu_SelectOpt(menu)) {
     c7e:	b2 c0       	rjmp	.+356    	; 0xde4 <Menu_Task+0x248>
     c80:	c6 01       	movw	r24, r12
     c82:	5f de       	rcall	.-834    	; 0x942 <Menu_SelectOpt>
     c84:	88 23       	and	r24, r24
     c86:	09 f4       	brne	.+2      	; 0xc8a <Menu_Task+0xee>
     c88:	ad c0       	rjmp	.+346    	; 0xde4 <Menu_Task+0x248>

                memset(menu->out, 0, sizeof (menu->out));
     c8a:	f6 01       	movw	r30, r12
     c8c:	36 96       	adiw	r30, 0x06	; 6
     c8e:	80 e4       	ldi	r24, 0x40	; 64
     c90:	df 01       	movw	r26, r30
     c92:	1d 92       	st	X+, r1
     c94:	8a 95       	dec	r24
     c96:	e9 f7       	brne	.-6      	; 0xc92 <Menu_Task+0xf6>

                if (c_window->flags.bits.cancelled || c_window->flags.bits.timeout) {
     c98:	d8 01       	movw	r26, r16
     c9a:	54 96       	adiw	r26, 0x14	; 20
     c9c:	8c 91       	ld	r24, X
     c9e:	54 97       	sbiw	r26, 0x14	; 20
     ca0:	83 70       	andi	r24, 0x03	; 3
     ca2:	21 f1       	breq	.+72     	; 0xcec <Menu_Task+0x150>
                    c_window->flags.bits.cancelled = 0;
     ca4:	54 96       	adiw	r26, 0x14	; 20
     ca6:	8c 91       	ld	r24, X
     ca8:	54 97       	sbiw	r26, 0x14	; 20
                    c_window->flags.bits.timeout = 0;
     caa:	8e 7f       	andi	r24, 0xFE	; 254
     cac:	8d 7f       	andi	r24, 0xFD	; 253
     cae:	54 96       	adiw	r26, 0x14	; 20
     cb0:	8c 93       	st	X, r24
     cb2:	54 97       	sbiw	r26, 0x14	; 20
                    if (c_window->prev_window) {
     cb4:	12 96       	adiw	r26, 0x02	; 2
     cb6:	8d 91       	ld	r24, X+
     cb8:	9c 91       	ld	r25, X
     cba:	13 97       	sbiw	r26, 0x03	; 3
     cbc:	89 2b       	or	r24, r25
     cbe:	81 f0       	breq	.+32     	; 0xce0 <Menu_Task+0x144>
                        menu->window = menu->window->prev_window;
     cc0:	d6 01       	movw	r26, r12
     cc2:	8d 91       	ld	r24, X+
     cc4:	9c 91       	ld	r25, X
     cc6:	dc 01       	movw	r26, r24
     cc8:	12 96       	adiw	r26, 0x02	; 2
     cca:	2d 91       	ld	r18, X+
     ccc:	3c 91       	ld	r19, X
     cce:	13 97       	sbiw	r26, 0x03	; 3
     cd0:	d6 01       	movw	r26, r12
     cd2:	2d 93       	st	X+, r18
     cd4:	3c 93       	st	X, r19
                        menu->window->state = MENU_SELECT_OPT;
     cd6:	83 e0       	ldi	r24, 0x03	; 3
     cd8:	d9 01       	movw	r26, r18
     cda:	1d 96       	adiw	r26, 0x0d	; 13
     cdc:	8c 93       	st	X, r24
     cde:	06 c0       	rjmp	.+12     	; 0xcec <Menu_Task+0x150>
                    } else {
                        c_window = menu->constwindow;
                        Menu_Flush(c_window);
     ce0:	f6 01       	movw	r30, r12
     ce2:	82 81       	ldd	r24, Z+2	; 0x02
     ce4:	93 81       	ldd	r25, Z+3	; 0x03
     ce6:	50 df       	rcall	.-352    	; 0xb88 <Menu_Flush>
                        return 1;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	7e c0       	rjmp	.+252    	; 0xde8 <Menu_Task+0x24c>
                    }
                }
                c_window->state++;
     cec:	d8 01       	movw	r26, r16
     cee:	1d 96       	adiw	r26, 0x0d	; 13
     cf0:	8c 91       	ld	r24, X
     cf2:	1d 97       	sbiw	r26, 0x0d	; 13
     cf4:	8f 5f       	subi	r24, 0xFF	; 255
     cf6:	1d 96       	adiw	r26, 0x0d	; 13
     cf8:	8c 93       	st	X, r24
                memset(menu->out, 0, sizeof (menu->out));
     cfa:	80 e4       	ldi	r24, 0x40	; 64
     cfc:	df 01       	movw	r26, r30
     cfe:	1d 92       	st	X+, r1
     d00:	8a 95       	dec	r24
     d02:	e9 f7       	brne	.-6      	; 0xcfe <Menu_Task+0x162>
     d04:	6f c0       	rjmp	.+222    	; 0xde4 <Menu_Task+0x248>
            }
            break;

        case MENU_EXEC_OPT:
            if (c_window->opt[c_window->curr_list_sel].type) {
     d06:	f8 01       	movw	r30, r16
     d08:	20 81       	ld	r18, Z
     d0a:	31 81       	ldd	r19, Z+1	; 0x01
     d0c:	84 85       	ldd	r24, Z+12	; 0x0c
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	dc 01       	movw	r26, r24
     d12:	aa 0f       	add	r26, r26
     d14:	bb 1f       	adc	r27, r27
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	8a 0f       	add	r24, r26
     d24:	9b 1f       	adc	r25, r27
     d26:	d9 01       	movw	r26, r18
     d28:	a8 0f       	add	r26, r24
     d2a:	b9 1f       	adc	r27, r25
     d2c:	12 96       	adiw	r26, 0x02	; 2
     d2e:	8c 91       	ld	r24, X
     d30:	12 97       	sbiw	r26, 0x02	; 2
     d32:	88 23       	and	r24, r24
     d34:	a1 f0       	breq	.+40     	; 0xd5e <Menu_Task+0x1c2>
                menu_window_t *h_window = c_window;
                c_window = c_window->opt[c_window->curr_list_sel].next_menu;
     d36:	17 96       	adiw	r26, 0x07	; 7
     d38:	ed 90       	ld	r14, X+
     d3a:	fc 90       	ld	r15, X
     d3c:	18 97       	sbiw	r26, 0x08	; 8
                c_window->prev_window = h_window;
     d3e:	d7 01       	movw	r26, r14
     d40:	13 96       	adiw	r26, 0x03	; 3
     d42:	1c 93       	st	X, r17
     d44:	0e 93       	st	-X, r16
                Menu_Flush(c_window);
     d46:	12 97       	sbiw	r26, 0x02	; 2
     d48:	c7 01       	movw	r24, r14
     d4a:	1e df       	rcall	.-452    	; 0xb88 <Menu_Flush>
                menu->window = c_window;
     d4c:	f6 01       	movw	r30, r12
     d4e:	f1 82       	std	Z+1, r15	; 0x01
     d50:	e0 82       	st	Z, r14
                c_window->state = 1;
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	d7 01       	movw	r26, r14
     d56:	1d 96       	adiw	r26, 0x0d	; 13
     d58:	8c 93       	st	X, r24
            break;

        case MENU_EXEC_OPT:
            if (c_window->opt[c_window->curr_list_sel].type) {
                menu_window_t *h_window = c_window;
                c_window = c_window->opt[c_window->curr_list_sel].next_menu;
     d5a:	87 01       	movw	r16, r14
     d5c:	43 c0       	rjmp	.+134    	; 0xde4 <Menu_Task+0x248>
                c_window->prev_window = h_window;
                Menu_Flush(c_window);
                menu->window = c_window;
                c_window->state = 1;
            } else {
                if (c_window->opt[c_window->curr_list_sel].ptr(c_window->opt[c_window->curr_list_sel].params)) {
     d5e:	13 96       	adiw	r26, 0x03	; 3
     d60:	ed 91       	ld	r30, X+
     d62:	fc 91       	ld	r31, X
     d64:	14 97       	sbiw	r26, 0x04	; 4
     d66:	15 96       	adiw	r26, 0x05	; 5
     d68:	8d 91       	ld	r24, X+
     d6a:	9c 91       	ld	r25, X
     d6c:	16 97       	sbiw	r26, 0x06	; 6
     d6e:	09 95       	icall
     d70:	88 23       	and	r24, r24
     d72:	c1 f1       	breq	.+112    	; 0xde4 <Menu_Task+0x248>
                    memset(menu->out, 0, sizeof (menu->out));
     d74:	80 e4       	ldi	r24, 0x40	; 64
     d76:	f6 01       	movw	r30, r12
     d78:	36 96       	adiw	r30, 0x06	; 6
     d7a:	df 01       	movw	r26, r30
     d7c:	1d 92       	st	X+, r1
     d7e:	8a 95       	dec	r24
     d80:	e9 f7       	brne	.-6      	; 0xd7c <Menu_Task+0x1e0>
                    switch (c_window->opt[c_window->curr_list_sel].ret_val) {
     d82:	f8 01       	movw	r30, r16
     d84:	20 81       	ld	r18, Z
     d86:	31 81       	ldd	r19, Z+1	; 0x01
     d88:	84 85       	ldd	r24, Z+12	; 0x0c
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	fc 01       	movw	r30, r24
     d8e:	ee 0f       	add	r30, r30
     d90:	ff 1f       	adc	r31, r31
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	8e 0f       	add	r24, r30
     da0:	9f 1f       	adc	r25, r31
     da2:	f9 01       	movw	r30, r18
     da4:	e8 0f       	add	r30, r24
     da6:	f9 1f       	adc	r31, r25
     da8:	81 85       	ldd	r24, Z+9	; 0x09
     daa:	82 30       	cpi	r24, 0x02	; 2
     dac:	49 f0       	breq	.+18     	; 0xdc0 <Menu_Task+0x224>
     dae:	83 30       	cpi	r24, 0x03	; 3
     db0:	89 f0       	breq	.+34     	; 0xdd4 <Menu_Task+0x238>
     db2:	81 30       	cpi	r24, 0x01	; 1
     db4:	b9 f4       	brne	.+46     	; 0xde4 <Menu_Task+0x248>
                        case RETURN_TO_SAME_MENU:
                            c_window->state = 2;
     db6:	82 e0       	ldi	r24, 0x02	; 2
     db8:	d8 01       	movw	r26, r16
     dba:	1d 96       	adiw	r26, 0x0d	; 13
                            break;
     dbc:	8c 93       	st	X, r24
                        case RETURN_TO_MAIN_MENU:
                            Menu_Flush(c_window);
     dbe:	12 c0       	rjmp	.+36     	; 0xde4 <Menu_Task+0x248>
     dc0:	c8 01       	movw	r24, r16
     dc2:	e2 de       	rcall	.-572    	; 0xb88 <Menu_Flush>
                            c_window = menu->constwindow;
     dc4:	f6 01       	movw	r30, r12
     dc6:	02 81       	ldd	r16, Z+2	; 0x02
     dc8:	13 81       	ldd	r17, Z+3	; 0x03
                            c_window->state = 2;
     dca:	82 e0       	ldi	r24, 0x02	; 2
     dcc:	d8 01       	movw	r26, r16
     dce:	1d 96       	adiw	r26, 0x0d	; 13
                            break;
     dd0:	8c 93       	st	X, r24
                        case RETURN_TO_DEFAULT_SCREEN:
                            Menu_Flush(c_window);
     dd2:	08 c0       	rjmp	.+16     	; 0xde4 <Menu_Task+0x248>
     dd4:	c8 01       	movw	r24, r16
     dd6:	d8 de       	rcall	.-592    	; 0xb88 <Menu_Flush>
                            c_window = menu->constwindow;
     dd8:	f6 01       	movw	r30, r12
     dda:	02 81       	ldd	r16, Z+2	; 0x02
     ddc:	13 81       	ldd	r17, Z+3	; 0x03
                            c_window->state = 0;
     dde:	d8 01       	movw	r26, r16
     de0:	1d 96       	adiw	r26, 0x0d	; 13
     de2:	1c 92       	st	X, r1
            }
            break;

    }

    return c_window->state;
     de4:	f8 01       	movw	r30, r16
     de6:	85 85       	ldd	r24, Z+13	; 0x0d
}
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	1f 91       	pop	r17
     df6:	0f 91       	pop	r16
     df8:	ff 90       	pop	r15
     dfa:	ef 90       	pop	r14
     dfc:	df 90       	pop	r13
     dfe:	cf 90       	pop	r12
     e00:	08 95       	ret

00000e02 <FindFreeTimer>:

uint8_t Timer_IsStarted(timer_t *value) {


    return (value->start);
}
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	e0 91 48 04 	lds	r30, 0x0448	; 0x800448 <uTmrLst>
     e0a:	f0 91 49 04 	lds	r31, 0x0449	; 0x800449 <uTmrLst+0x1>
     e0e:	1d c0       	rjmp	.+58     	; 0xe4a <FindFreeTimer+0x48>
     e10:	a4 81       	ldd	r26, Z+4	; 0x04
     e12:	b5 81       	ldd	r27, Z+5	; 0x05
     e14:	10 97       	sbiw	r26, 0x00	; 0
     e16:	89 f0       	breq	.+34     	; 0xe3a <FindFreeTimer+0x38>
     e18:	cd 91       	ld	r28, X+
     e1a:	dc 91       	ld	r29, X
     e1c:	11 97       	sbiw	r26, 0x01	; 1
     e1e:	28 81       	ld	r18, Y
     e20:	39 81       	ldd	r19, Y+1	; 0x01
     e22:	01 90       	ld	r0, Z+
     e24:	f0 81       	ld	r31, Z
     e26:	e0 2d       	mov	r30, r0
     e28:	80 81       	ld	r24, Z
     e2a:	91 81       	ldd	r25, Z+1	; 0x01
     e2c:	28 1b       	sub	r18, r24
     e2e:	39 0b       	sbc	r19, r25
     e30:	23 30       	cpi	r18, 0x03	; 3
     e32:	31 05       	cpc	r19, r1
     e34:	48 f0       	brcs	.+18     	; 0xe48 <FindFreeTimer+0x46>
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	0c c0       	rjmp	.+24     	; 0xe52 <FindFreeTimer+0x50>
     e3a:	01 90       	ld	r0, Z+
     e3c:	f0 81       	ld	r31, Z
     e3e:	e0 2d       	mov	r30, r0
     e40:	80 81       	ld	r24, Z
     e42:	91 81       	ldd	r25, Z+1	; 0x01
     e44:	01 96       	adiw	r24, 0x01	; 1
     e46:	05 c0       	rjmp	.+10     	; 0xe52 <FindFreeTimer+0x50>
     e48:	fd 01       	movw	r30, r26
     e4a:	30 97       	sbiw	r30, 0x00	; 0
     e4c:	09 f7       	brne	.-62     	; 0xe10 <FindFreeTimer+0xe>
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	08 95       	ret

00000e58 <Timer_Add>:
     e58:	0f 93       	push	r16
     e5a:	1f 93       	push	r17
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	8c 01       	movw	r16, r24
     e62:	cf df       	rcall	.-98     	; 0xe02 <FindFreeTimer>
     e64:	f8 01       	movw	r30, r16
     e66:	91 83       	std	Z+1, r25	; 0x01
     e68:	80 83       	st	Z, r24
     e6a:	84 81       	ldd	r24, Z+4	; 0x04
     e6c:	8b 7f       	andi	r24, 0xFB	; 251
     e6e:	8d 7f       	andi	r24, 0xFD	; 253
     e70:	84 83       	std	Z+4, r24	; 0x04
     e72:	c0 91 48 04 	lds	r28, 0x0448	; 0x800448 <uTmrLst>
     e76:	d0 91 49 04 	lds	r29, 0x0449	; 0x800449 <uTmrLst+0x1>
     e7a:	86 e0       	ldi	r24, 0x06	; 6
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	22 d2       	rcall	.+1092   	; 0x12c4 <malloc>
     e80:	dc 01       	movw	r26, r24
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	49 f1       	breq	.+82     	; 0xed8 <Timer_Add+0x80>
     e86:	11 96       	adiw	r26, 0x01	; 1
     e88:	1c 93       	st	X, r17
     e8a:	0e 93       	st	-X, r16
     e8c:	13 96       	adiw	r26, 0x03	; 3
     e8e:	1c 92       	st	X, r1
     e90:	1e 92       	st	-X, r1
     e92:	12 97       	sbiw	r26, 0x02	; 2
     e94:	15 96       	adiw	r26, 0x05	; 5
     e96:	1c 92       	st	X, r1
     e98:	1e 92       	st	-X, r1
     e9a:	14 97       	sbiw	r26, 0x04	; 4
     e9c:	20 97       	sbiw	r28, 0x00	; 0
     e9e:	41 f4       	brne	.+16     	; 0xeb0 <Timer_Add+0x58>
     ea0:	90 93 49 04 	sts	0x0449, r25	; 0x800449 <uTmrLst+0x1>
     ea4:	80 93 48 04 	sts	0x0448, r24	; 0x800448 <uTmrLst>
     ea8:	17 c0       	rjmp	.+46     	; 0xed8 <Timer_Add+0x80>
     eaa:	0c 80       	ldd	r0, Y+4	; 0x04
     eac:	dd 81       	ldd	r29, Y+5	; 0x05
     eae:	c0 2d       	mov	r28, r0
     eb0:	e8 81       	ld	r30, Y
     eb2:	f9 81       	ldd	r31, Y+1	; 0x01
     eb4:	40 81       	ld	r20, Z
     eb6:	51 81       	ldd	r21, Z+1	; 0x01
     eb8:	f8 01       	movw	r30, r16
     eba:	20 81       	ld	r18, Z
     ebc:	31 81       	ldd	r19, Z+1	; 0x01
     ebe:	21 50       	subi	r18, 0x01	; 1
     ec0:	31 09       	sbc	r19, r1
     ec2:	42 17       	cp	r20, r18
     ec4:	53 07       	cpc	r21, r19
     ec6:	89 f7       	brne	.-30     	; 0xeaa <Timer_Add+0x52>
     ec8:	8c 81       	ldd	r24, Y+4	; 0x04
     eca:	9d 81       	ldd	r25, Y+5	; 0x05
     ecc:	15 96       	adiw	r26, 0x05	; 5
     ece:	9c 93       	st	X, r25
     ed0:	8e 93       	st	-X, r24
     ed2:	14 97       	sbiw	r26, 0x04	; 4
     ed4:	bd 83       	std	Y+5, r27	; 0x05
     ed6:	ac 83       	std	Y+4, r26	; 0x04
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	08 95       	ret

00000ee2 <Timer_Start>:
     ee2:	8f 92       	push	r8
     ee4:	9f 92       	push	r9
     ee6:	af 92       	push	r10
     ee8:	bf 92       	push	r11
     eea:	df 92       	push	r13
     eec:	ef 92       	push	r14
     eee:	ff 92       	push	r15
     ef0:	0f 93       	push	r16
     ef2:	1f 93       	push	r17
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	7c 01       	movw	r14, r24
     efa:	4a 01       	movw	r8, r20
     efc:	5b 01       	movw	r10, r22
     efe:	d2 2e       	mov	r13, r18
     f00:	fc 01       	movw	r30, r24
     f02:	80 81       	ld	r24, Z
     f04:	91 81       	ldd	r25, Z+1	; 0x01
     f06:	89 2b       	or	r24, r25
     f08:	11 f4       	brne	.+4      	; 0xf0e <Timer_Start+0x2c>
     f0a:	c7 01       	movw	r24, r14
     f0c:	a5 df       	rcall	.-182    	; 0xe58 <Timer_Add>
     f0e:	c0 91 48 04 	lds	r28, 0x0448	; 0x800448 <uTmrLst>
     f12:	d0 91 49 04 	lds	r29, 0x0449	; 0x800449 <uTmrLst+0x1>
     f16:	33 c0       	rjmp	.+102    	; 0xf7e <Timer_Start+0x9c>
     f18:	08 81       	ld	r16, Y
     f1a:	19 81       	ldd	r17, Y+1	; 0x01
     f1c:	f8 01       	movw	r30, r16
     f1e:	20 81       	ld	r18, Z
     f20:	31 81       	ldd	r19, Z+1	; 0x01
     f22:	f7 01       	movw	r30, r14
     f24:	80 81       	ld	r24, Z
     f26:	91 81       	ldd	r25, Z+1	; 0x01
     f28:	28 17       	cp	r18, r24
     f2a:	39 07       	cpc	r19, r25
     f2c:	29 f5       	brne	.+74     	; 0xf78 <Timer_Start+0x96>
     f2e:	c5 01       	movw	r24, r10
     f30:	b4 01       	movw	r22, r8
     f32:	22 d1       	rcall	.+580    	; 0x1178 <__fixunssfsi>
     f34:	f8 01       	movw	r30, r16
     f36:	73 83       	std	Z+3, r23	; 0x03
     f38:	62 83       	std	Z+2, r22	; 0x02
     f3a:	e8 81       	ld	r30, Y
     f3c:	f9 81       	ldd	r31, Y+1	; 0x01
     f3e:	84 81       	ldd	r24, Z+4	; 0x04
     f40:	d0 fa       	bst	r13, 0
     f42:	80 f9       	bld	r24, 0
     f44:	84 83       	std	Z+4, r24	; 0x04
     f46:	e8 81       	ld	r30, Y
     f48:	f9 81       	ldd	r31, Y+1	; 0x01
     f4a:	84 81       	ldd	r24, Z+4	; 0x04
     f4c:	84 60       	ori	r24, 0x04	; 4
     f4e:	84 83       	std	Z+4, r24	; 0x04
     f50:	e8 81       	ld	r30, Y
     f52:	f9 81       	ldd	r31, Y+1	; 0x01
     f54:	82 81       	ldd	r24, Z+2	; 0x02
     f56:	93 81       	ldd	r25, Z+3	; 0x03
     f58:	89 2b       	or	r24, r25
     f5a:	21 f4       	brne	.+8      	; 0xf64 <Timer_Start+0x82>
     f5c:	84 81       	ldd	r24, Z+4	; 0x04
     f5e:	82 60       	ori	r24, 0x02	; 2
     f60:	84 83       	std	Z+4, r24	; 0x04
     f62:	03 c0       	rjmp	.+6      	; 0xf6a <Timer_Start+0x88>
     f64:	84 81       	ldd	r24, Z+4	; 0x04
     f66:	8d 7f       	andi	r24, 0xFD	; 253
     f68:	84 83       	std	Z+4, r24	; 0x04
     f6a:	e8 81       	ld	r30, Y
     f6c:	f9 81       	ldd	r31, Y+1	; 0x01
     f6e:	82 81       	ldd	r24, Z+2	; 0x02
     f70:	93 81       	ldd	r25, Z+3	; 0x03
     f72:	9b 83       	std	Y+3, r25	; 0x03
     f74:	8a 83       	std	Y+2, r24	; 0x02
     f76:	05 c0       	rjmp	.+10     	; 0xf82 <Timer_Start+0xa0>
     f78:	0c 80       	ldd	r0, Y+4	; 0x04
     f7a:	dd 81       	ldd	r29, Y+5	; 0x05
     f7c:	c0 2d       	mov	r28, r0
     f7e:	20 97       	sbiw	r28, 0x00	; 0
     f80:	59 f6       	brne	.-106    	; 0xf18 <Timer_Start+0x36>
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	1f 91       	pop	r17
     f88:	0f 91       	pop	r16
     f8a:	ff 90       	pop	r15
     f8c:	ef 90       	pop	r14
     f8e:	df 90       	pop	r13
     f90:	bf 90       	pop	r11
     f92:	af 90       	pop	r10
     f94:	9f 90       	pop	r9
     f96:	8f 90       	pop	r8
     f98:	08 95       	ret

00000f9a <Timer_Stop>:
     f9a:	fc 01       	movw	r30, r24
     f9c:	94 81       	ldd	r25, Z+4	; 0x04
     f9e:	9b 7f       	andi	r25, 0xFB	; 251
     fa0:	9d 7f       	andi	r25, 0xFD	; 253
     fa2:	94 83       	std	Z+4, r25	; 0x04
     fa4:	08 95       	ret

00000fa6 <Timer_IsCompleted>:

uint8_t Timer_IsCompleted(timer_t *value) {
     fa6:	fc 01       	movw	r30, r24

    if (value->completed) {
     fa8:	94 81       	ldd	r25, Z+4	; 0x04
     faa:	89 2f       	mov	r24, r25
     fac:	82 70       	andi	r24, 0x02	; 2
     fae:	91 ff       	sbrs	r25, 1
     fb0:	04 c0       	rjmp	.+8      	; 0xfba <Timer_IsCompleted+0x14>
        value->completed = 0;
     fb2:	89 2f       	mov	r24, r25
     fb4:	8d 7f       	andi	r24, 0xFD	; 253
     fb6:	84 83       	std	Z+4, r24	; 0x04
        return (1);
     fb8:	81 e0       	ldi	r24, 0x01	; 1
    }
    return 0;
}
     fba:	08 95       	ret

00000fbc <Timer_TickEvent>:
void Timer_TickEvent(void) {

    timer_list_t *pTimer;

    /* Update the timers */
    pTimer = uTmrLst;
     fbc:	e0 91 48 04 	lds	r30, 0x0448	; 0x800448 <uTmrLst>
     fc0:	f0 91 49 04 	lds	r31, 0x0449	; 0x800449 <uTmrLst+0x1>

    while (pTimer != 0) {
     fc4:	2c c0       	rjmp	.+88     	; 0x101e <__DATA_REGION_LENGTH__+0x1e>

        if (pTimer->rp != 0) {
     fc6:	82 81       	ldd	r24, Z+2	; 0x02
     fc8:	93 81       	ldd	r25, Z+3	; 0x03
     fca:	00 97       	sbiw	r24, 0x00	; 0
     fcc:	29 f1       	breq	.+74     	; 0x1018 <__DATA_REGION_LENGTH__+0x18>

            if (pTimer->ut->start == 1) {
     fce:	a0 81       	ld	r26, Z
     fd0:	b1 81       	ldd	r27, Z+1	; 0x01
     fd2:	14 96       	adiw	r26, 0x04	; 4
     fd4:	2c 91       	ld	r18, X
     fd6:	14 97       	sbiw	r26, 0x04	; 4
     fd8:	22 ff       	sbrs	r18, 2
     fda:	03 c0       	rjmp	.+6      	; 0xfe2 <Timer_TickEvent+0x26>
                /* Decrement the timer period */
                pTimer->rp--;
     fdc:	01 97       	sbiw	r24, 0x01	; 1
     fde:	93 83       	std	Z+3, r25	; 0x03
     fe0:	82 83       	std	Z+2, r24	; 0x02
            }

            /* Check if the timer has reached zero */
            if (pTimer->rp == 0) {
     fe2:	82 81       	ldd	r24, Z+2	; 0x02
     fe4:	93 81       	ldd	r25, Z+3	; 0x03
     fe6:	89 2b       	or	r24, r25
     fe8:	b9 f4       	brne	.+46     	; 0x1018 <__DATA_REGION_LENGTH__+0x18>
                if (pTimer->ut->action == TIMER_STOP_AFTER_COMPLETED) {
     fea:	14 96       	adiw	r26, 0x04	; 4
     fec:	8c 91       	ld	r24, X
     fee:	14 97       	sbiw	r26, 0x04	; 4
     ff0:	80 fd       	sbrc	r24, 0
     ff2:	04 c0       	rjmp	.+8      	; 0xffc <Timer_TickEvent+0x40>
                    pTimer->ut->start = 0;
     ff4:	8b 7f       	andi	r24, 0xFB	; 251
     ff6:	14 96       	adiw	r26, 0x04	; 4
     ff8:	8c 93       	st	X, r24
     ffa:	06 c0       	rjmp	.+12     	; 0x1008 <__DATA_REGION_LENGTH__+0x8>
                } else
                    pTimer->rp = pTimer->ut->period;
     ffc:	12 96       	adiw	r26, 0x02	; 2
     ffe:	8d 91       	ld	r24, X+
    1000:	9c 91       	ld	r25, X
    1002:	13 97       	sbiw	r26, 0x03	; 3
    1004:	93 83       	std	Z+3, r25	; 0x03
    1006:	82 83       	std	Z+2, r24	; 0x02
                pTimer->ut->completed = 1;
    1008:	a0 81       	ld	r26, Z
    100a:	b1 81       	ldd	r27, Z+1	; 0x01
    100c:	14 96       	adiw	r26, 0x04	; 4
    100e:	8c 91       	ld	r24, X
    1010:	14 97       	sbiw	r26, 0x04	; 4
    1012:	82 60       	ori	r24, 0x02	; 2
    1014:	14 96       	adiw	r26, 0x04	; 4
    1016:	8c 93       	st	X, r24
            }
        }
        /* Move to the next timer in the list */
        pTimer = pTimer->next;
    1018:	04 80       	ldd	r0, Z+4	; 0x04
    101a:	f5 81       	ldd	r31, Z+5	; 0x05
    101c:	e0 2d       	mov	r30, r0
    timer_list_t *pTimer;

    /* Update the timers */
    pTimer = uTmrLst;

    while (pTimer != 0) {
    101e:	30 97       	sbiw	r30, 0x00	; 0
    1020:	91 f6       	brne	.-92     	; 0xfc6 <Timer_TickEvent+0xa>
            }
        }
        /* Move to the next timer in the list */
        pTimer = pTimer->next;
    }
}
    1022:	08 95       	ret

00001024 <__vector_16>:

#include "timer.h"

static timer_list_t *uTmrLst;
#define TICKS_VAL(R_TIME,PRESCALLER) (uint8_t)(255 - (8000000UL*R_TIME) / PRESCALLER)
ISR(TIMER0_OVF_vect) {
    1024:	1f 92       	push	r1
    1026:	0f 92       	push	r0
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	0f 92       	push	r0
    102c:	11 24       	eor	r1, r1
    102e:	0b b6       	in	r0, 0x3b	; 59
    1030:	0f 92       	push	r0
    1032:	2f 93       	push	r18
    1034:	3f 93       	push	r19
    1036:	4f 93       	push	r20
    1038:	5f 93       	push	r21
    103a:	6f 93       	push	r22
    103c:	7f 93       	push	r23
    103e:	8f 93       	push	r24
    1040:	9f 93       	push	r25
    1042:	af 93       	push	r26
    1044:	bf 93       	push	r27
    1046:	ef 93       	push	r30
    1048:	ff 93       	push	r31

    Timer_TickEvent();
    104a:	b8 df       	rcall	.-144    	; 0xfbc <Timer_TickEvent>
    TCNT0 = TICKS_VAL(0.001, 1024);
    104c:	87 ef       	ldi	r24, 0xF7	; 247
    104e:	82 bf       	out	0x32, r24	; 50
    TIFR &= ~(1 << TOV0);
    1050:	86 b7       	in	r24, 0x36	; 54
    1052:	8e 7f       	andi	r24, 0xFE	; 254
    1054:	86 bf       	out	0x36, r24	; 54
}
    1056:	ff 91       	pop	r31
    1058:	ef 91       	pop	r30
    105a:	bf 91       	pop	r27
    105c:	af 91       	pop	r26
    105e:	9f 91       	pop	r25
    1060:	8f 91       	pop	r24
    1062:	7f 91       	pop	r23
    1064:	6f 91       	pop	r22
    1066:	5f 91       	pop	r21
    1068:	4f 91       	pop	r20
    106a:	3f 91       	pop	r19
    106c:	2f 91       	pop	r18
    106e:	0f 90       	pop	r0
    1070:	0b be       	out	0x3b, r0	; 59
    1072:	0f 90       	pop	r0
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	0f 90       	pop	r0
    1078:	1f 90       	pop	r1
    107a:	18 95       	reti

0000107c <uTmr_Init>:
    }
}

void uTmr_Init() {

    sei();
    107c:	78 94       	sei
    TIMSK = (1 << TOIE0);
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	87 bf       	out	0x37, r24	; 55
    TCNT0 = TICKS_VAL(0.001, 1024);
    1082:	87 ef       	ldi	r24, 0xF7	; 247
    1084:	82 bf       	out	0x32, r24	; 50
    TCCR0 = 5;
    1086:	85 e0       	ldi	r24, 0x05	; 5
    1088:	83 bf       	out	0x33, r24	; 51
    108a:	08 95       	ret

0000108c <__vector_18>:
#define MYUBRR(BAUD_RATE) (unsigned int)(FOSC/16/BAUD_RATE-1)

unsigned char uartRxCharBuffer[64], uart_key;
unsigned short uartRxCharBufferSize;

 ISR(USART0_RX_vect) {
    108c:	1f 92       	push	r1
    108e:	0f 92       	push	r0
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	0f 92       	push	r0
    1094:	11 24       	eor	r1, r1
    1096:	0b b6       	in	r0, 0x3b	; 59
    1098:	0f 92       	push	r0
    109a:	2f 93       	push	r18
    109c:	3f 93       	push	r19
    109e:	8f 93       	push	r24
    10a0:	9f 93       	push	r25
    10a2:	ef 93       	push	r30
    10a4:	ff 93       	push	r31

    uartRxCharBuffer[uartRxCharBufferSize] = UDR0;
    10a6:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <uartRxCharBufferSize>
    10aa:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <uartRxCharBufferSize+0x1>
    10ae:	2c b1       	in	r18, 0x0c	; 12
    10b0:	fc 01       	movw	r30, r24
    10b2:	ea 52       	subi	r30, 0x2A	; 42
    10b4:	fb 4f       	sbci	r31, 0xFB	; 251
    10b6:	20 83       	st	Z, r18
    if (uartRxCharBuffer[uartRxCharBufferSize] == '\r')
    10b8:	2d 30       	cpi	r18, 0x0D	; 13
    10ba:	31 f4       	brne	.+12     	; 0x10c8 <__vector_18+0x3c>

        uart_key = uartRxCharBuffer[uartRxCharBufferSize - 1];
    10bc:	fc 01       	movw	r30, r24
    10be:	eb 52       	subi	r30, 0x2B	; 43
    10c0:	fb 4f       	sbci	r31, 0xFB	; 251
    10c2:	20 81       	ld	r18, Z
    10c4:	20 93 d3 04 	sts	0x04D3, r18	; 0x8004d3 <uart_key>

        if (uartRxCharBufferSize++ > 63)
    10c8:	9c 01       	movw	r18, r24
    10ca:	2f 5f       	subi	r18, 0xFF	; 255
    10cc:	3f 4f       	sbci	r19, 0xFF	; 255
    10ce:	30 93 d5 04 	sts	0x04D5, r19	; 0x8004d5 <uartRxCharBufferSize+0x1>
    10d2:	20 93 d4 04 	sts	0x04D4, r18	; 0x8004d4 <uartRxCharBufferSize>
    10d6:	80 34       	cpi	r24, 0x40	; 64
    10d8:	91 05       	cpc	r25, r1
    10da:	20 f0       	brcs	.+8      	; 0x10e4 <__vector_18+0x58>
        uartRxCharBufferSize = 0;
    10dc:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <uartRxCharBufferSize+0x1>
    10e0:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <uartRxCharBufferSize>
}
    10e4:	ff 91       	pop	r31
    10e6:	ef 91       	pop	r30
    10e8:	9f 91       	pop	r25
    10ea:	8f 91       	pop	r24
    10ec:	3f 91       	pop	r19
    10ee:	2f 91       	pop	r18
    10f0:	0f 90       	pop	r0
    10f2:	0b be       	out	0x3b, r0	; 59
    10f4:	0f 90       	pop	r0
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	0f 90       	pop	r0
    10fa:	1f 90       	pop	r1
    10fc:	18 95       	reti

000010fe <Uart_GetKey>:

unsigned char Uart_GetKey() {

    unsigned char key = uart_key;
    10fe:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <uart_key>
    uart_key = 0;
    1102:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <uart_key>
    return key;
}
    1106:	08 95       	ret

00001108 <Uart_Initialize>:
void Uart_Initialize(unsigned int baud) {
    1108:	bc 01       	movw	r22, r24

    unsigned int ubrr = MYUBRR(baud);
    110a:	84 e2       	ldi	r24, 0x24	; 36
    110c:	94 ef       	ldi	r25, 0xF4	; 244
    110e:	c6 d0       	rcall	.+396    	; 0x129c <__udivmodhi4>
    1110:	61 50       	subi	r22, 0x01	; 1
    1112:	71 09       	sbc	r23, r1

    UCSR0B = (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);
    1114:	88 e9       	ldi	r24, 0x98	; 152
    1116:	8a b9       	out	0x0a, r24	; 10

    UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
    1118:	86 e0       	ldi	r24, 0x06	; 6
    111a:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>

    UBRR0L = (unsigned char) ubrr;
    111e:	69 b9       	out	0x09, r22	; 9

    UBRR0H = (unsigned char) ubrr >> 8;
    1120:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    1124:	08 95       	ret

00001126 <Uart_WriteChar>:
}

void Uart_WriteChar(uint8_t chr) {

    while (!(UCSR0A & (1 << UDRE)));
    1126:	5d 9b       	sbis	0x0b, 5	; 11
    1128:	fe cf       	rjmp	.-4      	; 0x1126 <Uart_WriteChar>
    UDR0 = chr;
    112a:	8c b9       	out	0x0c, r24	; 12
    112c:	08 95       	ret

0000112e <Uart_WriteBuffer>:
}

void Uart_WriteBuffer(const char *buffer, uint16_t length) {
    112e:	ef 92       	push	r14
    1130:	ff 92       	push	r15
    1132:	0f 93       	push	r16
    1134:	1f 93       	push	r17
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	7c 01       	movw	r14, r24
    113c:	8b 01       	movw	r16, r22

    uint16_t count = 0;
    113e:	c0 e0       	ldi	r28, 0x00	; 0
    1140:	d0 e0       	ldi	r29, 0x00	; 0

    while (count < length) {
    1142:	06 c0       	rjmp	.+12     	; 0x1150 <Uart_WriteBuffer+0x22>
        Uart_WriteChar(*(buffer + count));
    1144:	f7 01       	movw	r30, r14
    1146:	ec 0f       	add	r30, r28
    1148:	fd 1f       	adc	r31, r29
    114a:	80 81       	ld	r24, Z
    114c:	ec df       	rcall	.-40     	; 0x1126 <Uart_WriteChar>
        count++;
    114e:	21 96       	adiw	r28, 0x01	; 1

void Uart_WriteBuffer(const char *buffer, uint16_t length) {

    uint16_t count = 0;

    while (count < length) {
    1150:	c0 17       	cp	r28, r16
    1152:	d1 07       	cpc	r29, r17
    1154:	b8 f3       	brcs	.-18     	; 0x1144 <Uart_WriteBuffer+0x16>
        Uart_WriteChar(*(buffer + count));
        count++;
    }
}
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	1f 91       	pop	r17
    115c:	0f 91       	pop	r16
    115e:	ff 90       	pop	r15
    1160:	ef 90       	pop	r14
    1162:	08 95       	ret

00001164 <Uart_WriteStr>:

void Uart_WriteStr(const char *buffer) {
    uint16_t len = strlen(buffer);
    1164:	fc 01       	movw	r30, r24
    1166:	01 90       	ld	r0, Z+
    1168:	00 20       	and	r0, r0
    116a:	e9 f7       	brne	.-6      	; 0x1166 <Uart_WriteStr+0x2>
    116c:	31 97       	sbiw	r30, 0x01	; 1
    116e:	bf 01       	movw	r22, r30
    1170:	68 1b       	sub	r22, r24
    1172:	79 0b       	sbc	r23, r25
    Uart_WriteBuffer(buffer, len);
    1174:	dc cf       	rjmp	.-72     	; 0x112e <Uart_WriteBuffer>
    1176:	08 95       	ret

00001178 <__fixunssfsi>:
    1178:	70 d0       	rcall	.+224    	; 0x125a <__fp_splitA>
    117a:	88 f0       	brcs	.+34     	; 0x119e <__fixunssfsi+0x26>
    117c:	9f 57       	subi	r25, 0x7F	; 127
    117e:	90 f0       	brcs	.+36     	; 0x11a4 <__fixunssfsi+0x2c>
    1180:	b9 2f       	mov	r27, r25
    1182:	99 27       	eor	r25, r25
    1184:	b7 51       	subi	r27, 0x17	; 23
    1186:	a0 f0       	brcs	.+40     	; 0x11b0 <__fixunssfsi+0x38>
    1188:	d1 f0       	breq	.+52     	; 0x11be <__fixunssfsi+0x46>
    118a:	66 0f       	add	r22, r22
    118c:	77 1f       	adc	r23, r23
    118e:	88 1f       	adc	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	1a f0       	brmi	.+6      	; 0x119a <__fixunssfsi+0x22>
    1194:	ba 95       	dec	r27
    1196:	c9 f7       	brne	.-14     	; 0x118a <__fixunssfsi+0x12>
    1198:	12 c0       	rjmp	.+36     	; 0x11be <__fixunssfsi+0x46>
    119a:	b1 30       	cpi	r27, 0x01	; 1
    119c:	81 f0       	breq	.+32     	; 0x11be <__fixunssfsi+0x46>
    119e:	77 d0       	rcall	.+238    	; 0x128e <__fp_zero>
    11a0:	b1 e0       	ldi	r27, 0x01	; 1
    11a2:	08 95       	ret
    11a4:	74 c0       	rjmp	.+232    	; 0x128e <__fp_zero>
    11a6:	67 2f       	mov	r22, r23
    11a8:	78 2f       	mov	r23, r24
    11aa:	88 27       	eor	r24, r24
    11ac:	b8 5f       	subi	r27, 0xF8	; 248
    11ae:	39 f0       	breq	.+14     	; 0x11be <__fixunssfsi+0x46>
    11b0:	b9 3f       	cpi	r27, 0xF9	; 249
    11b2:	cc f3       	brlt	.-14     	; 0x11a6 <__fixunssfsi+0x2e>
    11b4:	86 95       	lsr	r24
    11b6:	77 95       	ror	r23
    11b8:	67 95       	ror	r22
    11ba:	b3 95       	inc	r27
    11bc:	d9 f7       	brne	.-10     	; 0x11b4 <__fixunssfsi+0x3c>
    11be:	3e f4       	brtc	.+14     	; 0x11ce <__fixunssfsi+0x56>
    11c0:	90 95       	com	r25
    11c2:	80 95       	com	r24
    11c4:	70 95       	com	r23
    11c6:	61 95       	neg	r22
    11c8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ca:	8f 4f       	sbci	r24, 0xFF	; 255
    11cc:	9f 4f       	sbci	r25, 0xFF	; 255
    11ce:	08 95       	ret

000011d0 <__floatunsisf>:
    11d0:	e8 94       	clt
    11d2:	09 c0       	rjmp	.+18     	; 0x11e6 <__floatsisf+0x12>

000011d4 <__floatsisf>:
    11d4:	97 fb       	bst	r25, 7
    11d6:	3e f4       	brtc	.+14     	; 0x11e6 <__floatsisf+0x12>
    11d8:	90 95       	com	r25
    11da:	80 95       	com	r24
    11dc:	70 95       	com	r23
    11de:	61 95       	neg	r22
    11e0:	7f 4f       	sbci	r23, 0xFF	; 255
    11e2:	8f 4f       	sbci	r24, 0xFF	; 255
    11e4:	9f 4f       	sbci	r25, 0xFF	; 255
    11e6:	99 23       	and	r25, r25
    11e8:	a9 f0       	breq	.+42     	; 0x1214 <__floatsisf+0x40>
    11ea:	f9 2f       	mov	r31, r25
    11ec:	96 e9       	ldi	r25, 0x96	; 150
    11ee:	bb 27       	eor	r27, r27
    11f0:	93 95       	inc	r25
    11f2:	f6 95       	lsr	r31
    11f4:	87 95       	ror	r24
    11f6:	77 95       	ror	r23
    11f8:	67 95       	ror	r22
    11fa:	b7 95       	ror	r27
    11fc:	f1 11       	cpse	r31, r1
    11fe:	f8 cf       	rjmp	.-16     	; 0x11f0 <__floatsisf+0x1c>
    1200:	fa f4       	brpl	.+62     	; 0x1240 <__floatsisf+0x6c>
    1202:	bb 0f       	add	r27, r27
    1204:	11 f4       	brne	.+4      	; 0x120a <__floatsisf+0x36>
    1206:	60 ff       	sbrs	r22, 0
    1208:	1b c0       	rjmp	.+54     	; 0x1240 <__floatsisf+0x6c>
    120a:	6f 5f       	subi	r22, 0xFF	; 255
    120c:	7f 4f       	sbci	r23, 0xFF	; 255
    120e:	8f 4f       	sbci	r24, 0xFF	; 255
    1210:	9f 4f       	sbci	r25, 0xFF	; 255
    1212:	16 c0       	rjmp	.+44     	; 0x1240 <__floatsisf+0x6c>
    1214:	88 23       	and	r24, r24
    1216:	11 f0       	breq	.+4      	; 0x121c <__floatsisf+0x48>
    1218:	96 e9       	ldi	r25, 0x96	; 150
    121a:	11 c0       	rjmp	.+34     	; 0x123e <__floatsisf+0x6a>
    121c:	77 23       	and	r23, r23
    121e:	21 f0       	breq	.+8      	; 0x1228 <__floatsisf+0x54>
    1220:	9e e8       	ldi	r25, 0x8E	; 142
    1222:	87 2f       	mov	r24, r23
    1224:	76 2f       	mov	r23, r22
    1226:	05 c0       	rjmp	.+10     	; 0x1232 <__floatsisf+0x5e>
    1228:	66 23       	and	r22, r22
    122a:	71 f0       	breq	.+28     	; 0x1248 <__floatsisf+0x74>
    122c:	96 e8       	ldi	r25, 0x86	; 134
    122e:	86 2f       	mov	r24, r22
    1230:	70 e0       	ldi	r23, 0x00	; 0
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	2a f0       	brmi	.+10     	; 0x1240 <__floatsisf+0x6c>
    1236:	9a 95       	dec	r25
    1238:	66 0f       	add	r22, r22
    123a:	77 1f       	adc	r23, r23
    123c:	88 1f       	adc	r24, r24
    123e:	da f7       	brpl	.-10     	; 0x1236 <__floatsisf+0x62>
    1240:	88 0f       	add	r24, r24
    1242:	96 95       	lsr	r25
    1244:	87 95       	ror	r24
    1246:	97 f9       	bld	r25, 7
    1248:	08 95       	ret

0000124a <__fp_split3>:
    124a:	57 fd       	sbrc	r21, 7
    124c:	90 58       	subi	r25, 0x80	; 128
    124e:	44 0f       	add	r20, r20
    1250:	55 1f       	adc	r21, r21
    1252:	59 f0       	breq	.+22     	; 0x126a <__fp_splitA+0x10>
    1254:	5f 3f       	cpi	r21, 0xFF	; 255
    1256:	71 f0       	breq	.+28     	; 0x1274 <__fp_splitA+0x1a>
    1258:	47 95       	ror	r20

0000125a <__fp_splitA>:
    125a:	88 0f       	add	r24, r24
    125c:	97 fb       	bst	r25, 7
    125e:	99 1f       	adc	r25, r25
    1260:	61 f0       	breq	.+24     	; 0x127a <__fp_splitA+0x20>
    1262:	9f 3f       	cpi	r25, 0xFF	; 255
    1264:	79 f0       	breq	.+30     	; 0x1284 <__fp_splitA+0x2a>
    1266:	87 95       	ror	r24
    1268:	08 95       	ret
    126a:	12 16       	cp	r1, r18
    126c:	13 06       	cpc	r1, r19
    126e:	14 06       	cpc	r1, r20
    1270:	55 1f       	adc	r21, r21
    1272:	f2 cf       	rjmp	.-28     	; 0x1258 <__fp_split3+0xe>
    1274:	46 95       	lsr	r20
    1276:	f1 df       	rcall	.-30     	; 0x125a <__fp_splitA>
    1278:	08 c0       	rjmp	.+16     	; 0x128a <__fp_splitA+0x30>
    127a:	16 16       	cp	r1, r22
    127c:	17 06       	cpc	r1, r23
    127e:	18 06       	cpc	r1, r24
    1280:	99 1f       	adc	r25, r25
    1282:	f1 cf       	rjmp	.-30     	; 0x1266 <__fp_splitA+0xc>
    1284:	86 95       	lsr	r24
    1286:	71 05       	cpc	r23, r1
    1288:	61 05       	cpc	r22, r1
    128a:	08 94       	sec
    128c:	08 95       	ret

0000128e <__fp_zero>:
    128e:	e8 94       	clt

00001290 <__fp_szero>:
    1290:	bb 27       	eor	r27, r27
    1292:	66 27       	eor	r22, r22
    1294:	77 27       	eor	r23, r23
    1296:	cb 01       	movw	r24, r22
    1298:	97 f9       	bld	r25, 7
    129a:	08 95       	ret

0000129c <__udivmodhi4>:
    129c:	aa 1b       	sub	r26, r26
    129e:	bb 1b       	sub	r27, r27
    12a0:	51 e1       	ldi	r21, 0x11	; 17
    12a2:	07 c0       	rjmp	.+14     	; 0x12b2 <__udivmodhi4_ep>

000012a4 <__udivmodhi4_loop>:
    12a4:	aa 1f       	adc	r26, r26
    12a6:	bb 1f       	adc	r27, r27
    12a8:	a6 17       	cp	r26, r22
    12aa:	b7 07       	cpc	r27, r23
    12ac:	10 f0       	brcs	.+4      	; 0x12b2 <__udivmodhi4_ep>
    12ae:	a6 1b       	sub	r26, r22
    12b0:	b7 0b       	sbc	r27, r23

000012b2 <__udivmodhi4_ep>:
    12b2:	88 1f       	adc	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	5a 95       	dec	r21
    12b8:	a9 f7       	brne	.-22     	; 0x12a4 <__udivmodhi4_loop>
    12ba:	80 95       	com	r24
    12bc:	90 95       	com	r25
    12be:	bc 01       	movw	r22, r24
    12c0:	cd 01       	movw	r24, r26
    12c2:	08 95       	ret

000012c4 <malloc>:
    12c4:	0f 93       	push	r16
    12c6:	1f 93       	push	r17
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
    12cc:	82 30       	cpi	r24, 0x02	; 2
    12ce:	91 05       	cpc	r25, r1
    12d0:	10 f4       	brcc	.+4      	; 0x12d6 <malloc+0x12>
    12d2:	82 e0       	ldi	r24, 0x02	; 2
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	e0 91 18 05 	lds	r30, 0x0518	; 0x800518 <__flp>
    12da:	f0 91 19 05 	lds	r31, 0x0519	; 0x800519 <__flp+0x1>
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	a0 e0       	ldi	r26, 0x00	; 0
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	30 97       	sbiw	r30, 0x00	; 0
    12e8:	19 f1       	breq	.+70     	; 0x1330 <malloc+0x6c>
    12ea:	40 81       	ld	r20, Z
    12ec:	51 81       	ldd	r21, Z+1	; 0x01
    12ee:	02 81       	ldd	r16, Z+2	; 0x02
    12f0:	13 81       	ldd	r17, Z+3	; 0x03
    12f2:	48 17       	cp	r20, r24
    12f4:	59 07       	cpc	r21, r25
    12f6:	c8 f0       	brcs	.+50     	; 0x132a <malloc+0x66>
    12f8:	84 17       	cp	r24, r20
    12fa:	95 07       	cpc	r25, r21
    12fc:	69 f4       	brne	.+26     	; 0x1318 <malloc+0x54>
    12fe:	10 97       	sbiw	r26, 0x00	; 0
    1300:	31 f0       	breq	.+12     	; 0x130e <malloc+0x4a>
    1302:	12 96       	adiw	r26, 0x02	; 2
    1304:	0c 93       	st	X, r16
    1306:	12 97       	sbiw	r26, 0x02	; 2
    1308:	13 96       	adiw	r26, 0x03	; 3
    130a:	1c 93       	st	X, r17
    130c:	27 c0       	rjmp	.+78     	; 0x135c <malloc+0x98>
    130e:	00 93 18 05 	sts	0x0518, r16	; 0x800518 <__flp>
    1312:	10 93 19 05 	sts	0x0519, r17	; 0x800519 <__flp+0x1>
    1316:	22 c0       	rjmp	.+68     	; 0x135c <malloc+0x98>
    1318:	21 15       	cp	r18, r1
    131a:	31 05       	cpc	r19, r1
    131c:	19 f0       	breq	.+6      	; 0x1324 <malloc+0x60>
    131e:	42 17       	cp	r20, r18
    1320:	53 07       	cpc	r21, r19
    1322:	18 f4       	brcc	.+6      	; 0x132a <malloc+0x66>
    1324:	9a 01       	movw	r18, r20
    1326:	bd 01       	movw	r22, r26
    1328:	ef 01       	movw	r28, r30
    132a:	df 01       	movw	r26, r30
    132c:	f8 01       	movw	r30, r16
    132e:	db cf       	rjmp	.-74     	; 0x12e6 <malloc+0x22>
    1330:	21 15       	cp	r18, r1
    1332:	31 05       	cpc	r19, r1
    1334:	f9 f0       	breq	.+62     	; 0x1374 <malloc+0xb0>
    1336:	28 1b       	sub	r18, r24
    1338:	39 0b       	sbc	r19, r25
    133a:	24 30       	cpi	r18, 0x04	; 4
    133c:	31 05       	cpc	r19, r1
    133e:	80 f4       	brcc	.+32     	; 0x1360 <malloc+0x9c>
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	9b 81       	ldd	r25, Y+3	; 0x03
    1344:	61 15       	cp	r22, r1
    1346:	71 05       	cpc	r23, r1
    1348:	21 f0       	breq	.+8      	; 0x1352 <malloc+0x8e>
    134a:	fb 01       	movw	r30, r22
    134c:	93 83       	std	Z+3, r25	; 0x03
    134e:	82 83       	std	Z+2, r24	; 0x02
    1350:	04 c0       	rjmp	.+8      	; 0x135a <malloc+0x96>
    1352:	90 93 19 05 	sts	0x0519, r25	; 0x800519 <__flp+0x1>
    1356:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <__flp>
    135a:	fe 01       	movw	r30, r28
    135c:	32 96       	adiw	r30, 0x02	; 2
    135e:	44 c0       	rjmp	.+136    	; 0x13e8 <malloc+0x124>
    1360:	fe 01       	movw	r30, r28
    1362:	e2 0f       	add	r30, r18
    1364:	f3 1f       	adc	r31, r19
    1366:	81 93       	st	Z+, r24
    1368:	91 93       	st	Z+, r25
    136a:	22 50       	subi	r18, 0x02	; 2
    136c:	31 09       	sbc	r19, r1
    136e:	39 83       	std	Y+1, r19	; 0x01
    1370:	28 83       	st	Y, r18
    1372:	3a c0       	rjmp	.+116    	; 0x13e8 <malloc+0x124>
    1374:	20 91 16 05 	lds	r18, 0x0516	; 0x800516 <__brkval>
    1378:	30 91 17 05 	lds	r19, 0x0517	; 0x800517 <__brkval+0x1>
    137c:	23 2b       	or	r18, r19
    137e:	41 f4       	brne	.+16     	; 0x1390 <malloc+0xcc>
    1380:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1384:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1388:	30 93 17 05 	sts	0x0517, r19	; 0x800517 <__brkval+0x1>
    138c:	20 93 16 05 	sts	0x0516, r18	; 0x800516 <__brkval>
    1390:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1394:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1398:	21 15       	cp	r18, r1
    139a:	31 05       	cpc	r19, r1
    139c:	41 f4       	brne	.+16     	; 0x13ae <malloc+0xea>
    139e:	2d b7       	in	r18, 0x3d	; 61
    13a0:	3e b7       	in	r19, 0x3e	; 62
    13a2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    13a6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    13aa:	24 1b       	sub	r18, r20
    13ac:	35 0b       	sbc	r19, r21
    13ae:	e0 91 16 05 	lds	r30, 0x0516	; 0x800516 <__brkval>
    13b2:	f0 91 17 05 	lds	r31, 0x0517	; 0x800517 <__brkval+0x1>
    13b6:	e2 17       	cp	r30, r18
    13b8:	f3 07       	cpc	r31, r19
    13ba:	a0 f4       	brcc	.+40     	; 0x13e4 <malloc+0x120>
    13bc:	2e 1b       	sub	r18, r30
    13be:	3f 0b       	sbc	r19, r31
    13c0:	28 17       	cp	r18, r24
    13c2:	39 07       	cpc	r19, r25
    13c4:	78 f0       	brcs	.+30     	; 0x13e4 <malloc+0x120>
    13c6:	ac 01       	movw	r20, r24
    13c8:	4e 5f       	subi	r20, 0xFE	; 254
    13ca:	5f 4f       	sbci	r21, 0xFF	; 255
    13cc:	24 17       	cp	r18, r20
    13ce:	35 07       	cpc	r19, r21
    13d0:	48 f0       	brcs	.+18     	; 0x13e4 <malloc+0x120>
    13d2:	4e 0f       	add	r20, r30
    13d4:	5f 1f       	adc	r21, r31
    13d6:	50 93 17 05 	sts	0x0517, r21	; 0x800517 <__brkval+0x1>
    13da:	40 93 16 05 	sts	0x0516, r20	; 0x800516 <__brkval>
    13de:	81 93       	st	Z+, r24
    13e0:	91 93       	st	Z+, r25
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <malloc+0x124>
    13e4:	e0 e0       	ldi	r30, 0x00	; 0
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	cf 01       	movw	r24, r30
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	1f 91       	pop	r17
    13f0:	0f 91       	pop	r16
    13f2:	08 95       	ret

000013f4 <free>:
    13f4:	cf 93       	push	r28
    13f6:	df 93       	push	r29
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	09 f4       	brne	.+2      	; 0x13fe <free+0xa>
    13fc:	81 c0       	rjmp	.+258    	; 0x1500 <free+0x10c>
    13fe:	fc 01       	movw	r30, r24
    1400:	32 97       	sbiw	r30, 0x02	; 2
    1402:	13 82       	std	Z+3, r1	; 0x03
    1404:	12 82       	std	Z+2, r1	; 0x02
    1406:	a0 91 18 05 	lds	r26, 0x0518	; 0x800518 <__flp>
    140a:	b0 91 19 05 	lds	r27, 0x0519	; 0x800519 <__flp+0x1>
    140e:	10 97       	sbiw	r26, 0x00	; 0
    1410:	81 f4       	brne	.+32     	; 0x1432 <free+0x3e>
    1412:	20 81       	ld	r18, Z
    1414:	31 81       	ldd	r19, Z+1	; 0x01
    1416:	82 0f       	add	r24, r18
    1418:	93 1f       	adc	r25, r19
    141a:	20 91 16 05 	lds	r18, 0x0516	; 0x800516 <__brkval>
    141e:	30 91 17 05 	lds	r19, 0x0517	; 0x800517 <__brkval+0x1>
    1422:	28 17       	cp	r18, r24
    1424:	39 07       	cpc	r19, r25
    1426:	51 f5       	brne	.+84     	; 0x147c <free+0x88>
    1428:	f0 93 17 05 	sts	0x0517, r31	; 0x800517 <__brkval+0x1>
    142c:	e0 93 16 05 	sts	0x0516, r30	; 0x800516 <__brkval>
    1430:	67 c0       	rjmp	.+206    	; 0x1500 <free+0x10c>
    1432:	ed 01       	movw	r28, r26
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	ce 17       	cp	r28, r30
    143a:	df 07       	cpc	r29, r31
    143c:	40 f4       	brcc	.+16     	; 0x144e <free+0x5a>
    143e:	4a 81       	ldd	r20, Y+2	; 0x02
    1440:	5b 81       	ldd	r21, Y+3	; 0x03
    1442:	9e 01       	movw	r18, r28
    1444:	41 15       	cp	r20, r1
    1446:	51 05       	cpc	r21, r1
    1448:	f1 f0       	breq	.+60     	; 0x1486 <free+0x92>
    144a:	ea 01       	movw	r28, r20
    144c:	f5 cf       	rjmp	.-22     	; 0x1438 <free+0x44>
    144e:	d3 83       	std	Z+3, r29	; 0x03
    1450:	c2 83       	std	Z+2, r28	; 0x02
    1452:	40 81       	ld	r20, Z
    1454:	51 81       	ldd	r21, Z+1	; 0x01
    1456:	84 0f       	add	r24, r20
    1458:	95 1f       	adc	r25, r21
    145a:	c8 17       	cp	r28, r24
    145c:	d9 07       	cpc	r29, r25
    145e:	59 f4       	brne	.+22     	; 0x1476 <free+0x82>
    1460:	88 81       	ld	r24, Y
    1462:	99 81       	ldd	r25, Y+1	; 0x01
    1464:	84 0f       	add	r24, r20
    1466:	95 1f       	adc	r25, r21
    1468:	02 96       	adiw	r24, 0x02	; 2
    146a:	91 83       	std	Z+1, r25	; 0x01
    146c:	80 83       	st	Z, r24
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	9b 81       	ldd	r25, Y+3	; 0x03
    1472:	93 83       	std	Z+3, r25	; 0x03
    1474:	82 83       	std	Z+2, r24	; 0x02
    1476:	21 15       	cp	r18, r1
    1478:	31 05       	cpc	r19, r1
    147a:	29 f4       	brne	.+10     	; 0x1486 <free+0x92>
    147c:	f0 93 19 05 	sts	0x0519, r31	; 0x800519 <__flp+0x1>
    1480:	e0 93 18 05 	sts	0x0518, r30	; 0x800518 <__flp>
    1484:	3d c0       	rjmp	.+122    	; 0x1500 <free+0x10c>
    1486:	e9 01       	movw	r28, r18
    1488:	fb 83       	std	Y+3, r31	; 0x03
    148a:	ea 83       	std	Y+2, r30	; 0x02
    148c:	49 91       	ld	r20, Y+
    148e:	59 91       	ld	r21, Y+
    1490:	c4 0f       	add	r28, r20
    1492:	d5 1f       	adc	r29, r21
    1494:	ec 17       	cp	r30, r28
    1496:	fd 07       	cpc	r31, r29
    1498:	61 f4       	brne	.+24     	; 0x14b2 <free+0xbe>
    149a:	80 81       	ld	r24, Z
    149c:	91 81       	ldd	r25, Z+1	; 0x01
    149e:	84 0f       	add	r24, r20
    14a0:	95 1f       	adc	r25, r21
    14a2:	02 96       	adiw	r24, 0x02	; 2
    14a4:	e9 01       	movw	r28, r18
    14a6:	99 83       	std	Y+1, r25	; 0x01
    14a8:	88 83       	st	Y, r24
    14aa:	82 81       	ldd	r24, Z+2	; 0x02
    14ac:	93 81       	ldd	r25, Z+3	; 0x03
    14ae:	9b 83       	std	Y+3, r25	; 0x03
    14b0:	8a 83       	std	Y+2, r24	; 0x02
    14b2:	e0 e0       	ldi	r30, 0x00	; 0
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	12 96       	adiw	r26, 0x02	; 2
    14b8:	8d 91       	ld	r24, X+
    14ba:	9c 91       	ld	r25, X
    14bc:	13 97       	sbiw	r26, 0x03	; 3
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	19 f0       	breq	.+6      	; 0x14c8 <free+0xd4>
    14c2:	fd 01       	movw	r30, r26
    14c4:	dc 01       	movw	r26, r24
    14c6:	f7 cf       	rjmp	.-18     	; 0x14b6 <free+0xc2>
    14c8:	8d 91       	ld	r24, X+
    14ca:	9c 91       	ld	r25, X
    14cc:	11 97       	sbiw	r26, 0x01	; 1
    14ce:	9d 01       	movw	r18, r26
    14d0:	2e 5f       	subi	r18, 0xFE	; 254
    14d2:	3f 4f       	sbci	r19, 0xFF	; 255
    14d4:	82 0f       	add	r24, r18
    14d6:	93 1f       	adc	r25, r19
    14d8:	20 91 16 05 	lds	r18, 0x0516	; 0x800516 <__brkval>
    14dc:	30 91 17 05 	lds	r19, 0x0517	; 0x800517 <__brkval+0x1>
    14e0:	28 17       	cp	r18, r24
    14e2:	39 07       	cpc	r19, r25
    14e4:	69 f4       	brne	.+26     	; 0x1500 <free+0x10c>
    14e6:	30 97       	sbiw	r30, 0x00	; 0
    14e8:	29 f4       	brne	.+10     	; 0x14f4 <free+0x100>
    14ea:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <__flp+0x1>
    14ee:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <__flp>
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <free+0x104>
    14f4:	13 82       	std	Z+3, r1	; 0x03
    14f6:	12 82       	std	Z+2, r1	; 0x02
    14f8:	b0 93 17 05 	sts	0x0517, r27	; 0x800517 <__brkval+0x1>
    14fc:	a0 93 16 05 	sts	0x0516, r26	; 0x800516 <__brkval>
    1500:	df 91       	pop	r29
    1502:	cf 91       	pop	r28
    1504:	08 95       	ret

00001506 <memcmp>:
    1506:	fb 01       	movw	r30, r22
    1508:	dc 01       	movw	r26, r24
    150a:	04 c0       	rjmp	.+8      	; 0x1514 <memcmp+0xe>
    150c:	8d 91       	ld	r24, X+
    150e:	01 90       	ld	r0, Z+
    1510:	80 19       	sub	r24, r0
    1512:	21 f4       	brne	.+8      	; 0x151c <memcmp+0x16>
    1514:	41 50       	subi	r20, 0x01	; 1
    1516:	50 40       	sbci	r21, 0x00	; 0
    1518:	c8 f7       	brcc	.-14     	; 0x150c <memcmp+0x6>
    151a:	88 1b       	sub	r24, r24
    151c:	99 0b       	sbc	r25, r25
    151e:	08 95       	ret

00001520 <memcpy>:
    1520:	fb 01       	movw	r30, r22
    1522:	dc 01       	movw	r26, r24
    1524:	02 c0       	rjmp	.+4      	; 0x152a <memcpy+0xa>
    1526:	01 90       	ld	r0, Z+
    1528:	0d 92       	st	X+, r0
    152a:	41 50       	subi	r20, 0x01	; 1
    152c:	50 40       	sbci	r21, 0x00	; 0
    152e:	d8 f7       	brcc	.-10     	; 0x1526 <memcpy+0x6>
    1530:	08 95       	ret

00001532 <memset>:
    1532:	dc 01       	movw	r26, r24
    1534:	01 c0       	rjmp	.+2      	; 0x1538 <memset+0x6>
    1536:	6d 93       	st	X+, r22
    1538:	41 50       	subi	r20, 0x01	; 1
    153a:	50 40       	sbci	r21, 0x00	; 0
    153c:	e0 f7       	brcc	.-8      	; 0x1536 <memset+0x4>
    153e:	08 95       	ret

00001540 <strtok_r>:
    1540:	fa 01       	movw	r30, r20
    1542:	a1 91       	ld	r26, Z+
    1544:	b0 81       	ld	r27, Z
    1546:	00 97       	sbiw	r24, 0x00	; 0
    1548:	19 f4       	brne	.+6      	; 0x1550 <strtok_r+0x10>
    154a:	10 97       	sbiw	r26, 0x00	; 0
    154c:	e1 f0       	breq	.+56     	; 0x1586 <strtok_r+0x46>
    154e:	cd 01       	movw	r24, r26
    1550:	dc 01       	movw	r26, r24
    1552:	cd 01       	movw	r24, r26
    1554:	0d 90       	ld	r0, X+
    1556:	00 20       	and	r0, r0
    1558:	11 f4       	brne	.+4      	; 0x155e <strtok_r+0x1e>
    155a:	c0 01       	movw	r24, r0
    155c:	13 c0       	rjmp	.+38     	; 0x1584 <strtok_r+0x44>
    155e:	fb 01       	movw	r30, r22
    1560:	21 91       	ld	r18, Z+
    1562:	22 23       	and	r18, r18
    1564:	19 f0       	breq	.+6      	; 0x156c <strtok_r+0x2c>
    1566:	20 15       	cp	r18, r0
    1568:	d9 f7       	brne	.-10     	; 0x1560 <strtok_r+0x20>
    156a:	f3 cf       	rjmp	.-26     	; 0x1552 <strtok_r+0x12>
    156c:	fb 01       	movw	r30, r22
    156e:	21 91       	ld	r18, Z+
    1570:	20 15       	cp	r18, r0
    1572:	19 f4       	brne	.+6      	; 0x157a <strtok_r+0x3a>
    1574:	1e 92       	st	-X, r1
    1576:	11 96       	adiw	r26, 0x01	; 1
    1578:	06 c0       	rjmp	.+12     	; 0x1586 <strtok_r+0x46>
    157a:	22 23       	and	r18, r18
    157c:	c1 f7       	brne	.-16     	; 0x156e <strtok_r+0x2e>
    157e:	0d 90       	ld	r0, X+
    1580:	00 20       	and	r0, r0
    1582:	a1 f7       	brne	.-24     	; 0x156c <strtok_r+0x2c>
    1584:	d0 01       	movw	r26, r0
    1586:	fa 01       	movw	r30, r20
    1588:	a1 93       	st	Z+, r26
    158a:	b0 83       	st	Z, r27
    158c:	08 95       	ret

0000158e <sprintf>:
    158e:	0f 93       	push	r16
    1590:	1f 93       	push	r17
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	2e 97       	sbiw	r28, 0x0e	; 14
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
    15a6:	0d 89       	ldd	r16, Y+21	; 0x15
    15a8:	1e 89       	ldd	r17, Y+22	; 0x16
    15aa:	86 e0       	ldi	r24, 0x06	; 6
    15ac:	8c 83       	std	Y+4, r24	; 0x04
    15ae:	1a 83       	std	Y+2, r17	; 0x02
    15b0:	09 83       	std	Y+1, r16	; 0x01
    15b2:	8f ef       	ldi	r24, 0xFF	; 255
    15b4:	9f e7       	ldi	r25, 0x7F	; 127
    15b6:	9e 83       	std	Y+6, r25	; 0x06
    15b8:	8d 83       	std	Y+5, r24	; 0x05
    15ba:	ae 01       	movw	r20, r28
    15bc:	47 5e       	subi	r20, 0xE7	; 231
    15be:	5f 4f       	sbci	r21, 0xFF	; 255
    15c0:	6f 89       	ldd	r22, Y+23	; 0x17
    15c2:	78 8d       	ldd	r23, Y+24	; 0x18
    15c4:	ce 01       	movw	r24, r28
    15c6:	01 96       	adiw	r24, 0x01	; 1
    15c8:	38 d0       	rcall	.+112    	; 0x163a <vfprintf>
    15ca:	ef 81       	ldd	r30, Y+7	; 0x07
    15cc:	f8 85       	ldd	r31, Y+8	; 0x08
    15ce:	e0 0f       	add	r30, r16
    15d0:	f1 1f       	adc	r31, r17
    15d2:	10 82       	st	Z, r1
    15d4:	2e 96       	adiw	r28, 0x0e	; 14
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	f8 94       	cli
    15da:	de bf       	out	0x3e, r29	; 62
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	cd bf       	out	0x3d, r28	; 61
    15e0:	df 91       	pop	r29
    15e2:	cf 91       	pop	r28
    15e4:	1f 91       	pop	r17
    15e6:	0f 91       	pop	r16
    15e8:	08 95       	ret

000015ea <vsprintf>:
    15ea:	0f 93       	push	r16
    15ec:	1f 93       	push	r17
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	2e 97       	sbiw	r28, 0x0e	; 14
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	f8 94       	cli
    15fc:	de bf       	out	0x3e, r29	; 62
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	cd bf       	out	0x3d, r28	; 61
    1602:	8c 01       	movw	r16, r24
    1604:	86 e0       	ldi	r24, 0x06	; 6
    1606:	8c 83       	std	Y+4, r24	; 0x04
    1608:	1a 83       	std	Y+2, r17	; 0x02
    160a:	09 83       	std	Y+1, r16	; 0x01
    160c:	8f ef       	ldi	r24, 0xFF	; 255
    160e:	9f e7       	ldi	r25, 0x7F	; 127
    1610:	9e 83       	std	Y+6, r25	; 0x06
    1612:	8d 83       	std	Y+5, r24	; 0x05
    1614:	ce 01       	movw	r24, r28
    1616:	01 96       	adiw	r24, 0x01	; 1
    1618:	10 d0       	rcall	.+32     	; 0x163a <vfprintf>
    161a:	ef 81       	ldd	r30, Y+7	; 0x07
    161c:	f8 85       	ldd	r31, Y+8	; 0x08
    161e:	e0 0f       	add	r30, r16
    1620:	f1 1f       	adc	r31, r17
    1622:	10 82       	st	Z, r1
    1624:	2e 96       	adiw	r28, 0x0e	; 14
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	1f 91       	pop	r17
    1636:	0f 91       	pop	r16
    1638:	08 95       	ret

0000163a <vfprintf>:
    163a:	2f 92       	push	r2
    163c:	3f 92       	push	r3
    163e:	4f 92       	push	r4
    1640:	5f 92       	push	r5
    1642:	6f 92       	push	r6
    1644:	7f 92       	push	r7
    1646:	8f 92       	push	r8
    1648:	9f 92       	push	r9
    164a:	af 92       	push	r10
    164c:	bf 92       	push	r11
    164e:	cf 92       	push	r12
    1650:	df 92       	push	r13
    1652:	ef 92       	push	r14
    1654:	ff 92       	push	r15
    1656:	0f 93       	push	r16
    1658:	1f 93       	push	r17
    165a:	cf 93       	push	r28
    165c:	df 93       	push	r29
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
    1662:	2b 97       	sbiw	r28, 0x0b	; 11
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	f8 94       	cli
    1668:	de bf       	out	0x3e, r29	; 62
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	cd bf       	out	0x3d, r28	; 61
    166e:	6c 01       	movw	r12, r24
    1670:	7b 01       	movw	r14, r22
    1672:	8a 01       	movw	r16, r20
    1674:	fc 01       	movw	r30, r24
    1676:	17 82       	std	Z+7, r1	; 0x07
    1678:	16 82       	std	Z+6, r1	; 0x06
    167a:	83 81       	ldd	r24, Z+3	; 0x03
    167c:	81 ff       	sbrs	r24, 1
    167e:	bf c1       	rjmp	.+894    	; 0x19fe <vfprintf+0x3c4>
    1680:	ce 01       	movw	r24, r28
    1682:	01 96       	adiw	r24, 0x01	; 1
    1684:	3c 01       	movw	r6, r24
    1686:	f6 01       	movw	r30, r12
    1688:	93 81       	ldd	r25, Z+3	; 0x03
    168a:	f7 01       	movw	r30, r14
    168c:	93 fd       	sbrc	r25, 3
    168e:	85 91       	lpm	r24, Z+
    1690:	93 ff       	sbrs	r25, 3
    1692:	81 91       	ld	r24, Z+
    1694:	7f 01       	movw	r14, r30
    1696:	88 23       	and	r24, r24
    1698:	09 f4       	brne	.+2      	; 0x169c <vfprintf+0x62>
    169a:	ad c1       	rjmp	.+858    	; 0x19f6 <vfprintf+0x3bc>
    169c:	85 32       	cpi	r24, 0x25	; 37
    169e:	39 f4       	brne	.+14     	; 0x16ae <vfprintf+0x74>
    16a0:	93 fd       	sbrc	r25, 3
    16a2:	85 91       	lpm	r24, Z+
    16a4:	93 ff       	sbrs	r25, 3
    16a6:	81 91       	ld	r24, Z+
    16a8:	7f 01       	movw	r14, r30
    16aa:	85 32       	cpi	r24, 0x25	; 37
    16ac:	21 f4       	brne	.+8      	; 0x16b6 <vfprintf+0x7c>
    16ae:	b6 01       	movw	r22, r12
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	d6 d1       	rcall	.+940    	; 0x1a60 <fputc>
    16b4:	e8 cf       	rjmp	.-48     	; 0x1686 <vfprintf+0x4c>
    16b6:	91 2c       	mov	r9, r1
    16b8:	21 2c       	mov	r2, r1
    16ba:	31 2c       	mov	r3, r1
    16bc:	ff e1       	ldi	r31, 0x1F	; 31
    16be:	f3 15       	cp	r31, r3
    16c0:	d8 f0       	brcs	.+54     	; 0x16f8 <vfprintf+0xbe>
    16c2:	8b 32       	cpi	r24, 0x2B	; 43
    16c4:	79 f0       	breq	.+30     	; 0x16e4 <vfprintf+0xaa>
    16c6:	38 f4       	brcc	.+14     	; 0x16d6 <vfprintf+0x9c>
    16c8:	80 32       	cpi	r24, 0x20	; 32
    16ca:	79 f0       	breq	.+30     	; 0x16ea <vfprintf+0xb0>
    16cc:	83 32       	cpi	r24, 0x23	; 35
    16ce:	a1 f4       	brne	.+40     	; 0x16f8 <vfprintf+0xbe>
    16d0:	23 2d       	mov	r18, r3
    16d2:	20 61       	ori	r18, 0x10	; 16
    16d4:	1d c0       	rjmp	.+58     	; 0x1710 <vfprintf+0xd6>
    16d6:	8d 32       	cpi	r24, 0x2D	; 45
    16d8:	61 f0       	breq	.+24     	; 0x16f2 <vfprintf+0xb8>
    16da:	80 33       	cpi	r24, 0x30	; 48
    16dc:	69 f4       	brne	.+26     	; 0x16f8 <vfprintf+0xbe>
    16de:	23 2d       	mov	r18, r3
    16e0:	21 60       	ori	r18, 0x01	; 1
    16e2:	16 c0       	rjmp	.+44     	; 0x1710 <vfprintf+0xd6>
    16e4:	83 2d       	mov	r24, r3
    16e6:	82 60       	ori	r24, 0x02	; 2
    16e8:	38 2e       	mov	r3, r24
    16ea:	e3 2d       	mov	r30, r3
    16ec:	e4 60       	ori	r30, 0x04	; 4
    16ee:	3e 2e       	mov	r3, r30
    16f0:	2a c0       	rjmp	.+84     	; 0x1746 <vfprintf+0x10c>
    16f2:	f3 2d       	mov	r31, r3
    16f4:	f8 60       	ori	r31, 0x08	; 8
    16f6:	1d c0       	rjmp	.+58     	; 0x1732 <vfprintf+0xf8>
    16f8:	37 fc       	sbrc	r3, 7
    16fa:	2d c0       	rjmp	.+90     	; 0x1756 <vfprintf+0x11c>
    16fc:	20 ed       	ldi	r18, 0xD0	; 208
    16fe:	28 0f       	add	r18, r24
    1700:	2a 30       	cpi	r18, 0x0A	; 10
    1702:	40 f0       	brcs	.+16     	; 0x1714 <vfprintf+0xda>
    1704:	8e 32       	cpi	r24, 0x2E	; 46
    1706:	b9 f4       	brne	.+46     	; 0x1736 <vfprintf+0xfc>
    1708:	36 fc       	sbrc	r3, 6
    170a:	75 c1       	rjmp	.+746    	; 0x19f6 <vfprintf+0x3bc>
    170c:	23 2d       	mov	r18, r3
    170e:	20 64       	ori	r18, 0x40	; 64
    1710:	32 2e       	mov	r3, r18
    1712:	19 c0       	rjmp	.+50     	; 0x1746 <vfprintf+0x10c>
    1714:	36 fe       	sbrs	r3, 6
    1716:	06 c0       	rjmp	.+12     	; 0x1724 <vfprintf+0xea>
    1718:	8a e0       	ldi	r24, 0x0A	; 10
    171a:	98 9e       	mul	r9, r24
    171c:	20 0d       	add	r18, r0
    171e:	11 24       	eor	r1, r1
    1720:	92 2e       	mov	r9, r18
    1722:	11 c0       	rjmp	.+34     	; 0x1746 <vfprintf+0x10c>
    1724:	ea e0       	ldi	r30, 0x0A	; 10
    1726:	2e 9e       	mul	r2, r30
    1728:	20 0d       	add	r18, r0
    172a:	11 24       	eor	r1, r1
    172c:	22 2e       	mov	r2, r18
    172e:	f3 2d       	mov	r31, r3
    1730:	f0 62       	ori	r31, 0x20	; 32
    1732:	3f 2e       	mov	r3, r31
    1734:	08 c0       	rjmp	.+16     	; 0x1746 <vfprintf+0x10c>
    1736:	8c 36       	cpi	r24, 0x6C	; 108
    1738:	21 f4       	brne	.+8      	; 0x1742 <vfprintf+0x108>
    173a:	83 2d       	mov	r24, r3
    173c:	80 68       	ori	r24, 0x80	; 128
    173e:	38 2e       	mov	r3, r24
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <vfprintf+0x10c>
    1742:	88 36       	cpi	r24, 0x68	; 104
    1744:	41 f4       	brne	.+16     	; 0x1756 <vfprintf+0x11c>
    1746:	f7 01       	movw	r30, r14
    1748:	93 fd       	sbrc	r25, 3
    174a:	85 91       	lpm	r24, Z+
    174c:	93 ff       	sbrs	r25, 3
    174e:	81 91       	ld	r24, Z+
    1750:	7f 01       	movw	r14, r30
    1752:	81 11       	cpse	r24, r1
    1754:	b3 cf       	rjmp	.-154    	; 0x16bc <vfprintf+0x82>
    1756:	98 2f       	mov	r25, r24
    1758:	9f 7d       	andi	r25, 0xDF	; 223
    175a:	95 54       	subi	r25, 0x45	; 69
    175c:	93 30       	cpi	r25, 0x03	; 3
    175e:	28 f4       	brcc	.+10     	; 0x176a <vfprintf+0x130>
    1760:	0c 5f       	subi	r16, 0xFC	; 252
    1762:	1f 4f       	sbci	r17, 0xFF	; 255
    1764:	9f e3       	ldi	r25, 0x3F	; 63
    1766:	99 83       	std	Y+1, r25	; 0x01
    1768:	0d c0       	rjmp	.+26     	; 0x1784 <vfprintf+0x14a>
    176a:	83 36       	cpi	r24, 0x63	; 99
    176c:	31 f0       	breq	.+12     	; 0x177a <vfprintf+0x140>
    176e:	83 37       	cpi	r24, 0x73	; 115
    1770:	71 f0       	breq	.+28     	; 0x178e <vfprintf+0x154>
    1772:	83 35       	cpi	r24, 0x53	; 83
    1774:	09 f0       	breq	.+2      	; 0x1778 <vfprintf+0x13e>
    1776:	55 c0       	rjmp	.+170    	; 0x1822 <vfprintf+0x1e8>
    1778:	20 c0       	rjmp	.+64     	; 0x17ba <vfprintf+0x180>
    177a:	f8 01       	movw	r30, r16
    177c:	80 81       	ld	r24, Z
    177e:	89 83       	std	Y+1, r24	; 0x01
    1780:	0e 5f       	subi	r16, 0xFE	; 254
    1782:	1f 4f       	sbci	r17, 0xFF	; 255
    1784:	88 24       	eor	r8, r8
    1786:	83 94       	inc	r8
    1788:	91 2c       	mov	r9, r1
    178a:	53 01       	movw	r10, r6
    178c:	12 c0       	rjmp	.+36     	; 0x17b2 <vfprintf+0x178>
    178e:	28 01       	movw	r4, r16
    1790:	f2 e0       	ldi	r31, 0x02	; 2
    1792:	4f 0e       	add	r4, r31
    1794:	51 1c       	adc	r5, r1
    1796:	f8 01       	movw	r30, r16
    1798:	a0 80       	ld	r10, Z
    179a:	b1 80       	ldd	r11, Z+1	; 0x01
    179c:	36 fe       	sbrs	r3, 6
    179e:	03 c0       	rjmp	.+6      	; 0x17a6 <vfprintf+0x16c>
    17a0:	69 2d       	mov	r22, r9
    17a2:	70 e0       	ldi	r23, 0x00	; 0
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <vfprintf+0x170>
    17a6:	6f ef       	ldi	r22, 0xFF	; 255
    17a8:	7f ef       	ldi	r23, 0xFF	; 255
    17aa:	c5 01       	movw	r24, r10
    17ac:	4e d1       	rcall	.+668    	; 0x1a4a <strnlen>
    17ae:	4c 01       	movw	r8, r24
    17b0:	82 01       	movw	r16, r4
    17b2:	f3 2d       	mov	r31, r3
    17b4:	ff 77       	andi	r31, 0x7F	; 127
    17b6:	3f 2e       	mov	r3, r31
    17b8:	15 c0       	rjmp	.+42     	; 0x17e4 <vfprintf+0x1aa>
    17ba:	28 01       	movw	r4, r16
    17bc:	22 e0       	ldi	r18, 0x02	; 2
    17be:	42 0e       	add	r4, r18
    17c0:	51 1c       	adc	r5, r1
    17c2:	f8 01       	movw	r30, r16
    17c4:	a0 80       	ld	r10, Z
    17c6:	b1 80       	ldd	r11, Z+1	; 0x01
    17c8:	36 fe       	sbrs	r3, 6
    17ca:	03 c0       	rjmp	.+6      	; 0x17d2 <vfprintf+0x198>
    17cc:	69 2d       	mov	r22, r9
    17ce:	70 e0       	ldi	r23, 0x00	; 0
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <vfprintf+0x19c>
    17d2:	6f ef       	ldi	r22, 0xFF	; 255
    17d4:	7f ef       	ldi	r23, 0xFF	; 255
    17d6:	c5 01       	movw	r24, r10
    17d8:	2d d1       	rcall	.+602    	; 0x1a34 <strnlen_P>
    17da:	4c 01       	movw	r8, r24
    17dc:	f3 2d       	mov	r31, r3
    17de:	f0 68       	ori	r31, 0x80	; 128
    17e0:	3f 2e       	mov	r3, r31
    17e2:	82 01       	movw	r16, r4
    17e4:	33 fc       	sbrc	r3, 3
    17e6:	19 c0       	rjmp	.+50     	; 0x181a <vfprintf+0x1e0>
    17e8:	82 2d       	mov	r24, r2
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	88 16       	cp	r8, r24
    17ee:	99 06       	cpc	r9, r25
    17f0:	a0 f4       	brcc	.+40     	; 0x181a <vfprintf+0x1e0>
    17f2:	b6 01       	movw	r22, r12
    17f4:	80 e2       	ldi	r24, 0x20	; 32
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	33 d1       	rcall	.+614    	; 0x1a60 <fputc>
    17fa:	2a 94       	dec	r2
    17fc:	f5 cf       	rjmp	.-22     	; 0x17e8 <vfprintf+0x1ae>
    17fe:	f5 01       	movw	r30, r10
    1800:	37 fc       	sbrc	r3, 7
    1802:	85 91       	lpm	r24, Z+
    1804:	37 fe       	sbrs	r3, 7
    1806:	81 91       	ld	r24, Z+
    1808:	5f 01       	movw	r10, r30
    180a:	b6 01       	movw	r22, r12
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	28 d1       	rcall	.+592    	; 0x1a60 <fputc>
    1810:	21 10       	cpse	r2, r1
    1812:	2a 94       	dec	r2
    1814:	21 e0       	ldi	r18, 0x01	; 1
    1816:	82 1a       	sub	r8, r18
    1818:	91 08       	sbc	r9, r1
    181a:	81 14       	cp	r8, r1
    181c:	91 04       	cpc	r9, r1
    181e:	79 f7       	brne	.-34     	; 0x17fe <vfprintf+0x1c4>
    1820:	e1 c0       	rjmp	.+450    	; 0x19e4 <vfprintf+0x3aa>
    1822:	84 36       	cpi	r24, 0x64	; 100
    1824:	11 f0       	breq	.+4      	; 0x182a <vfprintf+0x1f0>
    1826:	89 36       	cpi	r24, 0x69	; 105
    1828:	39 f5       	brne	.+78     	; 0x1878 <vfprintf+0x23e>
    182a:	f8 01       	movw	r30, r16
    182c:	37 fe       	sbrs	r3, 7
    182e:	07 c0       	rjmp	.+14     	; 0x183e <vfprintf+0x204>
    1830:	60 81       	ld	r22, Z
    1832:	71 81       	ldd	r23, Z+1	; 0x01
    1834:	82 81       	ldd	r24, Z+2	; 0x02
    1836:	93 81       	ldd	r25, Z+3	; 0x03
    1838:	0c 5f       	subi	r16, 0xFC	; 252
    183a:	1f 4f       	sbci	r17, 0xFF	; 255
    183c:	08 c0       	rjmp	.+16     	; 0x184e <vfprintf+0x214>
    183e:	60 81       	ld	r22, Z
    1840:	71 81       	ldd	r23, Z+1	; 0x01
    1842:	07 2e       	mov	r0, r23
    1844:	00 0c       	add	r0, r0
    1846:	88 0b       	sbc	r24, r24
    1848:	99 0b       	sbc	r25, r25
    184a:	0e 5f       	subi	r16, 0xFE	; 254
    184c:	1f 4f       	sbci	r17, 0xFF	; 255
    184e:	f3 2d       	mov	r31, r3
    1850:	ff 76       	andi	r31, 0x6F	; 111
    1852:	3f 2e       	mov	r3, r31
    1854:	97 ff       	sbrs	r25, 7
    1856:	09 c0       	rjmp	.+18     	; 0x186a <vfprintf+0x230>
    1858:	90 95       	com	r25
    185a:	80 95       	com	r24
    185c:	70 95       	com	r23
    185e:	61 95       	neg	r22
    1860:	7f 4f       	sbci	r23, 0xFF	; 255
    1862:	8f 4f       	sbci	r24, 0xFF	; 255
    1864:	9f 4f       	sbci	r25, 0xFF	; 255
    1866:	f0 68       	ori	r31, 0x80	; 128
    1868:	3f 2e       	mov	r3, r31
    186a:	2a e0       	ldi	r18, 0x0A	; 10
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	a3 01       	movw	r20, r6
    1870:	33 d1       	rcall	.+614    	; 0x1ad8 <__ultoa_invert>
    1872:	88 2e       	mov	r8, r24
    1874:	86 18       	sub	r8, r6
    1876:	44 c0       	rjmp	.+136    	; 0x1900 <vfprintf+0x2c6>
    1878:	85 37       	cpi	r24, 0x75	; 117
    187a:	31 f4       	brne	.+12     	; 0x1888 <vfprintf+0x24e>
    187c:	23 2d       	mov	r18, r3
    187e:	2f 7e       	andi	r18, 0xEF	; 239
    1880:	b2 2e       	mov	r11, r18
    1882:	2a e0       	ldi	r18, 0x0A	; 10
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	25 c0       	rjmp	.+74     	; 0x18d2 <vfprintf+0x298>
    1888:	93 2d       	mov	r25, r3
    188a:	99 7f       	andi	r25, 0xF9	; 249
    188c:	b9 2e       	mov	r11, r25
    188e:	8f 36       	cpi	r24, 0x6F	; 111
    1890:	c1 f0       	breq	.+48     	; 0x18c2 <vfprintf+0x288>
    1892:	18 f4       	brcc	.+6      	; 0x189a <vfprintf+0x260>
    1894:	88 35       	cpi	r24, 0x58	; 88
    1896:	79 f0       	breq	.+30     	; 0x18b6 <vfprintf+0x27c>
    1898:	ae c0       	rjmp	.+348    	; 0x19f6 <vfprintf+0x3bc>
    189a:	80 37       	cpi	r24, 0x70	; 112
    189c:	19 f0       	breq	.+6      	; 0x18a4 <vfprintf+0x26a>
    189e:	88 37       	cpi	r24, 0x78	; 120
    18a0:	21 f0       	breq	.+8      	; 0x18aa <vfprintf+0x270>
    18a2:	a9 c0       	rjmp	.+338    	; 0x19f6 <vfprintf+0x3bc>
    18a4:	e9 2f       	mov	r30, r25
    18a6:	e0 61       	ori	r30, 0x10	; 16
    18a8:	be 2e       	mov	r11, r30
    18aa:	b4 fe       	sbrs	r11, 4
    18ac:	0d c0       	rjmp	.+26     	; 0x18c8 <vfprintf+0x28e>
    18ae:	fb 2d       	mov	r31, r11
    18b0:	f4 60       	ori	r31, 0x04	; 4
    18b2:	bf 2e       	mov	r11, r31
    18b4:	09 c0       	rjmp	.+18     	; 0x18c8 <vfprintf+0x28e>
    18b6:	34 fe       	sbrs	r3, 4
    18b8:	0a c0       	rjmp	.+20     	; 0x18ce <vfprintf+0x294>
    18ba:	29 2f       	mov	r18, r25
    18bc:	26 60       	ori	r18, 0x06	; 6
    18be:	b2 2e       	mov	r11, r18
    18c0:	06 c0       	rjmp	.+12     	; 0x18ce <vfprintf+0x294>
    18c2:	28 e0       	ldi	r18, 0x08	; 8
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	05 c0       	rjmp	.+10     	; 0x18d2 <vfprintf+0x298>
    18c8:	20 e1       	ldi	r18, 0x10	; 16
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <vfprintf+0x298>
    18ce:	20 e1       	ldi	r18, 0x10	; 16
    18d0:	32 e0       	ldi	r19, 0x02	; 2
    18d2:	f8 01       	movw	r30, r16
    18d4:	b7 fe       	sbrs	r11, 7
    18d6:	07 c0       	rjmp	.+14     	; 0x18e6 <vfprintf+0x2ac>
    18d8:	60 81       	ld	r22, Z
    18da:	71 81       	ldd	r23, Z+1	; 0x01
    18dc:	82 81       	ldd	r24, Z+2	; 0x02
    18de:	93 81       	ldd	r25, Z+3	; 0x03
    18e0:	0c 5f       	subi	r16, 0xFC	; 252
    18e2:	1f 4f       	sbci	r17, 0xFF	; 255
    18e4:	06 c0       	rjmp	.+12     	; 0x18f2 <vfprintf+0x2b8>
    18e6:	60 81       	ld	r22, Z
    18e8:	71 81       	ldd	r23, Z+1	; 0x01
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	0e 5f       	subi	r16, 0xFE	; 254
    18f0:	1f 4f       	sbci	r17, 0xFF	; 255
    18f2:	a3 01       	movw	r20, r6
    18f4:	f1 d0       	rcall	.+482    	; 0x1ad8 <__ultoa_invert>
    18f6:	88 2e       	mov	r8, r24
    18f8:	86 18       	sub	r8, r6
    18fa:	fb 2d       	mov	r31, r11
    18fc:	ff 77       	andi	r31, 0x7F	; 127
    18fe:	3f 2e       	mov	r3, r31
    1900:	36 fe       	sbrs	r3, 6
    1902:	0d c0       	rjmp	.+26     	; 0x191e <vfprintf+0x2e4>
    1904:	23 2d       	mov	r18, r3
    1906:	2e 7f       	andi	r18, 0xFE	; 254
    1908:	a2 2e       	mov	r10, r18
    190a:	89 14       	cp	r8, r9
    190c:	58 f4       	brcc	.+22     	; 0x1924 <vfprintf+0x2ea>
    190e:	34 fe       	sbrs	r3, 4
    1910:	0b c0       	rjmp	.+22     	; 0x1928 <vfprintf+0x2ee>
    1912:	32 fc       	sbrc	r3, 2
    1914:	09 c0       	rjmp	.+18     	; 0x1928 <vfprintf+0x2ee>
    1916:	83 2d       	mov	r24, r3
    1918:	8e 7e       	andi	r24, 0xEE	; 238
    191a:	a8 2e       	mov	r10, r24
    191c:	05 c0       	rjmp	.+10     	; 0x1928 <vfprintf+0x2ee>
    191e:	b8 2c       	mov	r11, r8
    1920:	a3 2c       	mov	r10, r3
    1922:	03 c0       	rjmp	.+6      	; 0x192a <vfprintf+0x2f0>
    1924:	b8 2c       	mov	r11, r8
    1926:	01 c0       	rjmp	.+2      	; 0x192a <vfprintf+0x2f0>
    1928:	b9 2c       	mov	r11, r9
    192a:	a4 fe       	sbrs	r10, 4
    192c:	0f c0       	rjmp	.+30     	; 0x194c <vfprintf+0x312>
    192e:	fe 01       	movw	r30, r28
    1930:	e8 0d       	add	r30, r8
    1932:	f1 1d       	adc	r31, r1
    1934:	80 81       	ld	r24, Z
    1936:	80 33       	cpi	r24, 0x30	; 48
    1938:	21 f4       	brne	.+8      	; 0x1942 <vfprintf+0x308>
    193a:	9a 2d       	mov	r25, r10
    193c:	99 7e       	andi	r25, 0xE9	; 233
    193e:	a9 2e       	mov	r10, r25
    1940:	09 c0       	rjmp	.+18     	; 0x1954 <vfprintf+0x31a>
    1942:	a2 fe       	sbrs	r10, 2
    1944:	06 c0       	rjmp	.+12     	; 0x1952 <vfprintf+0x318>
    1946:	b3 94       	inc	r11
    1948:	b3 94       	inc	r11
    194a:	04 c0       	rjmp	.+8      	; 0x1954 <vfprintf+0x31a>
    194c:	8a 2d       	mov	r24, r10
    194e:	86 78       	andi	r24, 0x86	; 134
    1950:	09 f0       	breq	.+2      	; 0x1954 <vfprintf+0x31a>
    1952:	b3 94       	inc	r11
    1954:	a3 fc       	sbrc	r10, 3
    1956:	10 c0       	rjmp	.+32     	; 0x1978 <vfprintf+0x33e>
    1958:	a0 fe       	sbrs	r10, 0
    195a:	06 c0       	rjmp	.+12     	; 0x1968 <vfprintf+0x32e>
    195c:	b2 14       	cp	r11, r2
    195e:	80 f4       	brcc	.+32     	; 0x1980 <vfprintf+0x346>
    1960:	28 0c       	add	r2, r8
    1962:	92 2c       	mov	r9, r2
    1964:	9b 18       	sub	r9, r11
    1966:	0d c0       	rjmp	.+26     	; 0x1982 <vfprintf+0x348>
    1968:	b2 14       	cp	r11, r2
    196a:	58 f4       	brcc	.+22     	; 0x1982 <vfprintf+0x348>
    196c:	b6 01       	movw	r22, r12
    196e:	80 e2       	ldi	r24, 0x20	; 32
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	76 d0       	rcall	.+236    	; 0x1a60 <fputc>
    1974:	b3 94       	inc	r11
    1976:	f8 cf       	rjmp	.-16     	; 0x1968 <vfprintf+0x32e>
    1978:	b2 14       	cp	r11, r2
    197a:	18 f4       	brcc	.+6      	; 0x1982 <vfprintf+0x348>
    197c:	2b 18       	sub	r2, r11
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <vfprintf+0x34a>
    1980:	98 2c       	mov	r9, r8
    1982:	21 2c       	mov	r2, r1
    1984:	a4 fe       	sbrs	r10, 4
    1986:	0f c0       	rjmp	.+30     	; 0x19a6 <vfprintf+0x36c>
    1988:	b6 01       	movw	r22, r12
    198a:	80 e3       	ldi	r24, 0x30	; 48
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	68 d0       	rcall	.+208    	; 0x1a60 <fputc>
    1990:	a2 fe       	sbrs	r10, 2
    1992:	16 c0       	rjmp	.+44     	; 0x19c0 <vfprintf+0x386>
    1994:	a1 fc       	sbrc	r10, 1
    1996:	03 c0       	rjmp	.+6      	; 0x199e <vfprintf+0x364>
    1998:	88 e7       	ldi	r24, 0x78	; 120
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <vfprintf+0x368>
    199e:	88 e5       	ldi	r24, 0x58	; 88
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	b6 01       	movw	r22, r12
    19a4:	0c c0       	rjmp	.+24     	; 0x19be <vfprintf+0x384>
    19a6:	8a 2d       	mov	r24, r10
    19a8:	86 78       	andi	r24, 0x86	; 134
    19aa:	51 f0       	breq	.+20     	; 0x19c0 <vfprintf+0x386>
    19ac:	a1 fe       	sbrs	r10, 1
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <vfprintf+0x37a>
    19b0:	8b e2       	ldi	r24, 0x2B	; 43
    19b2:	01 c0       	rjmp	.+2      	; 0x19b6 <vfprintf+0x37c>
    19b4:	80 e2       	ldi	r24, 0x20	; 32
    19b6:	a7 fc       	sbrc	r10, 7
    19b8:	8d e2       	ldi	r24, 0x2D	; 45
    19ba:	b6 01       	movw	r22, r12
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	50 d0       	rcall	.+160    	; 0x1a60 <fputc>
    19c0:	89 14       	cp	r8, r9
    19c2:	30 f4       	brcc	.+12     	; 0x19d0 <vfprintf+0x396>
    19c4:	b6 01       	movw	r22, r12
    19c6:	80 e3       	ldi	r24, 0x30	; 48
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	4a d0       	rcall	.+148    	; 0x1a60 <fputc>
    19cc:	9a 94       	dec	r9
    19ce:	f8 cf       	rjmp	.-16     	; 0x19c0 <vfprintf+0x386>
    19d0:	8a 94       	dec	r8
    19d2:	f3 01       	movw	r30, r6
    19d4:	e8 0d       	add	r30, r8
    19d6:	f1 1d       	adc	r31, r1
    19d8:	80 81       	ld	r24, Z
    19da:	b6 01       	movw	r22, r12
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	40 d0       	rcall	.+128    	; 0x1a60 <fputc>
    19e0:	81 10       	cpse	r8, r1
    19e2:	f6 cf       	rjmp	.-20     	; 0x19d0 <vfprintf+0x396>
    19e4:	22 20       	and	r2, r2
    19e6:	09 f4       	brne	.+2      	; 0x19ea <vfprintf+0x3b0>
    19e8:	4e ce       	rjmp	.-868    	; 0x1686 <vfprintf+0x4c>
    19ea:	b6 01       	movw	r22, r12
    19ec:	80 e2       	ldi	r24, 0x20	; 32
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	37 d0       	rcall	.+110    	; 0x1a60 <fputc>
    19f2:	2a 94       	dec	r2
    19f4:	f7 cf       	rjmp	.-18     	; 0x19e4 <vfprintf+0x3aa>
    19f6:	f6 01       	movw	r30, r12
    19f8:	86 81       	ldd	r24, Z+6	; 0x06
    19fa:	97 81       	ldd	r25, Z+7	; 0x07
    19fc:	02 c0       	rjmp	.+4      	; 0x1a02 <vfprintf+0x3c8>
    19fe:	8f ef       	ldi	r24, 0xFF	; 255
    1a00:	9f ef       	ldi	r25, 0xFF	; 255
    1a02:	2b 96       	adiw	r28, 0x0b	; 11
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	f8 94       	cli
    1a08:	de bf       	out	0x3e, r29	; 62
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	cd bf       	out	0x3d, r28	; 61
    1a0e:	df 91       	pop	r29
    1a10:	cf 91       	pop	r28
    1a12:	1f 91       	pop	r17
    1a14:	0f 91       	pop	r16
    1a16:	ff 90       	pop	r15
    1a18:	ef 90       	pop	r14
    1a1a:	df 90       	pop	r13
    1a1c:	cf 90       	pop	r12
    1a1e:	bf 90       	pop	r11
    1a20:	af 90       	pop	r10
    1a22:	9f 90       	pop	r9
    1a24:	8f 90       	pop	r8
    1a26:	7f 90       	pop	r7
    1a28:	6f 90       	pop	r6
    1a2a:	5f 90       	pop	r5
    1a2c:	4f 90       	pop	r4
    1a2e:	3f 90       	pop	r3
    1a30:	2f 90       	pop	r2
    1a32:	08 95       	ret

00001a34 <strnlen_P>:
    1a34:	fc 01       	movw	r30, r24
    1a36:	05 90       	lpm	r0, Z+
    1a38:	61 50       	subi	r22, 0x01	; 1
    1a3a:	70 40       	sbci	r23, 0x00	; 0
    1a3c:	01 10       	cpse	r0, r1
    1a3e:	d8 f7       	brcc	.-10     	; 0x1a36 <strnlen_P+0x2>
    1a40:	80 95       	com	r24
    1a42:	90 95       	com	r25
    1a44:	8e 0f       	add	r24, r30
    1a46:	9f 1f       	adc	r25, r31
    1a48:	08 95       	ret

00001a4a <strnlen>:
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	61 50       	subi	r22, 0x01	; 1
    1a4e:	70 40       	sbci	r23, 0x00	; 0
    1a50:	01 90       	ld	r0, Z+
    1a52:	01 10       	cpse	r0, r1
    1a54:	d8 f7       	brcc	.-10     	; 0x1a4c <strnlen+0x2>
    1a56:	80 95       	com	r24
    1a58:	90 95       	com	r25
    1a5a:	8e 0f       	add	r24, r30
    1a5c:	9f 1f       	adc	r25, r31
    1a5e:	08 95       	ret

00001a60 <fputc>:
    1a60:	0f 93       	push	r16
    1a62:	1f 93       	push	r17
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
    1a68:	fb 01       	movw	r30, r22
    1a6a:	23 81       	ldd	r18, Z+3	; 0x03
    1a6c:	21 fd       	sbrc	r18, 1
    1a6e:	03 c0       	rjmp	.+6      	; 0x1a76 <fputc+0x16>
    1a70:	8f ef       	ldi	r24, 0xFF	; 255
    1a72:	9f ef       	ldi	r25, 0xFF	; 255
    1a74:	2c c0       	rjmp	.+88     	; 0x1ace <fputc+0x6e>
    1a76:	22 ff       	sbrs	r18, 2
    1a78:	16 c0       	rjmp	.+44     	; 0x1aa6 <fputc+0x46>
    1a7a:	46 81       	ldd	r20, Z+6	; 0x06
    1a7c:	57 81       	ldd	r21, Z+7	; 0x07
    1a7e:	24 81       	ldd	r18, Z+4	; 0x04
    1a80:	35 81       	ldd	r19, Z+5	; 0x05
    1a82:	42 17       	cp	r20, r18
    1a84:	53 07       	cpc	r21, r19
    1a86:	44 f4       	brge	.+16     	; 0x1a98 <fputc+0x38>
    1a88:	a0 81       	ld	r26, Z
    1a8a:	b1 81       	ldd	r27, Z+1	; 0x01
    1a8c:	9d 01       	movw	r18, r26
    1a8e:	2f 5f       	subi	r18, 0xFF	; 255
    1a90:	3f 4f       	sbci	r19, 0xFF	; 255
    1a92:	31 83       	std	Z+1, r19	; 0x01
    1a94:	20 83       	st	Z, r18
    1a96:	8c 93       	st	X, r24
    1a98:	26 81       	ldd	r18, Z+6	; 0x06
    1a9a:	37 81       	ldd	r19, Z+7	; 0x07
    1a9c:	2f 5f       	subi	r18, 0xFF	; 255
    1a9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa0:	37 83       	std	Z+7, r19	; 0x07
    1aa2:	26 83       	std	Z+6, r18	; 0x06
    1aa4:	14 c0       	rjmp	.+40     	; 0x1ace <fputc+0x6e>
    1aa6:	8b 01       	movw	r16, r22
    1aa8:	ec 01       	movw	r28, r24
    1aaa:	fb 01       	movw	r30, r22
    1aac:	00 84       	ldd	r0, Z+8	; 0x08
    1aae:	f1 85       	ldd	r31, Z+9	; 0x09
    1ab0:	e0 2d       	mov	r30, r0
    1ab2:	09 95       	icall
    1ab4:	89 2b       	or	r24, r25
    1ab6:	e1 f6       	brne	.-72     	; 0x1a70 <fputc+0x10>
    1ab8:	d8 01       	movw	r26, r16
    1aba:	16 96       	adiw	r26, 0x06	; 6
    1abc:	8d 91       	ld	r24, X+
    1abe:	9c 91       	ld	r25, X
    1ac0:	17 97       	sbiw	r26, 0x07	; 7
    1ac2:	01 96       	adiw	r24, 0x01	; 1
    1ac4:	17 96       	adiw	r26, 0x07	; 7
    1ac6:	9c 93       	st	X, r25
    1ac8:	8e 93       	st	-X, r24
    1aca:	16 97       	sbiw	r26, 0x06	; 6
    1acc:	ce 01       	movw	r24, r28
    1ace:	df 91       	pop	r29
    1ad0:	cf 91       	pop	r28
    1ad2:	1f 91       	pop	r17
    1ad4:	0f 91       	pop	r16
    1ad6:	08 95       	ret

00001ad8 <__ultoa_invert>:
    1ad8:	fa 01       	movw	r30, r20
    1ada:	aa 27       	eor	r26, r26
    1adc:	28 30       	cpi	r18, 0x08	; 8
    1ade:	51 f1       	breq	.+84     	; 0x1b34 <__ultoa_invert+0x5c>
    1ae0:	20 31       	cpi	r18, 0x10	; 16
    1ae2:	81 f1       	breq	.+96     	; 0x1b44 <__ultoa_invert+0x6c>
    1ae4:	e8 94       	clt
    1ae6:	6f 93       	push	r22
    1ae8:	6e 7f       	andi	r22, 0xFE	; 254
    1aea:	6e 5f       	subi	r22, 0xFE	; 254
    1aec:	7f 4f       	sbci	r23, 0xFF	; 255
    1aee:	8f 4f       	sbci	r24, 0xFF	; 255
    1af0:	9f 4f       	sbci	r25, 0xFF	; 255
    1af2:	af 4f       	sbci	r26, 0xFF	; 255
    1af4:	b1 e0       	ldi	r27, 0x01	; 1
    1af6:	3e d0       	rcall	.+124    	; 0x1b74 <__ultoa_invert+0x9c>
    1af8:	b4 e0       	ldi	r27, 0x04	; 4
    1afa:	3c d0       	rcall	.+120    	; 0x1b74 <__ultoa_invert+0x9c>
    1afc:	67 0f       	add	r22, r23
    1afe:	78 1f       	adc	r23, r24
    1b00:	89 1f       	adc	r24, r25
    1b02:	9a 1f       	adc	r25, r26
    1b04:	a1 1d       	adc	r26, r1
    1b06:	68 0f       	add	r22, r24
    1b08:	79 1f       	adc	r23, r25
    1b0a:	8a 1f       	adc	r24, r26
    1b0c:	91 1d       	adc	r25, r1
    1b0e:	a1 1d       	adc	r26, r1
    1b10:	6a 0f       	add	r22, r26
    1b12:	71 1d       	adc	r23, r1
    1b14:	81 1d       	adc	r24, r1
    1b16:	91 1d       	adc	r25, r1
    1b18:	a1 1d       	adc	r26, r1
    1b1a:	20 d0       	rcall	.+64     	; 0x1b5c <__ultoa_invert+0x84>
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <__ultoa_invert+0x48>
    1b1e:	68 94       	set
    1b20:	3f 91       	pop	r19
    1b22:	2a e0       	ldi	r18, 0x0A	; 10
    1b24:	26 9f       	mul	r18, r22
    1b26:	11 24       	eor	r1, r1
    1b28:	30 19       	sub	r19, r0
    1b2a:	30 5d       	subi	r19, 0xD0	; 208
    1b2c:	31 93       	st	Z+, r19
    1b2e:	de f6       	brtc	.-74     	; 0x1ae6 <__ultoa_invert+0xe>
    1b30:	cf 01       	movw	r24, r30
    1b32:	08 95       	ret
    1b34:	46 2f       	mov	r20, r22
    1b36:	47 70       	andi	r20, 0x07	; 7
    1b38:	40 5d       	subi	r20, 0xD0	; 208
    1b3a:	41 93       	st	Z+, r20
    1b3c:	b3 e0       	ldi	r27, 0x03	; 3
    1b3e:	0f d0       	rcall	.+30     	; 0x1b5e <__ultoa_invert+0x86>
    1b40:	c9 f7       	brne	.-14     	; 0x1b34 <__ultoa_invert+0x5c>
    1b42:	f6 cf       	rjmp	.-20     	; 0x1b30 <__ultoa_invert+0x58>
    1b44:	46 2f       	mov	r20, r22
    1b46:	4f 70       	andi	r20, 0x0F	; 15
    1b48:	40 5d       	subi	r20, 0xD0	; 208
    1b4a:	4a 33       	cpi	r20, 0x3A	; 58
    1b4c:	18 f0       	brcs	.+6      	; 0x1b54 <__ultoa_invert+0x7c>
    1b4e:	49 5d       	subi	r20, 0xD9	; 217
    1b50:	31 fd       	sbrc	r19, 1
    1b52:	40 52       	subi	r20, 0x20	; 32
    1b54:	41 93       	st	Z+, r20
    1b56:	02 d0       	rcall	.+4      	; 0x1b5c <__ultoa_invert+0x84>
    1b58:	a9 f7       	brne	.-22     	; 0x1b44 <__ultoa_invert+0x6c>
    1b5a:	ea cf       	rjmp	.-44     	; 0x1b30 <__ultoa_invert+0x58>
    1b5c:	b4 e0       	ldi	r27, 0x04	; 4
    1b5e:	a6 95       	lsr	r26
    1b60:	97 95       	ror	r25
    1b62:	87 95       	ror	r24
    1b64:	77 95       	ror	r23
    1b66:	67 95       	ror	r22
    1b68:	ba 95       	dec	r27
    1b6a:	c9 f7       	brne	.-14     	; 0x1b5e <__ultoa_invert+0x86>
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	61 05       	cpc	r22, r1
    1b70:	71 05       	cpc	r23, r1
    1b72:	08 95       	ret
    1b74:	9b 01       	movw	r18, r22
    1b76:	ac 01       	movw	r20, r24
    1b78:	0a 2e       	mov	r0, r26
    1b7a:	06 94       	lsr	r0
    1b7c:	57 95       	ror	r21
    1b7e:	47 95       	ror	r20
    1b80:	37 95       	ror	r19
    1b82:	27 95       	ror	r18
    1b84:	ba 95       	dec	r27
    1b86:	c9 f7       	brne	.-14     	; 0x1b7a <__ultoa_invert+0xa2>
    1b88:	62 0f       	add	r22, r18
    1b8a:	73 1f       	adc	r23, r19
    1b8c:	84 1f       	adc	r24, r20
    1b8e:	95 1f       	adc	r25, r21
    1b90:	a0 1d       	adc	r26, r0
    1b92:	08 95       	ret

00001b94 <_exit>:
    1b94:	f8 94       	cli

00001b96 <__stop_program>:
    1b96:	ff cf       	rjmp	.-2      	; 0x1b96 <__stop_program>
