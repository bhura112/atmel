
seven-seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  000004f2  00000586  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  0080012a  0080012a  000005b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015e7  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bad  00000000  00000000  00001cab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000075c  00000000  00000000  00002858  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00002fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a7  00000000  00000000  0000319c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a37  00000000  00000000  00003843  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000427a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	85 c0       	rjmp	.+266    	; 0x10c <__ctors_end>
   2:	00 00       	nop
   4:	a0 c0       	rjmp	.+320    	; 0x146 <__bad_interrupt>
   6:	00 00       	nop
   8:	9e c0       	rjmp	.+316    	; 0x146 <__bad_interrupt>
   a:	00 00       	nop
   c:	9c c0       	rjmp	.+312    	; 0x146 <__bad_interrupt>
   e:	00 00       	nop
  10:	9a c0       	rjmp	.+308    	; 0x146 <__bad_interrupt>
  12:	00 00       	nop
  14:	98 c0       	rjmp	.+304    	; 0x146 <__bad_interrupt>
  16:	00 00       	nop
  18:	96 c0       	rjmp	.+300    	; 0x146 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	94 c0       	rjmp	.+296    	; 0x146 <__bad_interrupt>
  1e:	00 00       	nop
  20:	92 c0       	rjmp	.+292    	; 0x146 <__bad_interrupt>
  22:	00 00       	nop
  24:	90 c0       	rjmp	.+288    	; 0x146 <__bad_interrupt>
  26:	00 00       	nop
  28:	8e c0       	rjmp	.+284    	; 0x146 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	8c c0       	rjmp	.+280    	; 0x146 <__bad_interrupt>
  2e:	00 00       	nop
  30:	8a c0       	rjmp	.+276    	; 0x146 <__bad_interrupt>
  32:	00 00       	nop
  34:	88 c0       	rjmp	.+272    	; 0x146 <__bad_interrupt>
  36:	00 00       	nop
  38:	86 c0       	rjmp	.+268    	; 0x146 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	84 c0       	rjmp	.+264    	; 0x146 <__bad_interrupt>
  3e:	00 00       	nop
  40:	82 c0       	rjmp	.+260    	; 0x146 <__bad_interrupt>
  42:	00 00       	nop
  44:	80 c0       	rjmp	.+256    	; 0x146 <__bad_interrupt>
  46:	00 00       	nop
  48:	7e c0       	rjmp	.+252    	; 0x146 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7c c0       	rjmp	.+248    	; 0x146 <__bad_interrupt>
  4e:	00 00       	nop
  50:	7a c0       	rjmp	.+244    	; 0x146 <__bad_interrupt>
  52:	00 00       	nop
  54:	78 c0       	rjmp	.+240    	; 0x146 <__bad_interrupt>
  56:	00 00       	nop
  58:	76 c0       	rjmp	.+236    	; 0x146 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	74 c0       	rjmp	.+232    	; 0x146 <__bad_interrupt>
  5e:	00 00       	nop
  60:	72 c0       	rjmp	.+228    	; 0x146 <__bad_interrupt>
  62:	00 00       	nop
  64:	70 c0       	rjmp	.+224    	; 0x146 <__bad_interrupt>
  66:	00 00       	nop
  68:	6e c0       	rjmp	.+220    	; 0x146 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	6c c0       	rjmp	.+216    	; 0x146 <__bad_interrupt>
  6e:	00 00       	nop
  70:	6a c0       	rjmp	.+212    	; 0x146 <__bad_interrupt>
  72:	00 00       	nop
  74:	68 c0       	rjmp	.+208    	; 0x146 <__bad_interrupt>
  76:	00 00       	nop
  78:	66 c0       	rjmp	.+204    	; 0x146 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	64 c0       	rjmp	.+200    	; 0x146 <__bad_interrupt>
  7e:	00 00       	nop
  80:	62 c0       	rjmp	.+196    	; 0x146 <__bad_interrupt>
  82:	00 00       	nop
  84:	60 c0       	rjmp	.+192    	; 0x146 <__bad_interrupt>
  86:	00 00       	nop
  88:	5e c0       	rjmp	.+188    	; 0x146 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
  8c:	7e 30       	cpi	r23, 0x0E	; 14
  8e:	6d 79       	andi	r22, 0x9D	; 157
  90:	33 5b       	subi	r19, 0xB3	; 179
  92:	5f 70       	andi	r21, 0x0F	; 15
  94:	7f 7b       	andi	r23, 0xBF	; 191
  96:	77 1f       	adc	r23, r23
  98:	4e 3d       	cpi	r20, 0xDE	; 222
  9a:	4f 47       	sbci	r20, 0x7F	; 127
	...
  ac:	00 00       	nop
  ae:	22 00       	.word	0x0022	; ????
  b0:	00 00       	nop
  b2:	00 20       	and	r0, r0
  b4:	4e 78       	andi	r20, 0x8E	; 142
  b6:	00 00       	nop
  b8:	04 01       	movw	r0, r8
  ba:	00 00       	nop
  bc:	7e 30       	cpi	r23, 0x0E	; 14
  be:	6d 79       	andi	r22, 0x9D	; 157
  c0:	33 5b       	subi	r19, 0xB3	; 179
  c2:	5f 70       	andi	r21, 0x0F	; 15
  c4:	7f 7b       	andi	r23, 0xBF	; 191
  c6:	00 00       	nop
  c8:	00 00       	nop
  ca:	00 00       	nop
  cc:	00 77       	andi	r16, 0x70	; 112
  ce:	1f 4e       	sbci	r17, 0xEF	; 239
  d0:	3d 4f       	sbci	r19, 0xFD	; 253
  d2:	47 5e       	subi	r20, 0xE7	; 231
  d4:	37 30       	cpi	r19, 0x07	; 7
  d6:	38 00       	.word	0x0038	; ????
  d8:	0e 00       	.word	0x000e	; ????
  da:	15 7e       	andi	r17, 0xE5	; 229
  dc:	67 73       	andi	r22, 0x37	; 55
  de:	05 5b       	subi	r16, 0xB5	; 181
  e0:	0f 3e       	cpi	r16, 0xEF	; 239
  e2:	00 00       	nop
  e4:	00 3b       	cpi	r16, 0xB0	; 176
  e6:	00 4e       	sbci	r16, 0xE0	; 224
  e8:	00 78       	andi	r16, 0x80	; 128
  ea:	00 08       	sbc	r0, r0
  ec:	02 77       	andi	r16, 0x72	; 114
  ee:	1f 0d       	add	r17, r15
  f0:	3d 6f       	ori	r19, 0xFD	; 253
  f2:	47 5e       	subi	r20, 0xE7	; 231
  f4:	17 10       	cpse	r1, r7
  f6:	38 00       	.word	0x0038	; ????
  f8:	30 00       	.word	0x0030	; ????
  fa:	15 1d       	adc	r17, r5
  fc:	67 73       	andi	r22, 0x37	; 55
  fe:	05 5b       	subi	r16, 0xB5	; 181
 100:	0f 1c       	adc	r0, r15
	...

0000010c <__ctors_end>:
 10c:	11 24       	eor	r1, r1
 10e:	1f be       	out	0x3f, r1	; 63
 110:	cf ef       	ldi	r28, 0xFF	; 255
 112:	d0 e1       	ldi	r29, 0x10	; 16
 114:	de bf       	out	0x3e, r29	; 62
 116:	cd bf       	out	0x3d, r28	; 61

00000118 <__do_copy_data>:
 118:	11 e0       	ldi	r17, 0x01	; 1
 11a:	a0 e0       	ldi	r26, 0x00	; 0
 11c:	b1 e0       	ldi	r27, 0x01	; 1
 11e:	e2 ef       	ldi	r30, 0xF2	; 242
 120:	f4 e0       	ldi	r31, 0x04	; 4
 122:	00 e0       	ldi	r16, 0x00	; 0
 124:	0b bf       	out	0x3b, r16	; 59
 126:	02 c0       	rjmp	.+4      	; 0x12c <__do_copy_data+0x14>
 128:	07 90       	elpm	r0, Z+
 12a:	0d 92       	st	X+, r0
 12c:	aa 32       	cpi	r26, 0x2A	; 42
 12e:	b1 07       	cpc	r27, r17
 130:	d9 f7       	brne	.-10     	; 0x128 <__do_copy_data+0x10>

00000132 <__do_clear_bss>:
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	aa e2       	ldi	r26, 0x2A	; 42
 136:	b1 e0       	ldi	r27, 0x01	; 1
 138:	01 c0       	rjmp	.+2      	; 0x13c <.do_clear_bss_start>

0000013a <.do_clear_bss_loop>:
 13a:	1d 92       	st	X+, r1

0000013c <.do_clear_bss_start>:
 13c:	af 34       	cpi	r26, 0x4F	; 79
 13e:	b2 07       	cpc	r27, r18
 140:	e1 f7       	brne	.-8      	; 0x13a <.do_clear_bss_loop>
 142:	5d d0       	rcall	.+186    	; 0x1fe <main>
 144:	d4 c1       	rjmp	.+936    	; 0x4ee <_exit>

00000146 <__bad_interrupt>:
 146:	5c cf       	rjmp	.-328    	; 0x0 <__vectors>

00000148 <gpio_setdir>:
	u8_t r_reg = *gpiomap[io->port][2];
	if(r_reg & (1 << io->pin))
		return PIN_HIGH;
	else
		return PIN_LOW;
}
 148:	dc 01       	movw	r26, r24
 14a:	96 2f       	mov	r25, r22
 14c:	2c 91       	ld	r18, X
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	f9 01       	movw	r30, r18
 152:	ee 0f       	add	r30, r30
 154:	ff 1f       	adc	r31, r31
 156:	e2 0f       	add	r30, r18
 158:	f3 1f       	adc	r31, r19
 15a:	ee 0f       	add	r30, r30
 15c:	ff 1f       	adc	r31, r31
 15e:	e0 50       	subi	r30, 0x00	; 0
 160:	ff 4f       	sbci	r31, 0xFF	; 255
 162:	01 90       	ld	r0, Z+
 164:	f0 81       	ld	r31, Z
 166:	e0 2d       	mov	r30, r0
 168:	60 81       	ld	r22, Z
 16a:	11 96       	adiw	r26, 0x01	; 1
 16c:	8c 91       	ld	r24, X
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	08 2e       	mov	r0, r24
 174:	02 c0       	rjmp	.+4      	; 0x17a <gpio_setdir+0x32>
 176:	22 0f       	add	r18, r18
 178:	33 1f       	adc	r19, r19
 17a:	0a 94       	dec	r0
 17c:	e2 f7       	brpl	.-8      	; 0x176 <gpio_setdir+0x2e>
 17e:	20 95       	com	r18
 180:	26 23       	and	r18, r22
 182:	69 2f       	mov	r22, r25
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <gpio_setdir+0x44>
 188:	66 0f       	add	r22, r22
 18a:	77 1f       	adc	r23, r23
 18c:	8a 95       	dec	r24
 18e:	e2 f7       	brpl	.-8      	; 0x188 <gpio_setdir+0x40>
 190:	62 2b       	or	r22, r18
 192:	60 83       	st	Z, r22
 194:	08 95       	ret

00000196 <gpio_set>:
 196:	dc 01       	movw	r26, r24
 198:	96 2f       	mov	r25, r22
 19a:	2c 91       	ld	r18, X
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	f9 01       	movw	r30, r18
 1a0:	ee 0f       	add	r30, r30
 1a2:	ff 1f       	adc	r31, r31
 1a4:	e2 0f       	add	r30, r18
 1a6:	f3 1f       	adc	r31, r19
 1a8:	ee 0f       	add	r30, r30
 1aa:	ff 1f       	adc	r31, r31
 1ac:	e0 50       	subi	r30, 0x00	; 0
 1ae:	ff 4f       	sbci	r31, 0xFF	; 255
 1b0:	02 80       	ldd	r0, Z+2	; 0x02
 1b2:	f3 81       	ldd	r31, Z+3	; 0x03
 1b4:	e0 2d       	mov	r30, r0
 1b6:	60 81       	ld	r22, Z
 1b8:	11 96       	adiw	r26, 0x01	; 1
 1ba:	8c 91       	ld	r24, X
 1bc:	21 e0       	ldi	r18, 0x01	; 1
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	08 2e       	mov	r0, r24
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <gpio_set+0x32>
 1c4:	22 0f       	add	r18, r18
 1c6:	33 1f       	adc	r19, r19
 1c8:	0a 94       	dec	r0
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <gpio_set+0x2e>
 1cc:	20 95       	com	r18
 1ce:	26 23       	and	r18, r22
 1d0:	69 2f       	mov	r22, r25
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <gpio_set+0x44>
 1d6:	66 0f       	add	r22, r22
 1d8:	77 1f       	adc	r23, r23
 1da:	8a 95       	dec	r24
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <gpio_set+0x40>
 1de:	62 2b       	or	r22, r18
 1e0:	60 83       	st	Z, r22
 1e2:	08 95       	ret

000001e4 <gpio_config>:

void gpio_config(gpio_t *io,gpio_dir_t dir,gpio_state_t state) {
 1e4:	1f 93       	push	r17
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	ec 01       	movw	r28, r24
 1ec:	14 2f       	mov	r17, r20
	gpio_setdir(io,dir);
 1ee:	ac df       	rcall	.-168    	; 0x148 <gpio_setdir>
	gpio_set(io,state);
 1f0:	61 2f       	mov	r22, r17
 1f2:	ce 01       	movw	r24, r28
 1f4:	d0 df       	rcall	.-96     	; 0x196 <gpio_set>
}
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	1f 91       	pop	r17
 1fc:	08 95       	ret

000001fe <main>:
							 SEG_PIN(PORT_B,PIN_2),
							 SEG_PIN(PORT_B,PIN_3),
							 SEG_PIN(PORT_B,PIN_4),
							 SEG_PIN(PORT_B,PIN_5),
							 SEG_PIN(PORT_B,PIN_6),
							 SEG_PIN(PORT_B,PIN_7), 
 1fe:	81 e0       	ldi	r24, 0x01	; 1
							 SEG_PIN(PORT_B,PIN_0),  // data pins
							 SEG_PIN(PORT_B,PIN_1),
							 SEG_PIN(PORT_B,PIN_2),
							 SEG_PIN(PORT_B,PIN_3),
							 SEG_PIN(PORT_B,PIN_4),
							 SEG_PIN(PORT_B,PIN_5),
 200:	95 e0       	ldi	r25, 0x05	; 5
							 
							 SEG_PIN(PORT_B,PIN_0),  // data pins
							 SEG_PIN(PORT_B,PIN_1),
							 SEG_PIN(PORT_B,PIN_2),
							 SEG_PIN(PORT_B,PIN_3),
							 SEG_PIN(PORT_B,PIN_4),
 202:	44 e0       	ldi	r20, 0x04	; 4
							 SEG_PIN(PORT_A,PIN_7),*/
							 
							 SEG_PIN(PORT_B,PIN_0),  // data pins
							 SEG_PIN(PORT_B,PIN_1),
							 SEG_PIN(PORT_B,PIN_2),
							 SEG_PIN(PORT_B,PIN_3),
 204:	33 e0       	ldi	r19, 0x03	; 3
							 SEG_PIN(PORT_A,PIN_6),
							 SEG_PIN(PORT_A,PIN_7),*/
							 
							 SEG_PIN(PORT_B,PIN_0),  // data pins
							 SEG_PIN(PORT_B,PIN_1),
							 SEG_PIN(PORT_B,PIN_2),
 206:	22 e0       	ldi	r18, 0x02	; 2
	
int main(void)
{
	//int x =35;
	
   segment_config(&sev_seg,
 208:	1f 92       	push	r1
 20a:	1f 92       	push	r1
 20c:	57 e0       	ldi	r21, 0x07	; 7
 20e:	5f 93       	push	r21
 210:	8f 93       	push	r24
 212:	56 e0       	ldi	r21, 0x06	; 6
 214:	5f 93       	push	r21
 216:	8f 93       	push	r24
 218:	9f 93       	push	r25
 21a:	8f 93       	push	r24
 21c:	4f 93       	push	r20
 21e:	8f 93       	push	r24
 220:	3f 93       	push	r19
 222:	8f 93       	push	r24
 224:	2f 93       	push	r18
 226:	8f 93       	push	r24
 228:	8f 93       	push	r24
 22a:	8f 93       	push	r24
 22c:	1f 92       	push	r1
 22e:	8f 93       	push	r24
 230:	4f 93       	push	r20
 232:	1f 92       	push	r1
 234:	3f 93       	push	r19
 236:	1f 92       	push	r1
 238:	2f 93       	push	r18
 23a:	1f 92       	push	r1
 23c:	8f 93       	push	r24
 23e:	1f 92       	push	r1
 240:	1f 92       	push	r1
 242:	1f 92       	push	r1
 244:	9f 93       	push	r25
 246:	8a e2       	ldi	r24, 0x2A	; 42
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	9f 93       	push	r25
 24c:	8f 93       	push	r24
 24e:	22 d0       	rcall	.+68     	; 0x294 <segment_config>
 250:	8d b7       	in	r24, 0x3d	; 61
 252:	9e b7       	in	r25, 0x3e	; 62
 254:	4f 96       	adiw	r24, 0x1f	; 31
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	f8 94       	cli
 25a:	9e bf       	out	0x3e, r25	; 62
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	8d bf       	out	0x3d, r24	; 61
							 SEG_ANODE); //type
							 
    while (1) 
    {
		
		segment_writeChar(&sev_seg,0,'T');
 260:	44 e5       	ldi	r20, 0x54	; 84
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	8a e2       	ldi	r24, 0x2A	; 42
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	26 d1       	rcall	.+588    	; 0x4b6 <segment_writeChar>
		
		segment_writeChar(&sev_seg,1,4);
 26a:	44 e0       	ldi	r20, 0x04	; 4
 26c:	61 e0       	ldi	r22, 0x01	; 1
 26e:	8a e2       	ldi	r24, 0x2A	; 42
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	21 d1       	rcall	.+578    	; 0x4b6 <segment_writeChar>
        segment_writeChar(&sev_seg,2,1);
 274:	41 e0       	ldi	r20, 0x01	; 1
 276:	62 e0       	ldi	r22, 0x02	; 2
 278:	8a e2       	ldi	r24, 0x2A	; 42
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	1c d1       	rcall	.+568    	; 0x4b6 <segment_writeChar>
		
		segment_writeChar(&sev_seg,3,'\'');
 27e:	47 e2       	ldi	r20, 0x27	; 39
 280:	63 e0       	ldi	r22, 0x03	; 3
 282:	8a e2       	ldi	r24, 0x2A	; 42
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	17 d1       	rcall	.+558    	; 0x4b6 <segment_writeChar>
		segment_writeChar(&sev_seg,4,'C');
 288:	43 e4       	ldi	r20, 0x43	; 67
 28a:	64 e0       	ldi	r22, 0x04	; 4
 28c:	8a e2       	ldi	r24, 0x2A	; 42
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	12 d1       	rcall	.+548    	; 0x4b6 <segment_writeChar>
 292:	e6 cf       	rjmp	.-52     	; 0x260 <main+0x62>

00000294 <segment_config>:
 294:	cf 92       	push	r12
	
};

u8_t segOn,segOff,digOff,digOn;

void segment_config(segment_t *seg,u8_t cntrl_bus,...) {
 296:	df 92       	push	r13
 298:	ef 92       	push	r14
 29a:	ff 92       	push	r15
 29c:	0f 93       	push	r16
 29e:	1f 93       	push	r17
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	cd b7       	in	r28, 0x3d	; 61
 2a6:	de b7       	in	r29, 0x3e	; 62
 2a8:	0b 85       	ldd	r16, Y+11	; 0x0b
 2aa:	1c 85       	ldd	r17, Y+12	; 0x0c
 2ac:	4d 85       	ldd	r20, Y+13	; 0x0d
	
	va_list args;
	
	seg->max_digits = cntrl_bus;
 2ae:	f8 01       	movw	r30, r16
 2b0:	40 a3       	std	Z+32, r20	; 0x20
	
	va_start(args,cntrl_bus);
 2b2:	fe 01       	movw	r30, r28
 2b4:	3e 96       	adiw	r30, 0x0e	; 14
	
	for(int  i = 0 ; i < cntrl_bus; i++) {
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0c c0       	rjmp	.+24     	; 0x2d4 <segment_config+0x40>
		seg->cntrl_bus[i] = va_arg(args,gpio_t);
 2bc:	dc 01       	movw	r26, r24
 2be:	18 96       	adiw	r26, 0x08	; 8
 2c0:	aa 0f       	add	r26, r26
 2c2:	bb 1f       	adc	r27, r27
 2c4:	a0 0f       	add	r26, r16
 2c6:	b1 1f       	adc	r27, r17
 2c8:	20 81       	ld	r18, Z
 2ca:	31 81       	ldd	r19, Z+1	; 0x01
 2cc:	2d 93       	st	X+, r18
 2ce:	3c 93       	st	X, r19
	
	seg->max_digits = cntrl_bus;
	
	va_start(args,cntrl_bus);
	
	for(int  i = 0 ; i < cntrl_bus; i++) {
 2d0:	01 96       	adiw	r24, 0x01	; 1
		seg->cntrl_bus[i] = va_arg(args,gpio_t);
 2d2:	32 96       	adiw	r30, 0x02	; 2
	
	seg->max_digits = cntrl_bus;
	
	va_start(args,cntrl_bus);
	
	for(int  i = 0 ; i < cntrl_bus; i++) {
 2d4:	c4 2e       	mov	r12, r20
 2d6:	d1 2c       	mov	r13, r1
 2d8:	8c 15       	cp	r24, r12
 2da:	9d 05       	cpc	r25, r13
 2dc:	7c f3       	brlt	.-34     	; 0x2bc <segment_config+0x28>
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0b c0       	rjmp	.+22     	; 0x2fa <segment_config+0x66>
		seg->cntrl_bus[i] = va_arg(args,gpio_t);
		
	}
	
	for(int i = 0; i < 8; i++) {
		seg->data_bus[i] = va_arg(args,gpio_t);
 2e4:	dc 01       	movw	r26, r24
 2e6:	aa 0f       	add	r26, r26
 2e8:	bb 1f       	adc	r27, r27
 2ea:	a0 0f       	add	r26, r16
 2ec:	b1 1f       	adc	r27, r17
 2ee:	20 81       	ld	r18, Z
 2f0:	31 81       	ldd	r19, Z+1	; 0x01
 2f2:	2d 93       	st	X+, r18
 2f4:	3c 93       	st	X, r19
	for(int  i = 0 ; i < cntrl_bus; i++) {
		seg->cntrl_bus[i] = va_arg(args,gpio_t);
		
	}
	
	for(int i = 0; i < 8; i++) {
 2f6:	01 96       	adiw	r24, 0x01	; 1
		seg->data_bus[i] = va_arg(args,gpio_t);
 2f8:	32 96       	adiw	r30, 0x02	; 2
	for(int  i = 0 ; i < cntrl_bus; i++) {
		seg->cntrl_bus[i] = va_arg(args,gpio_t);
		
	}
	
	for(int i = 0; i < 8; i++) {
 2fa:	88 30       	cpi	r24, 0x08	; 8
 2fc:	91 05       	cpc	r25, r1
 2fe:	94 f3       	brlt	.-28     	; 0x2e4 <segment_config+0x50>
		seg->data_bus[i] = va_arg(args,gpio_t);
		
	}
	
	u8_t type = (u8_t)va_arg(args,int);
 300:	80 81       	ld	r24, Z
	
	if(type == SEG_ANODE) {
 302:	81 11       	cpse	r24, r1
 304:	0a c0       	rjmp	.+20     	; 0x31a <segment_config+0x86>
		
		segOn = PIN_LOW;
 306:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <segOn>
		segOff = PIN_HIGH;
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <segOff>
		
		digOn  = PIN_HIGH;
 310:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <digOn>
		digOff = PIN_LOW;
 314:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <digOff>
 318:	09 c0       	rjmp	.+18     	; 0x32c <segment_config+0x98>
	}
	else {
		
		segOn = PIN_HIGH;
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <segOn>
		segOff = PIN_LOW;
 320:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <segOff>
		
		digOn  = PIN_LOW;
 324:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <digOn>
		digOff = PIN_HIGH;
 328:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <digOff>
	}
	va_end(args);
	
	for(int  i = 0 ; i < cntrl_bus; i++)
 32c:	e1 2c       	mov	r14, r1
 32e:	f1 2c       	mov	r15, r1
 330:	0d c0       	rjmp	.+26     	; 0x34c <segment_config+0xb8>
		gpio_config(&seg->cntrl_bus[i],PIN_OUT,digOff);
 332:	c7 01       	movw	r24, r14
 334:	08 96       	adiw	r24, 0x08	; 8
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	40 91 4c 01 	lds	r20, 0x014C	; 0x80014c <digOff>
 33e:	61 e0       	ldi	r22, 0x01	; 1
 340:	80 0f       	add	r24, r16
 342:	91 1f       	adc	r25, r17
 344:	4f df       	rcall	.-354    	; 0x1e4 <gpio_config>
		digOn  = PIN_LOW;
		digOff = PIN_HIGH;
	}
	va_end(args);
	
	for(int  i = 0 ; i < cntrl_bus; i++)
 346:	ff ef       	ldi	r31, 0xFF	; 255
 348:	ef 1a       	sub	r14, r31
 34a:	ff 0a       	sbc	r15, r31
 34c:	ec 14       	cp	r14, r12
 34e:	fd 04       	cpc	r15, r13
 350:	84 f3       	brlt	.-32     	; 0x332 <segment_config+0x9e>
 352:	e1 2c       	mov	r14, r1
 354:	f1 2c       	mov	r15, r1
 356:	0c c0       	rjmp	.+24     	; 0x370 <segment_config+0xdc>
		gpio_config(&seg->cntrl_bus[i],PIN_OUT,digOff);
	for(int i = 0; i < 7; i++)
		gpio_config(&seg->data_bus[i],PIN_OUT,segOff);
 358:	c7 01       	movw	r24, r14
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	40 91 4d 01 	lds	r20, 0x014D	; 0x80014d <segOff>
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	80 0f       	add	r24, r16
 366:	91 1f       	adc	r25, r17
 368:	3d df       	rcall	.-390    	; 0x1e4 <gpio_config>
	}
	va_end(args);
	
	for(int  i = 0 ; i < cntrl_bus; i++)
		gpio_config(&seg->cntrl_bus[i],PIN_OUT,digOff);
	for(int i = 0; i < 7; i++)
 36a:	8f ef       	ldi	r24, 0xFF	; 255
 36c:	e8 1a       	sub	r14, r24
 36e:	f8 0a       	sbc	r15, r24
 370:	e7 e0       	ldi	r30, 0x07	; 7
 372:	ee 16       	cp	r14, r30
 374:	f1 04       	cpc	r15, r1
 376:	84 f3       	brlt	.-32     	; 0x358 <segment_config+0xc4>
		gpio_config(&seg->data_bus[i],PIN_OUT,segOff);
}
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	1f 91       	pop	r17
 37e:	0f 91       	pop	r16
 380:	ff 90       	pop	r15
 382:	ef 90       	pop	r14
 384:	df 90       	pop	r13
 386:	cf 90       	pop	r12
 388:	08 95       	ret

0000038a <segment_select>:

void segment_select(segment_t *seg,u8_t dig) {
	
	if(dig >= seg->max_digits)
 38a:	fc 01       	movw	r30, r24
 38c:	20 a1       	ldd	r18, Z+32	; 0x20
 38e:	62 17       	cp	r22, r18
 390:	58 f4       	brcc	.+22     	; 0x3a8 <segment_select+0x1e>
		return;
	
    	gpio_set(&seg->cntrl_bus[dig],digOn);
 392:	26 2f       	mov	r18, r22
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	28 5f       	subi	r18, 0xF8	; 248
 398:	3f 4f       	sbci	r19, 0xFF	; 255
 39a:	22 0f       	add	r18, r18
 39c:	33 1f       	adc	r19, r19
 39e:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <digOn>
 3a2:	82 0f       	add	r24, r18
 3a4:	93 1f       	adc	r25, r19
 3a6:	f7 ce       	rjmp	.-530    	; 0x196 <gpio_set>
 3a8:	08 95       	ret

000003aa <segment_disselect>:
}

void segment_disselect(segment_t *seg,u8_t dig) {
	
	if(dig >= seg->max_digits)
 3aa:	fc 01       	movw	r30, r24
 3ac:	20 a1       	ldd	r18, Z+32	; 0x20
 3ae:	62 17       	cp	r22, r18
 3b0:	58 f4       	brcc	.+22     	; 0x3c8 <segment_disselect+0x1e>
		return;
	
	gpio_set(&seg->cntrl_bus[dig],digOff);
 3b2:	26 2f       	mov	r18, r22
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	28 5f       	subi	r18, 0xF8	; 248
 3b8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ba:	22 0f       	add	r18, r18
 3bc:	33 1f       	adc	r19, r19
 3be:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <digOff>
 3c2:	82 0f       	add	r24, r18
 3c4:	93 1f       	adc	r25, r19
 3c6:	e7 ce       	rjmp	.-562    	; 0x196 <gpio_set>
 3c8:	08 95       	ret

000003ca <segment_write>:
}

void segment_write(segment_t *seg,u8_t dig, u8_t val) {			
 3ca:	0f 93       	push	r16
 3cc:	1f 93       	push	r17
 3ce:	cf 93       	push	r28
		
		if(dig >= seg->max_digits)
 3d0:	fc 01       	movw	r30, r24
 3d2:	20 a1       	ldd	r18, Z+32	; 0x20
 3d4:	62 17       	cp	r22, r18
 3d6:	08 f0       	brcs	.+2      	; 0x3da <segment_write+0x10>
 3d8:	6a c0       	rjmp	.+212    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 3da:	8c 01       	movw	r16, r24
			return;
			
		u8_t chr = pgm_read_byte(&getSegChar[val]);	
 3dc:	e4 2f       	mov	r30, r20
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	e4 57       	subi	r30, 0x74	; 116
 3e2:	ff 4f       	sbci	r31, 0xFF	; 255
 3e4:	c4 91       	lpm	r28, Z
			
		if((chr & (1 << 7)))
 3e6:	cc 23       	and	r28, r28
 3e8:	2c f4       	brge	.+10     	; 0x3f4 <segment_write+0x2a>
			gpio_set(&seg->data_bus[SEG_BUS_H],segOn);
 3ea:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <segOn>
 3ee:	0e 96       	adiw	r24, 0x0e	; 14
 3f0:	d2 de       	rcall	.-604    	; 0x196 <gpio_set>
 3f2:	04 c0       	rjmp	.+8      	; 0x3fc <segment_write+0x32>
		else 
			gpio_set(&seg->data_bus[SEG_BUS_H],segOff);
 3f4:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <segOff>
 3f8:	0e 96       	adiw	r24, 0x0e	; 14
 3fa:	cd de       	rcall	.-614    	; 0x196 <gpio_set>
			
		if((chr & (1 << 6)))
 3fc:	c6 ff       	sbrs	r28, 6
 3fe:	05 c0       	rjmp	.+10     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
			gpio_set(&seg->data_bus[SEG_BUS_A],segOn);
 400:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <segOn>
 404:	c8 01       	movw	r24, r16
 406:	c7 de       	rcall	.-626    	; 0x196 <gpio_set>
 408:	04 c0       	rjmp	.+8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		else 
			gpio_set(&seg->data_bus[SEG_BUS_A],segOff);
 40a:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <segOff>
 40e:	c8 01       	movw	r24, r16
 410:	c2 de       	rcall	.-636    	; 0x196 <gpio_set>
			
		if((chr & (1 << 5)))
 412:	c5 ff       	sbrs	r28, 5
 414:	06 c0       	rjmp	.+12     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			gpio_set(&seg->data_bus[SEG_BUS_B],segOn);
 416:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <segOn>
 41a:	c8 01       	movw	r24, r16
 41c:	02 96       	adiw	r24, 0x02	; 2
 41e:	bb de       	rcall	.-650    	; 0x196 <gpio_set>
 420:	05 c0       	rjmp	.+10     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		else 
			gpio_set(&seg->data_bus[SEG_BUS_B],segOff);
 422:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <segOff>
 426:	c8 01       	movw	r24, r16
 428:	02 96       	adiw	r24, 0x02	; 2
 42a:	b5 de       	rcall	.-662    	; 0x196 <gpio_set>
 42c:	c4 ff       	sbrs	r28, 4
			
		if((chr & (1 << 4)))
 42e:	06 c0       	rjmp	.+12     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
			gpio_set(&seg->data_bus[SEG_BUS_C],segOn);
 430:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <segOn>
 434:	c8 01       	movw	r24, r16
 436:	04 96       	adiw	r24, 0x04	; 4
 438:	ae de       	rcall	.-676    	; 0x196 <gpio_set>
 43a:	05 c0       	rjmp	.+10     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
		else 
			gpio_set(&seg->data_bus[SEG_BUS_C],segOff);
 43c:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <segOff>
 440:	c8 01       	movw	r24, r16
 442:	04 96       	adiw	r24, 0x04	; 4
 444:	a8 de       	rcall	.-688    	; 0x196 <gpio_set>
			
		if((chr & (1 << 3)))
 446:	c3 ff       	sbrs	r28, 3
 448:	06 c0       	rjmp	.+12     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
			gpio_set(&seg->data_bus[SEG_BUS_D],segOn);
 44a:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <segOn>
 44e:	c8 01       	movw	r24, r16
 450:	06 96       	adiw	r24, 0x06	; 6
 452:	a1 de       	rcall	.-702    	; 0x196 <gpio_set>
 454:	05 c0       	rjmp	.+10     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		else 
			gpio_set(&seg->data_bus[SEG_BUS_D],segOff);
 456:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <segOff>
 45a:	c8 01       	movw	r24, r16
 45c:	06 96       	adiw	r24, 0x06	; 6
 45e:	9b de       	rcall	.-714    	; 0x196 <gpio_set>
			
		if((chr & (1 << 2)))
 460:	c2 ff       	sbrs	r28, 2
 462:	06 c0       	rjmp	.+12     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
			gpio_set(&seg->data_bus[SEG_BUS_E],segOn);
 464:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <segOn>
 468:	c8 01       	movw	r24, r16
 46a:	08 96       	adiw	r24, 0x08	; 8
 46c:	94 de       	rcall	.-728    	; 0x196 <gpio_set>
 46e:	05 c0       	rjmp	.+10     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
		else 
			gpio_set(&seg->data_bus[SEG_BUS_E],segOff);
 470:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <segOff>
 474:	c8 01       	movw	r24, r16
 476:	08 96       	adiw	r24, 0x08	; 8
 478:	8e de       	rcall	.-740    	; 0x196 <gpio_set>
			
		if((chr & (1 << 1)))
 47a:	c1 ff       	sbrs	r28, 1
			gpio_set(&seg->data_bus[SEG_BUS_F],segOn);
 47c:	06 c0       	rjmp	.+12     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 47e:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <segOn>
 482:	c8 01       	movw	r24, r16
 484:	0a 96       	adiw	r24, 0x0a	; 10
 486:	87 de       	rcall	.-754    	; 0x196 <gpio_set>
		else 
			gpio_set(&seg->data_bus[SEG_BUS_F],segOff);
 488:	05 c0       	rjmp	.+10     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 48a:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <segOff>
 48e:	c8 01       	movw	r24, r16
 490:	0a 96       	adiw	r24, 0x0a	; 10
			
		if((chr & (1 << 0)))
 492:	81 de       	rcall	.-766    	; 0x196 <gpio_set>
 494:	c0 ff       	sbrs	r28, 0
			gpio_set(&seg->data_bus[SEG_BUS_G],segOn);
 496:	06 c0       	rjmp	.+12     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 498:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <segOn>
 49c:	c8 01       	movw	r24, r16
 49e:	0c 96       	adiw	r24, 0x0c	; 12
 4a0:	7a de       	rcall	.-780    	; 0x196 <gpio_set>
 4a2:	05 c0       	rjmp	.+10     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
		else 
			gpio_set(&seg->data_bus[SEG_BUS_G],segOff);
 4a4:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <segOff>
 4a8:	c8 01       	movw	r24, r16
 4aa:	0c 96       	adiw	r24, 0x0c	; 12
 4ac:	74 de       	rcall	.-792    	; 0x196 <gpio_set>
 4ae:	cf 91       	pop	r28
		
}
 4b0:	1f 91       	pop	r17
 4b2:	0f 91       	pop	r16
 4b4:	08 95       	ret

000004b6 <segment_writeChar>:
 4b6:	1f 93       	push	r17

void segment_writeChar(segment_t *seg,u8_t dig,u8_t chr) {
 4b8:	cf 93       	push	r28
 4ba:	df 93       	push	r29
 4bc:	ec 01       	movw	r28, r24
 4be:	16 2f       	mov	r17, r22
	
	segment_write(seg,dig,chr);
 4c0:	84 df       	rcall	.-248    	; 0x3ca <segment_write>

	segment_select(seg,dig);
 4c2:	61 2f       	mov	r22, r17
 4c4:	ce 01       	movw	r24, r28
 4c6:	61 df       	rcall	.-318    	; 0x38a <segment_select>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c8:	89 ef       	ldi	r24, 0xF9	; 249
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	01 97       	sbiw	r24, 0x01	; 1
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <segment_writeChar+0x16>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <segment_writeChar+0x1c>
 4d2:	00 00       	nop
	_delay_ms(1);
	segment_disselect(seg,dig);
 4d4:	61 2f       	mov	r22, r17
 4d6:	ce 01       	movw	r24, r28
 4d8:	68 df       	rcall	.-304    	; 0x3aa <segment_disselect>
 4da:	89 ef       	ldi	r24, 0xF9	; 249
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	01 97       	sbiw	r24, 0x01	; 1
 4e0:	f1 f7       	brne	.-4      	; 0x4de <segment_writeChar+0x28>
 4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <segment_writeChar+0x2e>
 4e4:	00 00       	nop
		_delay_ms(1);
}
 4e6:	df 91       	pop	r29
 4e8:	cf 91       	pop	r28
 4ea:	1f 91       	pop	r17
 4ec:	08 95       	ret

000004ee <_exit>:
 4ee:	f8 94       	cli

000004f0 <__stop_program>:
 4f0:	ff cf       	rjmp	.-2      	; 0x4f0 <__stop_program>
